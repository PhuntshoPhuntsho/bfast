import sys
import numpy as np
import ctypes as ct
# Stub code for OpenCL setup.

import pyopencl as cl
import numpy as np
import sys

if cl.version.VERSION < (2015,2):
    raise Exception('Futhark requires at least PyOpenCL version 2015.2.  Installed version is %s.' %
                    cl.version.VERSION_TEXT)

def parse_preferred_device(s):
    pref_num = 0
    if len(s) > 1 and s[0] == '#':
        i = 1
        while i < len(s):
            if not s[i].isdigit():
                break
            else:
                pref_num = pref_num * 10 + int(s[i])
            i += 1
        while i < len(s) and s[i].isspace():
            i += 1
        return (s[i:], pref_num)
    else:
        return (s, 0)

def get_prefered_context(interactive=False, platform_pref=None, device_pref=None):
    if device_pref != None:
        (device_pref, device_num) = parse_preferred_device(device_pref)
    else:
        device_num = 0

    if interactive:
        return cl.create_some_context(interactive=True)

    def blacklisted(p, d):
        return platform_pref == None and device_pref == None and \
            p.name == "Apple" and d.name.find("Intel(R) Core(TM)") >= 0
    def platform_ok(p):
        return not platform_pref or p.name.find(platform_pref) >= 0
    def device_ok(d):
        return not device_pref or d.name.find(device_pref) >= 0

    device_matches = 0

    for p in cl.get_platforms():
        if not platform_ok(p):
            continue
        for d in p.get_devices():
            if blacklisted(p,d) or not device_ok(d):
                continue
            if device_matches == device_num:
                return cl.Context(devices=[d])
            else:
                device_matches += 1
    raise Exception('No OpenCL platform and device matching constraints found.')

def size_assignment(s):
    name, value = s.split('=')
    return (name, int(value))

def check_types(self, required_types):
    if 'f64' in required_types:
        if self.device.get_info(cl.device_info.PREFERRED_VECTOR_WIDTH_DOUBLE) == 0:
            raise Exception('Program uses double-precision floats, but this is not supported on chosen device: %s' % self.device.name)

def apply_size_heuristics(self, size_heuristics, sizes):
    for (platform_name, device_type, size, valuef) in size_heuristics:
        if sizes[size] == None \
           and self.platform.name.find(platform_name) >= 0 \
           and (self.device.type & device_type) == device_type:
               sizes[size] = valuef(self.device)
    return sizes

def initialise_opencl_object(self,
                             program_src='',
                             command_queue=None,
                             interactive=False,
                             platform_pref=None,
                             device_pref=None,
                             default_group_size=None,
                             default_num_groups=None,
                             default_tile_size=None,
                             default_threshold=None,
                             size_heuristics=[],
                             required_types=[],
                             all_sizes={},
                             user_sizes={}):
    if command_queue is None:
        self.ctx = get_prefered_context(interactive, platform_pref, device_pref)
        self.queue = cl.CommandQueue(self.ctx)
    else:
        self.ctx = command_queue.context
        self.queue = command_queue
    self.device = self.queue.device
    self.platform = self.device.platform
    self.pool = cl.tools.MemoryPool(cl.tools.ImmediateAllocator(self.queue))
    device_type = self.device.type

    check_types(self, required_types)

    max_group_size = int(self.device.max_work_group_size)
    max_tile_size = int(np.sqrt(self.device.max_work_group_size))

    self.max_group_size = max_group_size
    self.max_tile_size = max_tile_size
    self.max_threshold = 0
    self.max_num_groups = 0

    self.max_local_memory = int(self.device.local_mem_size)

    # Futhark reserves 4 bytes of local memory for its own purposes.
    self.max_local_memory -= 4

    # See comment in rts/c/opencl.h.
    if self.platform.name.find('NVIDIA CUDA') >= 0:
        self.max_local_memory -= 12
    elif self.platform.name.find('AMD') >= 0:
        self.max_local_memory -= 16

    self.free_list = {}

    self.global_failure = self.pool.allocate(np.int32().itemsize)
    cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)
    self.global_failure_args = self.pool.allocate(np.int64().itemsize *
                                                  (self.global_failure_args_max+1))
    self.failure_is_an_option = np.int32(0)

    if 'default_group_size' in sizes:
        default_group_size = sizes['default_group_size']
        del sizes['default_group_size']

    if 'default_num_groups' in sizes:
        default_num_groups = sizes['default_num_groups']
        del sizes['default_num_groups']

    if 'default_tile_size' in sizes:
        default_tile_size = sizes['default_tile_size']
        del sizes['default_tile_size']

    if 'default_threshold' in sizes:
        default_threshold = sizes['default_threshold']
        del sizes['default_threshold']

    default_group_size_set = default_group_size != None
    default_tile_size_set = default_tile_size != None
    default_sizes = apply_size_heuristics(self, size_heuristics,
                                          {'group_size': default_group_size,
                                           'tile_size': default_tile_size,
                                           'num_groups': default_num_groups,
                                           'lockstep_width': None,
                                           'threshold': default_threshold})
    default_group_size = default_sizes['group_size']
    default_num_groups = default_sizes['num_groups']
    default_threshold = default_sizes['threshold']
    default_tile_size = default_sizes['tile_size']
    lockstep_width = default_sizes['lockstep_width']

    if default_group_size > max_group_size:
        if default_group_size_set:
            sys.stderr.write('Note: Device limits group size to {} (down from {})\n'.
                             format(max_tile_size, default_group_size))
        default_group_size = max_group_size

    if default_tile_size > max_tile_size:
        if default_tile_size_set:
            sys.stderr.write('Note: Device limits tile size to {} (down from {})\n'.
                             format(max_tile_size, default_tile_size))
        default_tile_size = max_tile_size

    for (k,v) in user_sizes.items():
        if k in all_sizes:
            all_sizes[k]['value'] = v
        else:
            raise Exception('Unknown size: {}\nKnown sizes: {}'.format(k, ' '.join(all_sizes.keys())))

    self.sizes = {}
    for (k,v) in all_sizes.items():
        if v['class'] == 'group_size':
            max_value = max_group_size
            default_value = default_group_size
        elif v['class'] == 'num_groups':
            max_value = max_group_size # Intentional!
            default_value = default_num_groups
        elif v['class'] == 'tile_size':
            max_value = max_tile_size
            default_value = default_tile_size
        elif v['class'].startswith('threshold'):
            max_value = None
            default_value = default_threshold
        else:
            # Bespoke sizes have no limit or default.
            max_value = None
        if v['value'] == None:
            self.sizes[k] = default_value
        elif max_value != None and v['value'] > max_value:
            sys.stderr.write('Note: Device limits {} to {} (down from {}\n'.
                             format(k, max_value, v['value']))
            self.sizes[k] = max_value
        else:
            self.sizes[k] = v['value']

    # XXX: we perform only a subset of z-encoding here.  Really, the
    # compiler should provide us with the variables to which
    # parameters are mapped.
    if (len(program_src) >= 0):
        return cl.Program(self.ctx, program_src).build(
            ["-DLOCKSTEP_WIDTH={}".format(lockstep_width)]
            + ["-D{}={}".format(s.replace('z', 'zz').replace('.', 'zi').replace('#', 'zh'),v) for (s,v) in self.sizes.items()])

def opencl_alloc(self, min_size, tag):
    min_size = 1 if min_size == 0 else min_size
    assert min_size > 0
    return self.pool.allocate(min_size)

def opencl_free_all(self):
    self.pool.free_held()

def sync(self):
    failure = np.empty(1, dtype=np.int32)
    cl.enqueue_copy(self.queue, failure, self.global_failure, is_blocking=True)
    self.failure_is_an_option = np.int32(0)
    if failure[0] >= 0:
        # Reset failure information.
        cl.enqueue_fill_buffer(self.queue, self.global_failure, np.int32(-1), 0, np.int32().itemsize)

        # Read failure args.
        failure_args = np.empty(self.global_failure_args_max+1, dtype=np.int64)
        cl.enqueue_copy(self.queue, failure_args, self.global_failure_args, is_blocking=True)

        raise Exception(self.failure_msgs[failure[0]].format(*failure_args))
import pyopencl.array
import time
import argparse
sizes = {}
synchronous = False
preferred_platform = None
preferred_device = None
default_threshold = None
default_group_size = None
default_num_groups = None
default_tile_size = None
fut_opencl_src = """#ifdef cl_clang_storage_class_specifiers
#pragma OPENCL EXTENSION cl_clang_storage_class_specifiers : enable
#endif
#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable
__kernel void dummy_kernel(__global unsigned char *dummy, int n)
{
    const int thread_gid = get_global_id(0);
    
    if (thread_gid >= n)
        return;
}
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef uchar uint8_t;
typedef ushort uint16_t;
typedef uint uint32_t;
typedef ulong uint64_t;
#ifdef cl_nv_pragma_unroll
static inline void mem_fence_global()
{
    asm("membar.gl;");
}
#else
static inline void mem_fence_global()
{
    mem_fence(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);
}
#endif
static inline void mem_fence_local()
{
    mem_fence(CLK_LOCAL_MEM_FENCE);
}
static inline uint8_t add8(uint8_t x, uint8_t y)
{
    return x + y;
}
static inline uint16_t add16(uint16_t x, uint16_t y)
{
    return x + y;
}
static inline uint32_t add32(uint32_t x, uint32_t y)
{
    return x + y;
}
static inline uint64_t add64(uint64_t x, uint64_t y)
{
    return x + y;
}
static inline uint8_t sub8(uint8_t x, uint8_t y)
{
    return x - y;
}
static inline uint16_t sub16(uint16_t x, uint16_t y)
{
    return x - y;
}
static inline uint32_t sub32(uint32_t x, uint32_t y)
{
    return x - y;
}
static inline uint64_t sub64(uint64_t x, uint64_t y)
{
    return x - y;
}
static inline uint8_t mul8(uint8_t x, uint8_t y)
{
    return x * y;
}
static inline uint16_t mul16(uint16_t x, uint16_t y)
{
    return x * y;
}
static inline uint32_t mul32(uint32_t x, uint32_t y)
{
    return x * y;
}
static inline uint64_t mul64(uint64_t x, uint64_t y)
{
    return x * y;
}
static inline uint8_t udiv8(uint8_t x, uint8_t y)
{
    return x / y;
}
static inline uint16_t udiv16(uint16_t x, uint16_t y)
{
    return x / y;
}
static inline uint32_t udiv32(uint32_t x, uint32_t y)
{
    return x / y;
}
static inline uint64_t udiv64(uint64_t x, uint64_t y)
{
    return x / y;
}
static inline uint8_t udiv_up8(uint8_t x, uint8_t y)
{
    return (x + y - 1) / y;
}
static inline uint16_t udiv_up16(uint16_t x, uint16_t y)
{
    return (x + y - 1) / y;
}
static inline uint32_t udiv_up32(uint32_t x, uint32_t y)
{
    return (x + y - 1) / y;
}
static inline uint64_t udiv_up64(uint64_t x, uint64_t y)
{
    return (x + y - 1) / y;
}
static inline uint8_t umod8(uint8_t x, uint8_t y)
{
    return x % y;
}
static inline uint16_t umod16(uint16_t x, uint16_t y)
{
    return x % y;
}
static inline uint32_t umod32(uint32_t x, uint32_t y)
{
    return x % y;
}
static inline uint64_t umod64(uint64_t x, uint64_t y)
{
    return x % y;
}
static inline uint8_t udiv_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint16_t udiv_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint32_t udiv_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint64_t udiv_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline uint8_t udiv_up_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint16_t udiv_up_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint32_t udiv_up_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint64_t udiv_up_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : (x + y - 1) / y;
}
static inline uint8_t umod_safe8(uint8_t x, uint8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint16_t umod_safe16(uint16_t x, uint16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint32_t umod_safe32(uint32_t x, uint32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline uint64_t umod_safe64(uint64_t x, uint64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t sdiv8(int8_t x, int8_t y)
{
    int8_t q = x / y;
    int8_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int16_t sdiv16(int16_t x, int16_t y)
{
    int16_t q = x / y;
    int16_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int32_t sdiv32(int32_t x, int32_t y)
{
    int32_t q = x / y;
    int32_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int64_t sdiv64(int64_t x, int64_t y)
{
    int64_t q = x / y;
    int64_t r = x % y;
    
    return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}
static inline int8_t sdiv_up8(int8_t x, int8_t y)
{
    return sdiv8(x + y - 1, y);
}
static inline int16_t sdiv_up16(int16_t x, int16_t y)
{
    return sdiv16(x + y - 1, y);
}
static inline int32_t sdiv_up32(int32_t x, int32_t y)
{
    return sdiv32(x + y - 1, y);
}
static inline int64_t sdiv_up64(int64_t x, int64_t y)
{
    return sdiv64(x + y - 1, y);
}
static inline int8_t smod8(int8_t x, int8_t y)
{
    int8_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int16_t smod16(int16_t x, int16_t y)
{
    int16_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int32_t smod32(int32_t x, int32_t y)
{
    int32_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int64_t smod64(int64_t x, int64_t y)
{
    int64_t r = x % y;
    
    return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}
static inline int8_t sdiv_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : sdiv8(x, y);
}
static inline int16_t sdiv_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : sdiv16(x, y);
}
static inline int32_t sdiv_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : sdiv32(x, y);
}
static inline int64_t sdiv_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : sdiv64(x, y);
}
static inline int8_t sdiv_up_safe8(int8_t x, int8_t y)
{
    return sdiv_safe8(x + y - 1, y);
}
static inline int16_t sdiv_up_safe16(int16_t x, int16_t y)
{
    return sdiv_safe16(x + y - 1, y);
}
static inline int32_t sdiv_up_safe32(int32_t x, int32_t y)
{
    return sdiv_safe32(x + y - 1, y);
}
static inline int64_t sdiv_up_safe64(int64_t x, int64_t y)
{
    return sdiv_safe64(x + y - 1, y);
}
static inline int8_t smod_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : smod8(x, y);
}
static inline int16_t smod_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : smod16(x, y);
}
static inline int32_t smod_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : smod32(x, y);
}
static inline int64_t smod_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : smod64(x, y);
}
static inline int8_t squot8(int8_t x, int8_t y)
{
    return x / y;
}
static inline int16_t squot16(int16_t x, int16_t y)
{
    return x / y;
}
static inline int32_t squot32(int32_t x, int32_t y)
{
    return x / y;
}
static inline int64_t squot64(int64_t x, int64_t y)
{
    return x / y;
}
static inline int8_t srem8(int8_t x, int8_t y)
{
    return x % y;
}
static inline int16_t srem16(int16_t x, int16_t y)
{
    return x % y;
}
static inline int32_t srem32(int32_t x, int32_t y)
{
    return x % y;
}
static inline int64_t srem64(int64_t x, int64_t y)
{
    return x % y;
}
static inline int8_t squot_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int16_t squot_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int32_t squot_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int64_t squot_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x / y;
}
static inline int8_t srem_safe8(int8_t x, int8_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int16_t srem_safe16(int16_t x, int16_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int32_t srem_safe32(int32_t x, int32_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int64_t srem_safe64(int64_t x, int64_t y)
{
    return y == 0 ? 0 : x % y;
}
static inline int8_t smin8(int8_t x, int8_t y)
{
    return x < y ? x : y;
}
static inline int16_t smin16(int16_t x, int16_t y)
{
    return x < y ? x : y;
}
static inline int32_t smin32(int32_t x, int32_t y)
{
    return x < y ? x : y;
}
static inline int64_t smin64(int64_t x, int64_t y)
{
    return x < y ? x : y;
}
static inline uint8_t umin8(uint8_t x, uint8_t y)
{
    return x < y ? x : y;
}
static inline uint16_t umin16(uint16_t x, uint16_t y)
{
    return x < y ? x : y;
}
static inline uint32_t umin32(uint32_t x, uint32_t y)
{
    return x < y ? x : y;
}
static inline uint64_t umin64(uint64_t x, uint64_t y)
{
    return x < y ? x : y;
}
static inline int8_t smax8(int8_t x, int8_t y)
{
    return x < y ? y : x;
}
static inline int16_t smax16(int16_t x, int16_t y)
{
    return x < y ? y : x;
}
static inline int32_t smax32(int32_t x, int32_t y)
{
    return x < y ? y : x;
}
static inline int64_t smax64(int64_t x, int64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t umax8(uint8_t x, uint8_t y)
{
    return x < y ? y : x;
}
static inline uint16_t umax16(uint16_t x, uint16_t y)
{
    return x < y ? y : x;
}
static inline uint32_t umax32(uint32_t x, uint32_t y)
{
    return x < y ? y : x;
}
static inline uint64_t umax64(uint64_t x, uint64_t y)
{
    return x < y ? y : x;
}
static inline uint8_t shl8(uint8_t x, uint8_t y)
{
    return x << y;
}
static inline uint16_t shl16(uint16_t x, uint16_t y)
{
    return x << y;
}
static inline uint32_t shl32(uint32_t x, uint32_t y)
{
    return x << y;
}
static inline uint64_t shl64(uint64_t x, uint64_t y)
{
    return x << y;
}
static inline uint8_t lshr8(uint8_t x, uint8_t y)
{
    return x >> y;
}
static inline uint16_t lshr16(uint16_t x, uint16_t y)
{
    return x >> y;
}
static inline uint32_t lshr32(uint32_t x, uint32_t y)
{
    return x >> y;
}
static inline uint64_t lshr64(uint64_t x, uint64_t y)
{
    return x >> y;
}
static inline int8_t ashr8(int8_t x, int8_t y)
{
    return x >> y;
}
static inline int16_t ashr16(int16_t x, int16_t y)
{
    return x >> y;
}
static inline int32_t ashr32(int32_t x, int32_t y)
{
    return x >> y;
}
static inline int64_t ashr64(int64_t x, int64_t y)
{
    return x >> y;
}
static inline uint8_t and8(uint8_t x, uint8_t y)
{
    return x & y;
}
static inline uint16_t and16(uint16_t x, uint16_t y)
{
    return x & y;
}
static inline uint32_t and32(uint32_t x, uint32_t y)
{
    return x & y;
}
static inline uint64_t and64(uint64_t x, uint64_t y)
{
    return x & y;
}
static inline uint8_t or8(uint8_t x, uint8_t y)
{
    return x | y;
}
static inline uint16_t or16(uint16_t x, uint16_t y)
{
    return x | y;
}
static inline uint32_t or32(uint32_t x, uint32_t y)
{
    return x | y;
}
static inline uint64_t or64(uint64_t x, uint64_t y)
{
    return x | y;
}
static inline uint8_t xor8(uint8_t x, uint8_t y)
{
    return x ^ y;
}
static inline uint16_t xor16(uint16_t x, uint16_t y)
{
    return x ^ y;
}
static inline uint32_t xor32(uint32_t x, uint32_t y)
{
    return x ^ y;
}
static inline uint64_t xor64(uint64_t x, uint64_t y)
{
    return x ^ y;
}
static inline bool ult8(uint8_t x, uint8_t y)
{
    return x < y;
}
static inline bool ult16(uint16_t x, uint16_t y)
{
    return x < y;
}
static inline bool ult32(uint32_t x, uint32_t y)
{
    return x < y;
}
static inline bool ult64(uint64_t x, uint64_t y)
{
    return x < y;
}
static inline bool ule8(uint8_t x, uint8_t y)
{
    return x <= y;
}
static inline bool ule16(uint16_t x, uint16_t y)
{
    return x <= y;
}
static inline bool ule32(uint32_t x, uint32_t y)
{
    return x <= y;
}
static inline bool ule64(uint64_t x, uint64_t y)
{
    return x <= y;
}
static inline bool slt8(int8_t x, int8_t y)
{
    return x < y;
}
static inline bool slt16(int16_t x, int16_t y)
{
    return x < y;
}
static inline bool slt32(int32_t x, int32_t y)
{
    return x < y;
}
static inline bool slt64(int64_t x, int64_t y)
{
    return x < y;
}
static inline bool sle8(int8_t x, int8_t y)
{
    return x <= y;
}
static inline bool sle16(int16_t x, int16_t y)
{
    return x <= y;
}
static inline bool sle32(int32_t x, int32_t y)
{
    return x <= y;
}
static inline bool sle64(int64_t x, int64_t y)
{
    return x <= y;
}
static inline int8_t pow8(int8_t x, int8_t y)
{
    int8_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int16_t pow16(int16_t x, int16_t y)
{
    int16_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int32_t pow32(int32_t x, int32_t y)
{
    int32_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline int64_t pow64(int64_t x, int64_t y)
{
    int64_t res = 1, rem = y;
    
    while (rem != 0) {
        if (rem & 1)
            res *= x;
        rem >>= 1;
        x *= x;
    }
    return res;
}
static inline bool itob_i8_bool(int8_t x)
{
    return x;
}
static inline bool itob_i16_bool(int16_t x)
{
    return x;
}
static inline bool itob_i32_bool(int32_t x)
{
    return x;
}
static inline bool itob_i64_bool(int64_t x)
{
    return x;
}
static inline int8_t btoi_bool_i8(bool x)
{
    return x;
}
static inline int16_t btoi_bool_i16(bool x)
{
    return x;
}
static inline int32_t btoi_bool_i32(bool x)
{
    return x;
}
static inline int64_t btoi_bool_i64(bool x)
{
    return x;
}
#define sext_i8_i8(x) ((int8_t) (int8_t) x)
#define sext_i8_i16(x) ((int16_t) (int8_t) x)
#define sext_i8_i32(x) ((int32_t) (int8_t) x)
#define sext_i8_i64(x) ((int64_t) (int8_t) x)
#define sext_i16_i8(x) ((int8_t) (int16_t) x)
#define sext_i16_i16(x) ((int16_t) (int16_t) x)
#define sext_i16_i32(x) ((int32_t) (int16_t) x)
#define sext_i16_i64(x) ((int64_t) (int16_t) x)
#define sext_i32_i8(x) ((int8_t) (int32_t) x)
#define sext_i32_i16(x) ((int16_t) (int32_t) x)
#define sext_i32_i32(x) ((int32_t) (int32_t) x)
#define sext_i32_i64(x) ((int64_t) (int32_t) x)
#define sext_i64_i8(x) ((int8_t) (int64_t) x)
#define sext_i64_i16(x) ((int16_t) (int64_t) x)
#define sext_i64_i32(x) ((int32_t) (int64_t) x)
#define sext_i64_i64(x) ((int64_t) (int64_t) x)
#define zext_i8_i8(x) ((int8_t) (uint8_t) x)
#define zext_i8_i16(x) ((int16_t) (uint8_t) x)
#define zext_i8_i32(x) ((int32_t) (uint8_t) x)
#define zext_i8_i64(x) ((int64_t) (uint8_t) x)
#define zext_i16_i8(x) ((int8_t) (uint16_t) x)
#define zext_i16_i16(x) ((int16_t) (uint16_t) x)
#define zext_i16_i32(x) ((int32_t) (uint16_t) x)
#define zext_i16_i64(x) ((int64_t) (uint16_t) x)
#define zext_i32_i8(x) ((int8_t) (uint32_t) x)
#define zext_i32_i16(x) ((int16_t) (uint32_t) x)
#define zext_i32_i32(x) ((int32_t) (uint32_t) x)
#define zext_i32_i64(x) ((int64_t) (uint32_t) x)
#define zext_i64_i8(x) ((int8_t) (uint64_t) x)
#define zext_i64_i16(x) ((int16_t) (uint64_t) x)
#define zext_i64_i32(x) ((int32_t) (uint64_t) x)
#define zext_i64_i64(x) ((int64_t) (uint64_t) x)
#if defined(__OPENCL_VERSION__)
static int32_t futrts_popc8(int8_t x)
{
    return popcount(x);
}
static int32_t futrts_popc16(int16_t x)
{
    return popcount(x);
}
static int32_t futrts_popc32(int32_t x)
{
    return popcount(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return popcount(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_popc8(int8_t x)
{
    return __popc(zext_i8_i32(x));
}
static int32_t futrts_popc16(int16_t x)
{
    return __popc(zext_i16_i32(x));
}
static int32_t futrts_popc32(int32_t x)
{
    return __popc(x);
}
static int32_t futrts_popc64(int64_t x)
{
    return __popcll(x);
}
#else
static int32_t futrts_popc8(int8_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc16(int16_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc32(int32_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
static int32_t futrts_popc64(int64_t x)
{
    int c = 0;
    
    for (; x; ++c)
        x &= x - 1;
    return c;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    return mul_hi(a, b);
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    return mul_hi(a, b);
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mul_hi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul_hi(a, b);
}
#elif defined(__CUDA_ARCH__)
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    return mulhi(a, b);
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    return mul64hi(a, b);
}
#else
static uint8_t futrts_mul_hi8(uint8_t a, uint8_t b)
{
    uint16_t aa = a;
    uint16_t bb = b;
    
    return aa * bb >> 8;
}
static uint16_t futrts_mul_hi16(uint16_t a, uint16_t b)
{
    uint32_t aa = a;
    uint32_t bb = b;
    
    return aa * bb >> 16;
}
static uint32_t futrts_mul_hi32(uint32_t a, uint32_t b)
{
    uint64_t aa = a;
    uint64_t bb = b;
    
    return aa * bb >> 32;
}
static uint64_t futrts_mul_hi64(uint64_t a, uint64_t b)
{
    __uint128_t aa = a;
    __uint128_t bb = b;
    
    return aa * bb >> 64;
}
#endif
#if defined(__OPENCL_VERSION__)
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return mad_hi(a, b, c);
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return mad_hi(a, b, c);
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return mad_hi(a, b, c);
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return mad_hi(a, b, c);
}
#else
static uint8_t futrts_mad_hi8(uint8_t a, uint8_t b, uint8_t c)
{
    return futrts_mul_hi8(a, b) + c;
}
static uint16_t futrts_mad_hi16(uint16_t a, uint16_t b, uint16_t c)
{
    return futrts_mul_hi16(a, b) + c;
}
static uint32_t futrts_mad_hi32(uint32_t a, uint32_t b, uint32_t c)
{
    return futrts_mul_hi32(a, b) + c;
}
static uint64_t futrts_mad_hi64(uint64_t a, uint64_t b, uint64_t c)
{
    return futrts_mul_hi64(a, b) + c;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_clzz8(int8_t x)
{
    return clz(x);
}
static int32_t futrts_clzz16(int16_t x)
{
    return clz(x);
}
static int32_t futrts_clzz32(int32_t x)
{
    return clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return clz(x);
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_clzz8(int8_t x)
{
    return __clz(zext_i8_i32(x)) - 24;
}
static int32_t futrts_clzz16(int16_t x)
{
    return __clz(zext_i16_i32(x)) - 16;
}
static int32_t futrts_clzz32(int32_t x)
{
    return __clz(x);
}
static int32_t futrts_clzz64(int64_t x)
{
    return __clzll(x);
}
#else
static int32_t futrts_clzz8(int8_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz16(int16_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz32(int32_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
static int32_t futrts_clzz64(int64_t x)
{
    int n = 0;
    int bits = sizeof(x) * 8;
    
    for (int i = 0; i < bits; i++) {
        if (x < 0)
            break;
        n++;
        x <<= 1;
    }
    return n;
}
#endif
#if defined(__OPENCL_VERSION__)
static int32_t futrts_ctzz8(int8_t x)
{
    int i = 0;
    
    for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int i = 0;
    
    for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int i = 0;
    
    for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int i = 0;
    
    for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
        ;
    return i;
}
#elif defined(__CUDA_ARCH__)
static int32_t futrts_ctzz8(int8_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 8 : y - 1;
}
static int32_t futrts_ctzz16(int16_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 16 : y - 1;
}
static int32_t futrts_ctzz32(int32_t x)
{
    int y = __ffs(x);
    
    return y == 0 ? 32 : y - 1;
}
static int32_t futrts_ctzz64(int64_t x)
{
    int y = __ffsll(x);
    
    return y == 0 ? 64 : y - 1;
}
#else
static int32_t futrts_ctzz8(int8_t x)
{
    return x == 0 ? 8 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz16(int16_t x)
{
    return x == 0 ? 16 : __builtin_ctz((uint32_t) x);
}
static int32_t futrts_ctzz32(int32_t x)
{
    return x == 0 ? 32 : __builtin_ctz(x);
}
static int32_t futrts_ctzz64(int64_t x)
{
    return x == 0 ? 64 : __builtin_ctzl(x);
}
#endif
static inline float fdiv32(float x, float y)
{
    return x / y;
}
static inline float fadd32(float x, float y)
{
    return x + y;
}
static inline float fsub32(float x, float y)
{
    return x - y;
}
static inline float fmul32(float x, float y)
{
    return x * y;
}
static inline float fmin32(float x, float y)
{
    return fmin(x, y);
}
static inline float fmax32(float x, float y)
{
    return fmax(x, y);
}
static inline float fpow32(float x, float y)
{
    return pow(x, y);
}
static inline bool cmplt32(float x, float y)
{
    return x < y;
}
static inline bool cmple32(float x, float y)
{
    return x <= y;
}
static inline float sitofp_i8_f32(int8_t x)
{
    return (float) x;
}
static inline float sitofp_i16_f32(int16_t x)
{
    return (float) x;
}
static inline float sitofp_i32_f32(int32_t x)
{
    return (float) x;
}
static inline float sitofp_i64_f32(int64_t x)
{
    return (float) x;
}
static inline float uitofp_i8_f32(uint8_t x)
{
    return (float) x;
}
static inline float uitofp_i16_f32(uint16_t x)
{
    return (float) x;
}
static inline float uitofp_i32_f32(uint32_t x)
{
    return (float) x;
}
static inline float uitofp_i64_f32(uint64_t x)
{
    return (float) x;
}
static inline int8_t fptosi_f32_i8(float x)
{
    return (int8_t) x;
}
static inline int16_t fptosi_f32_i16(float x)
{
    return (int16_t) x;
}
static inline int32_t fptosi_f32_i32(float x)
{
    return (int32_t) x;
}
static inline int64_t fptosi_f32_i64(float x)
{
    return (int64_t) x;
}
static inline uint8_t fptoui_f32_i8(float x)
{
    return (uint8_t) x;
}
static inline uint16_t fptoui_f32_i16(float x)
{
    return (uint16_t) x;
}
static inline uint32_t fptoui_f32_i32(float x)
{
    return (uint32_t) x;
}
static inline uint64_t fptoui_f32_i64(float x)
{
    return (uint64_t) x;
}
static inline float futrts_log32(float x)
{
    return log(x);
}
static inline float futrts_log2_32(float x)
{
    return log2(x);
}
static inline float futrts_log10_32(float x)
{
    return log10(x);
}
static inline float futrts_sqrt32(float x)
{
    return sqrt(x);
}
static inline float futrts_exp32(float x)
{
    return exp(x);
}
static inline float futrts_cos32(float x)
{
    return cos(x);
}
static inline float futrts_sin32(float x)
{
    return sin(x);
}
static inline float futrts_tan32(float x)
{
    return tan(x);
}
static inline float futrts_acos32(float x)
{
    return acos(x);
}
static inline float futrts_asin32(float x)
{
    return asin(x);
}
static inline float futrts_atan32(float x)
{
    return atan(x);
}
static inline float futrts_cosh32(float x)
{
    return cosh(x);
}
static inline float futrts_sinh32(float x)
{
    return sinh(x);
}
static inline float futrts_tanh32(float x)
{
    return tanh(x);
}
static inline float futrts_acosh32(float x)
{
    return acosh(x);
}
static inline float futrts_asinh32(float x)
{
    return asinh(x);
}
static inline float futrts_atanh32(float x)
{
    return atanh(x);
}
static inline float futrts_atan2_32(float x, float y)
{
    return atan2(x, y);
}
static inline float futrts_gamma32(float x)
{
    return tgamma(x);
}
static inline float futrts_lgamma32(float x)
{
    return lgamma(x);
}
static inline bool futrts_isnan32(float x)
{
    return isnan(x);
}
static inline bool futrts_isinf32(float x)
{
    return isinf(x);
}
static inline int32_t futrts_to_bits32(float x)
{
    union {
        float f;
        int32_t t;
    } p;
    
    p.f = x;
    return p.t;
}
static inline float futrts_from_bits32(int32_t x)
{
    union {
        int32_t f;
        float t;
    } p;
    
    p.f = x;
    return p.t;
}
#ifdef __OPENCL_VERSION__
static inline float fmod32(float x, float y)
{
    return fmod(x, y);
}
static inline float futrts_round32(float x)
{
    return rint(x);
}
static inline float futrts_floor32(float x)
{
    return floor(x);
}
static inline float futrts_ceil32(float x)
{
    return ceil(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return mix(v0, v1, t);
}
static inline float futrts_mad32(float a, float b, float c)
{
    return mad(a, b, c);
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fma(a, b, c);
}
#else
static inline float fmod32(float x, float y)
{
    return fmodf(x, y);
}
static inline float futrts_round32(float x)
{
    return rintf(x);
}
static inline float futrts_floor32(float x)
{
    return floorf(x);
}
static inline float futrts_ceil32(float x)
{
    return ceilf(x);
}
static inline float futrts_lerp32(float v0, float v1, float t)
{
    return v0 + (v1 - v0) * t;
}
static inline float futrts_mad32(float a, float b, float c)
{
    return a * b + c;
}
static inline float futrts_fma32(float a, float b, float c)
{
    return fmaf(a, b, c);
}
#endif
// Start of atomics.h

inline int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline int32_t atomic_add_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

inline float atomic_fadd_f32_global(volatile __global float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline float atomic_fadd_f32_local(volatile __local float *p, float x) {
#ifdef FUTHARK_CUDA
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

inline int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smax_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_smin_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umax_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

inline uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline uint32_t atomic_umin_i32_local(volatile __local uint32_t *p, uint32_t x) {
#ifdef FUTHARK_CUDA
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

inline int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_and_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

inline int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_or_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

inline int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xor_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_xchg_i32_local(volatile __local int32_t *p, int32_t x) {
#ifdef FUTHARK_CUDA
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

inline int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

inline int32_t atomic_cmpxchg_i32_local(volatile __local int32_t *p,
                                         int32_t cmp, int32_t val) {
#ifdef FUTHARK_CUDA
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

// End of atomics.h




__kernel void builtinzhreplicate_f32zireplicate_31206(__global
                                                      unsigned char *mem_31202,
                                                      int32_t num_elems_31203,
                                                      float val_31204)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_31206;
    int32_t replicate_ltid_31207;
    int32_t replicate_gid_31208;
    
    replicate_gtid_31206 = get_global_id(0);
    replicate_ltid_31207 = get_local_id(0);
    replicate_gid_31208 = get_group_id(0);
    if (slt64(replicate_gtid_31206, num_elems_31203)) {
        ((__global float *) mem_31202)[sext_i32_i64(replicate_gtid_31206)] =
            val_31204;
    }
    
  error_0:
    return;
}
__kernel void builtinzhreplicate_i32zireplicate_31215(__global
                                                      unsigned char *mem_31211,
                                                      int32_t num_elems_31212,
                                                      int32_t val_31213)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t replicate_gtid_31215;
    int32_t replicate_ltid_31216;
    int32_t replicate_gid_31217;
    
    replicate_gtid_31215 = get_global_id(0);
    replicate_ltid_31216 = get_local_id(0);
    replicate_gid_31217 = get_group_id(0);
    if (slt64(replicate_gtid_31215, num_elems_31212)) {
        ((__global int32_t *) mem_31211)[sext_i32_i64(replicate_gtid_31215)] =
            val_31213;
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32(__local volatile
                                    int64_t *block_9_backing_aligned_0,
                                    int32_t destoffset_1, int32_t srcoffset_3,
                                    int32_t num_arrays_4, int32_t x_elems_5,
                                    int32_t y_elems_6, int32_t mulx_7,
                                    int32_t muly_8, __global
                                    unsigned char *destmem_0, __global
                                    unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_global_id_0_37;
    int32_t y_index_32 = get_group_id_1_41 * 32 + get_local_id_1_39;
    
    if (slt32(x_index_31, x_elems_5)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_in_35 = (y_index_32 + j_43 * 8) * x_elems_5 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, y_elems_6)) {
                ((__local float *) block_9)[sext_i32_i64((get_local_id_1_39 +
                                                          j_43 * 8) * 33 +
                                            get_local_id_0_38)] = ((__global
                                                                    float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                                       index_in_35)];
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 32 + get_local_id_0_38;
    y_index_32 = get_group_id_0_40 * 32 + get_local_id_1_39;
    if (slt32(x_index_31, y_elems_6)) {
        for (int32_t j_43 = 0; j_43 < 4; j_43++) {
            int32_t index_out_36 = (y_index_32 + j_43 * 8) * y_elems_6 +
                    x_index_31;
            
            if (slt32(y_index_32 + j_43 * 8, x_elems_5)) {
                ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                               index_out_36)] = ((__local
                                                                  float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                                    33 +
                                                                                    get_local_id_1_39 +
                                                                                    j_43 *
                                                                                    8)];
            }
        }
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_height(__local volatile
                                               int64_t *block_9_backing_aligned_0,
                                               int32_t destoffset_1,
                                               int32_t srcoffset_3,
                                               int32_t num_arrays_4,
                                               int32_t x_elems_5,
                                               int32_t y_elems_6,
                                               int32_t mulx_7, int32_t muly_8,
                                               __global
                                               unsigned char *destmem_0,
                                               __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_0_38 +
            srem32(get_local_id_1_39, mulx_7) * 16;
    int32_t y_index_32 = get_group_id_1_41 * 16 + squot32(get_local_id_1_39,
                                                          mulx_7);
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 + squot32(get_local_id_0_38, mulx_7);
    y_index_32 = get_group_id_0_40 * 16 * mulx_7 + get_local_id_1_39 +
        srem32(get_local_id_0_38, mulx_7) * 16;
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_low_width(__local volatile
                                              int64_t *block_9_backing_aligned_0,
                                              int32_t destoffset_1,
                                              int32_t srcoffset_3,
                                              int32_t num_arrays_4,
                                              int32_t x_elems_5,
                                              int32_t y_elems_6, int32_t mulx_7,
                                              int32_t muly_8, __global
                                              unsigned char *destmem_0, __global
                                              unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = get_group_id_2_42 * x_elems_5 * y_elems_6;
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t x_index_31 = get_group_id_0_40 * 16 + squot32(get_local_id_0_38,
                                                          muly_8);
    int32_t y_index_32 = get_group_id_1_41 * 16 * muly_8 + get_local_id_1_39 +
            srem32(get_local_id_0_38, muly_8) * 16;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    
    if (slt32(x_index_31, x_elems_5) && slt32(y_index_32, y_elems_6)) {
        ((__local float *) block_9)[sext_i32_i64(get_local_id_1_39 * 17 +
                                    get_local_id_0_38)] = ((__global
                                                            float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                               index_in_35)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    x_index_31 = get_group_id_1_41 * 16 * muly_8 + get_local_id_0_38 +
        srem32(get_local_id_1_39, muly_8) * 16;
    y_index_32 = get_group_id_0_40 * 16 + squot32(get_local_id_1_39, muly_8);
    
    int32_t index_out_36 = y_index_32 * y_elems_6 + x_index_31;
    
    if (slt32(x_index_31, y_elems_6) && slt32(y_index_32, x_elems_5)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__local
                                                          float *) block_9)[sext_i32_i64(get_local_id_0_38 *
                                                                            17 +
                                                                            get_local_id_1_39)];
    }
    
  error_0:
    return;
}
__kernel void gpu_map_transpose_f32_small(__local volatile
                                          int64_t *block_9_backing_aligned_0,
                                          int32_t destoffset_1,
                                          int32_t srcoffset_3,
                                          int32_t num_arrays_4,
                                          int32_t x_elems_5, int32_t y_elems_6,
                                          int32_t mulx_7, int32_t muly_8,
                                          __global unsigned char *destmem_0,
                                          __global unsigned char *srcmem_2)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict block_9_backing_0 = (__local volatile
                                                         char *) block_9_backing_aligned_0;
    __local char *block_9;
    
    block_9 = (__local char *) block_9_backing_0;
    
    int32_t get_global_id_0_37;
    
    get_global_id_0_37 = get_global_id(0);
    
    int32_t get_local_id_0_38;
    
    get_local_id_0_38 = get_local_id(0);
    
    int32_t get_local_id_1_39;
    
    get_local_id_1_39 = get_local_id(1);
    
    int32_t get_group_id_0_40;
    
    get_group_id_0_40 = get_group_id(0);
    
    int32_t get_group_id_1_41;
    
    get_group_id_1_41 = get_group_id(1);
    
    int32_t get_group_id_2_42;
    
    get_group_id_2_42 = get_group_id(2);
    
    int32_t our_array_offset_30 = squot32(get_global_id_0_37, y_elems_6 *
                                          x_elems_5) * (y_elems_6 * x_elems_5);
    int32_t x_index_31 = squot32(srem32(get_global_id_0_37, y_elems_6 *
                                        x_elems_5), y_elems_6);
    int32_t y_index_32 = srem32(get_global_id_0_37, y_elems_6);
    int32_t odata_offset_33 = squot32(destoffset_1, 4) + our_array_offset_30;
    int32_t idata_offset_34 = squot32(srcoffset_3, 4) + our_array_offset_30;
    int32_t index_in_35 = y_index_32 * x_elems_5 + x_index_31;
    int32_t index_out_36 = x_index_31 * y_elems_6 + y_index_32;
    
    if (slt32(get_global_id_0_37, x_elems_5 * y_elems_6 * num_arrays_4)) {
        ((__global float *) destmem_0)[sext_i32_i64(odata_offset_33 +
                                       index_out_36)] = ((__global
                                                          float *) srcmem_2)[sext_i32_i64(idata_offset_34 +
                                                                             index_in_35)];
    }
    
  error_0:
    return;
}
__kernel void mainzicopy_30910(int64_t m_20968, int64_t nm_21119,
                               int64_t ctx_param_ext_30118,
                               int64_t ctx_param_ext_30119,
                               int64_t ctx_param_ext_30121, __global
                               unsigned char *mem_param_30123, __global
                               unsigned char *mem_30128)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_30910;
    int32_t copy_ltid_30911;
    int32_t copy_gid_30912;
    
    copy_gtid_30910 = get_global_id(0);
    copy_ltid_30911 = get_local_id(0);
    copy_gid_30912 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_30910), m_20968 * nm_21119)) {
        ((__global float *) mem_30128)[(sext_i32_i64(copy_gtid_30910) -
                                        squot64(sext_i32_i64(copy_gtid_30910),
                                                nm_21119) * nm_21119) *
                                       m_20968 +
                                       squot64(sext_i32_i64(copy_gtid_30910),
                                               nm_21119)] = ((__global
                                                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_30910),
                                                                                                 nm_21119) *
                                                                                         ctx_param_ext_30119 +
                                                                                         (sext_i32_i64(copy_gtid_30910) -
                                                                                          squot64(sext_i32_i64(copy_gtid_30910),
                                                                                                  nm_21119) *
                                                                                          nm_21119) *
                                                                                         ctx_param_ext_30121)];
    }
    
  error_0:
    return;
}
__kernel void mainziscan_stage1_27524(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_31245_backing_aligned_0,
                                      int64_t N_20967, int64_t m_20968,
                                      int64_t N_20969, __global
                                      unsigned char *images_mem_29973, __global
                                      unsigned char *res_mem_30394, __global
                                      unsigned char *mem_30423, __global
                                      unsigned char *mem_30426,
                                      int32_t num_threads_31239)
{
    #define segscan_group_sizze_27541 (mainzisegscan_group_sizze_27518)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31245_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31245_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31240;
    int32_t local_tid_31241;
    int64_t group_sizze_31244;
    int32_t wave_sizze_31243;
    int32_t group_tid_31242;
    
    global_tid_31240 = get_global_id(0);
    local_tid_31241 = get_local_id(0);
    group_sizze_31244 = get_local_size(0);
    wave_sizze_31243 = LOCKSTEP_WIDTH;
    group_tid_31242 = get_group_id(0);
    
    int32_t phys_tid_27524;
    
    phys_tid_27524 = global_tid_31240;
    
    __local char *scan_arr_mem_31245;
    
    scan_arr_mem_31245 = (__local char *) scan_arr_mem_31245_backing_0;
    
    int64_t x_27546;
    int64_t x_27547;
    
    x_27546 = 0;
    for (int64_t j_31247 = 0; j_31247 < sdiv_up64(m_20968 * N_20967,
                                                  sext_i32_i64(num_threads_31239));
         j_31247++) {
        int64_t chunk_offset_31248 = segscan_group_sizze_27541 * j_31247 +
                sext_i32_i64(group_tid_31242) * (segscan_group_sizze_27541 *
                                                 sdiv_up64(m_20968 * N_20967,
                                                           sext_i32_i64(num_threads_31239)));
        int64_t flat_idx_31249 = chunk_offset_31248 +
                sext_i32_i64(local_tid_31241);
        int64_t gtid_27515 = squot64(flat_idx_31249, N_20967);
        int64_t gtid_27523 = flat_idx_31249 - squot64(flat_idx_31249, N_20967) *
                N_20967;
        
        // threads in bounds read input
        {
            if (slt64(gtid_27515, m_20968) && slt64(gtid_27523, N_20967)) {
                float x_27551 = ((__global
                                  float *) images_mem_29973)[gtid_27515 *
                                                             N_20969 +
                                                             gtid_27523];
                bool res_27553;
                
                res_27553 = futrts_isnan32(x_27551);
                
                bool cond_27554 = !res_27553;
                float res_27555;
                
                if (cond_27554) {
                    float x_27552 = ((__global
                                      float *) res_mem_30394)[gtid_27515 *
                                                              N_20967 +
                                                              gtid_27523];
                    float res_27556 = x_27551 - x_27552;
                    
                    res_27555 = res_27556;
                } else {
                    res_27555 = NAN;
                }
                
                bool res_27557;
                
                res_27557 = futrts_isnan32(res_27555);
                
                bool res_27558 = !res_27557;
                int64_t res_27559 = btoi_bool_i64(res_27558);
                
                // write to-scan values to parameters
                {
                    x_27547 = res_27559;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_30426)[gtid_27515 * N_20967 +
                                                   gtid_27523] = res_27555;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_27515, m_20968) && slt64(gtid_27523,
                                                          N_20967))) {
                    x_27547 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_27548 = add64(x_27546, x_27547);
                
                ((__local
                  int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)] =
                    res_27548;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_31250;
            int64_t x_31251;
            int64_t x_31253;
            int64_t x_31254;
            bool ltid_in_bounds_31256;
            
            ltid_in_bounds_31256 = slt64(sext_i32_i64(local_tid_31241),
                                         segscan_group_sizze_27541);
            
            int32_t skip_threads_31257;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_31256) {
                    x_31251 = ((volatile __local
                                int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)];
                    if ((local_tid_31241 - squot32(local_tid_31241, 32) * 32) ==
                        0) {
                        x_31250 = x_31251;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31257 = 1;
                while (slt32(skip_threads_31257, 32)) {
                    if (sle32(skip_threads_31257, local_tid_31241 -
                              squot32(local_tid_31241, 32) * 32) &&
                        ltid_in_bounds_31256) {
                        // read operands
                        {
                            x_31250 = ((volatile __local
                                        int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241) -
                                                                       sext_i32_i64(skip_threads_31257)];
                        }
                        // perform operation
                        {
                            bool inactive_31258 =
                                 slt64(srem64(sext_i32_i64(local_tid_31241) +
                                              chunk_offset_31248, N_20967),
                                       sext_i32_i64(local_tid_31241) +
                                       chunk_offset_31248 -
                                       (sext_i32_i64(local_tid_31241 -
                                        skip_threads_31257) +
                                        chunk_offset_31248));
                            
                            if (inactive_31258) {
                                x_31250 = x_31251;
                            }
                            if (!inactive_31258) {
                                int64_t res_31252 = add64(x_31250, x_31251);
                                
                                x_31250 = res_31252;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31243, skip_threads_31257)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_31257, local_tid_31241 -
                              squot32(local_tid_31241, 32) * 32) &&
                        ltid_in_bounds_31256) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)] =
                                x_31250;
                            x_31251 = x_31250;
                        }
                    }
                    if (sle32(wave_sizze_31243, skip_threads_31257)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31257 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_31241 - squot32(local_tid_31241, 32) * 32) ==
                    31 && ltid_in_bounds_31256) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_31245)[sext_i32_i64(squot32(local_tid_31241,
                                                                          32))] =
                        x_31250;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_31259;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_31241, 32) == 0 &&
                        ltid_in_bounds_31256) {
                        x_31254 = ((volatile __local
                                    int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)];
                        if ((local_tid_31241 - squot32(local_tid_31241, 32) *
                             32) == 0) {
                            x_31253 = x_31254;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31259 = 1;
                    while (slt32(skip_threads_31259, 32)) {
                        if (sle32(skip_threads_31259, local_tid_31241 -
                                  squot32(local_tid_31241, 32) * 32) &&
                            (squot32(local_tid_31241, 32) == 0 &&
                             ltid_in_bounds_31256)) {
                            // read operands
                            {
                                x_31253 = ((volatile __local
                                            int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241) -
                                                                           sext_i32_i64(skip_threads_31259)];
                            }
                            // perform operation
                            {
                                bool inactive_31260 =
                                     slt64(srem64(sext_i32_i64(local_tid_31241 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_31248, N_20967),
                                           sext_i32_i64(local_tid_31241 * 32 +
                                           32 - 1) + chunk_offset_31248 -
                                           (sext_i32_i64((local_tid_31241 -
                                                          skip_threads_31259) *
                                            32 + 32 - 1) + chunk_offset_31248));
                                
                                if (inactive_31260) {
                                    x_31253 = x_31254;
                                }
                                if (!inactive_31260) {
                                    int64_t res_31255 = add64(x_31253, x_31254);
                                    
                                    x_31253 = res_31255;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31243, skip_threads_31259)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31259, local_tid_31241 -
                                  squot32(local_tid_31241, 32) * 32) &&
                            (squot32(local_tid_31241, 32) == 0 &&
                             ltid_in_bounds_31256)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)] =
                                    x_31253;
                                x_31254 = x_31253;
                            }
                        }
                        if (sle32(wave_sizze_31243, skip_threads_31259)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31259 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_31241, 32) == 0 ||
                      !ltid_in_bounds_31256)) {
                    // read operands
                    {
                        x_31251 = x_31250;
                        x_31250 = ((__local
                                    int64_t *) scan_arr_mem_31245)[sext_i32_i64(squot32(local_tid_31241,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_31261 =
                             slt64(srem64(sext_i32_i64(local_tid_31241) +
                                          chunk_offset_31248, N_20967),
                                   sext_i32_i64(local_tid_31241) +
                                   chunk_offset_31248 -
                                   (sext_i32_i64(squot32(local_tid_31241, 32) *
                                    32 - 1) + chunk_offset_31248));
                        
                        if (inactive_31261) {
                            x_31250 = x_31251;
                        }
                        if (!inactive_31261) {
                            int64_t res_31252 = add64(x_31250, x_31251);
                            
                            x_31250 = res_31252;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)] =
                            x_31250;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_31241, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)] =
                        x_31251;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_27515, m_20968) && slt64(gtid_27523, N_20967)) {
                    ((__global int64_t *) mem_30423)[gtid_27515 * N_20967 +
                                                     gtid_27523] = ((__local
                                                                     int64_t *) scan_arr_mem_31245)[sext_i32_i64(local_tid_31241)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_31262 = slt64(srem64(chunk_offset_31248 +
                                                          segscan_group_sizze_27541,
                                                          N_20967),
                                                   chunk_offset_31248 +
                                                   segscan_group_sizze_27541 -
                                                   (chunk_offset_31248 +
                                                    segscan_group_sizze_27541 -
                                                    1));
                bool should_load_carry_31263 = local_tid_31241 == 0 &&
                     !crosses_segment_31262;
                
                if (should_load_carry_31263) {
                    x_27546 = ((__local
                                int64_t *) scan_arr_mem_31245)[segscan_group_sizze_27541 -
                                                               1];
                }
                if (!should_load_carry_31263) {
                    x_27546 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_27541
}
__kernel void mainziscan_stage1_28495(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_31612_backing_aligned_0,
                                      int64_t N_20967, int64_t m_20968,
                                      int64_t iota32_arg_21351, __global
                                      unsigned char *res_mem_30432, __global
                                      unsigned char *res_mem_30511, __global
                                      unsigned char *res_mem_30512, __global
                                      unsigned char *res_mem_30562, __global
                                      unsigned char *mem_30581, __global
                                      unsigned char *mem_30585,
                                      int32_t num_threads_31606)
{
    #define segscan_group_sizze_28574 (mainzisegscan_group_sizze_28489)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31612_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31612_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31607;
    int32_t local_tid_31608;
    int64_t group_sizze_31611;
    int32_t wave_sizze_31610;
    int32_t group_tid_31609;
    
    global_tid_31607 = get_global_id(0);
    local_tid_31608 = get_local_id(0);
    group_sizze_31611 = get_local_size(0);
    wave_sizze_31610 = LOCKSTEP_WIDTH;
    group_tid_31609 = get_group_id(0);
    
    int32_t phys_tid_28495;
    
    phys_tid_28495 = global_tid_31607;
    
    __local char *scan_arr_mem_31612;
    
    scan_arr_mem_31612 = (__local char *) scan_arr_mem_31612_backing_0;
    
    float x_28578;
    float x_28579;
    
    x_28578 = 0.0F;
    for (int64_t j_31614 = 0; j_31614 < sdiv_up64(m_20968 * iota32_arg_21351,
                                                  sext_i32_i64(num_threads_31606));
         j_31614++) {
        int64_t chunk_offset_31615 = segscan_group_sizze_28574 * j_31614 +
                sext_i32_i64(group_tid_31609) * (segscan_group_sizze_28574 *
                                                 sdiv_up64(m_20968 *
                                                           iota32_arg_21351,
                                                           sext_i32_i64(num_threads_31606)));
        int64_t flat_idx_31616 = chunk_offset_31615 +
                sext_i32_i64(local_tid_31608);
        int64_t gtid_28486 = squot64(flat_idx_31616, iota32_arg_21351);
        int64_t gtid_28494 = flat_idx_31616 - squot64(flat_idx_31616,
                                                      iota32_arg_21351) *
                iota32_arg_21351;
        
        // threads in bounds read input
        {
            if (slt64(gtid_28486, m_20968) && slt64(gtid_28494,
                                                    iota32_arg_21351)) {
                int32_t y_28585 = ((__global int32_t *) mem_30581)[gtid_28486];
                int32_t index_primexp_28770 = sext_i64_i32(gtid_28494);
                bool cond_28588 = sle32(y_28585, index_primexp_28770);
                float res_28589;
                
                if (cond_28588) {
                    res_28589 = 0.0F;
                } else {
                    int32_t x_28581 = ((__global
                                        int32_t *) res_mem_30512)[gtid_28486];
                    int32_t x_28582 = ((__global
                                        int32_t *) res_mem_30511)[gtid_28486];
                    float x_28583 = ((__global
                                      float *) res_mem_30562)[gtid_28486];
                    bool cond_28590 = index_primexp_28770 == 0;
                    float res_28591;
                    
                    if (cond_28590) {
                        res_28591 = x_28583;
                    } else {
                        int32_t x_28592 = sub32(x_28581, x_28582);
                        int32_t i_28593 = add32(x_28592, index_primexp_28770);
                        int64_t i_28594 = sext_i32_i64(i_28593);
                        float negate_arg_28595 = ((__global
                                                   float *) res_mem_30432)[gtid_28486 *
                                                                           N_20967 +
                                                                           i_28594];
                        float x_28596 = 0.0F - negate_arg_28595;
                        int32_t i_28597 = add32(x_28581, index_primexp_28770);
                        int64_t i_28598 = sext_i32_i64(i_28597);
                        float y_28599 = ((__global
                                          float *) res_mem_30432)[gtid_28486 *
                                                                  N_20967 +
                                                                  i_28598];
                        float res_28600 = x_28596 + y_28599;
                        
                        res_28591 = res_28600;
                    }
                    res_28589 = res_28591;
                }
                // write to-scan values to parameters
                {
                    x_28579 = res_28589;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_28486, m_20968) && slt64(gtid_28494,
                                                          iota32_arg_21351))) {
                    x_28579 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_28580 = x_28578 + x_28579;
                
                ((__local
                  float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)] =
                    res_28580;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_31617;
            float x_31618;
            float x_31620;
            float x_31621;
            bool ltid_in_bounds_31623;
            
            ltid_in_bounds_31623 = slt64(sext_i32_i64(local_tid_31608),
                                         segscan_group_sizze_28574);
            
            int32_t skip_threads_31624;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_31623) {
                    x_31618 = ((volatile __local
                                float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)];
                    if ((local_tid_31608 - squot32(local_tid_31608, 32) * 32) ==
                        0) {
                        x_31617 = x_31618;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31624 = 1;
                while (slt32(skip_threads_31624, 32)) {
                    if (sle32(skip_threads_31624, local_tid_31608 -
                              squot32(local_tid_31608, 32) * 32) &&
                        ltid_in_bounds_31623) {
                        // read operands
                        {
                            x_31617 = ((volatile __local
                                        float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608) -
                                                                     sext_i32_i64(skip_threads_31624)];
                        }
                        // perform operation
                        {
                            bool inactive_31625 =
                                 slt64(srem64(sext_i32_i64(local_tid_31608) +
                                              chunk_offset_31615,
                                              iota32_arg_21351),
                                       sext_i32_i64(local_tid_31608) +
                                       chunk_offset_31615 -
                                       (sext_i32_i64(local_tid_31608 -
                                        skip_threads_31624) +
                                        chunk_offset_31615));
                            
                            if (inactive_31625) {
                                x_31617 = x_31618;
                            }
                            if (!inactive_31625) {
                                float res_31619 = x_31617 + x_31618;
                                
                                x_31617 = res_31619;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31610, skip_threads_31624)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_31624, local_tid_31608 -
                              squot32(local_tid_31608, 32) * 32) &&
                        ltid_in_bounds_31623) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)] =
                                x_31617;
                            x_31618 = x_31617;
                        }
                    }
                    if (sle32(wave_sizze_31610, skip_threads_31624)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31624 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_31608 - squot32(local_tid_31608, 32) * 32) ==
                    31 && ltid_in_bounds_31623) {
                    ((volatile __local
                      float *) scan_arr_mem_31612)[sext_i32_i64(squot32(local_tid_31608,
                                                                        32))] =
                        x_31617;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_31626;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_31608, 32) == 0 &&
                        ltid_in_bounds_31623) {
                        x_31621 = ((volatile __local
                                    float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)];
                        if ((local_tid_31608 - squot32(local_tid_31608, 32) *
                             32) == 0) {
                            x_31620 = x_31621;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31626 = 1;
                    while (slt32(skip_threads_31626, 32)) {
                        if (sle32(skip_threads_31626, local_tid_31608 -
                                  squot32(local_tid_31608, 32) * 32) &&
                            (squot32(local_tid_31608, 32) == 0 &&
                             ltid_in_bounds_31623)) {
                            // read operands
                            {
                                x_31620 = ((volatile __local
                                            float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608) -
                                                                         sext_i32_i64(skip_threads_31626)];
                            }
                            // perform operation
                            {
                                bool inactive_31627 =
                                     slt64(srem64(sext_i32_i64(local_tid_31608 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_31615,
                                                  iota32_arg_21351),
                                           sext_i32_i64(local_tid_31608 * 32 +
                                           32 - 1) + chunk_offset_31615 -
                                           (sext_i32_i64((local_tid_31608 -
                                                          skip_threads_31626) *
                                            32 + 32 - 1) + chunk_offset_31615));
                                
                                if (inactive_31627) {
                                    x_31620 = x_31621;
                                }
                                if (!inactive_31627) {
                                    float res_31622 = x_31620 + x_31621;
                                    
                                    x_31620 = res_31622;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31610, skip_threads_31626)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31626, local_tid_31608 -
                                  squot32(local_tid_31608, 32) * 32) &&
                            (squot32(local_tid_31608, 32) == 0 &&
                             ltid_in_bounds_31623)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)] =
                                    x_31620;
                                x_31621 = x_31620;
                            }
                        }
                        if (sle32(wave_sizze_31610, skip_threads_31626)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31626 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_31608, 32) == 0 ||
                      !ltid_in_bounds_31623)) {
                    // read operands
                    {
                        x_31618 = x_31617;
                        x_31617 = ((__local
                                    float *) scan_arr_mem_31612)[sext_i32_i64(squot32(local_tid_31608,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_31628 =
                             slt64(srem64(sext_i32_i64(local_tid_31608) +
                                          chunk_offset_31615, iota32_arg_21351),
                                   sext_i32_i64(local_tid_31608) +
                                   chunk_offset_31615 -
                                   (sext_i32_i64(squot32(local_tid_31608, 32) *
                                    32 - 1) + chunk_offset_31615));
                        
                        if (inactive_31628) {
                            x_31617 = x_31618;
                        }
                        if (!inactive_31628) {
                            float res_31619 = x_31617 + x_31618;
                            
                            x_31617 = res_31619;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)] =
                            x_31617;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_31608, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)] =
                        x_31618;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_28486, m_20968) && slt64(gtid_28494,
                                                        iota32_arg_21351)) {
                    ((__global float *) mem_30585)[gtid_28486 *
                                                   iota32_arg_21351 +
                                                   gtid_28494] = ((__local
                                                                   float *) scan_arr_mem_31612)[sext_i32_i64(local_tid_31608)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_31629 = slt64(srem64(chunk_offset_31615 +
                                                          segscan_group_sizze_28574,
                                                          iota32_arg_21351),
                                                   chunk_offset_31615 +
                                                   segscan_group_sizze_28574 -
                                                   (chunk_offset_31615 +
                                                    segscan_group_sizze_28574 -
                                                    1));
                bool should_load_carry_31630 = local_tid_31608 == 0 &&
                     !crosses_segment_31629;
                
                if (should_load_carry_31630) {
                    x_28578 = ((__local
                                float *) scan_arr_mem_31612)[segscan_group_sizze_28574 -
                                                             1];
                }
                if (!should_load_carry_31630) {
                    x_28578 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_28574
}
__kernel void mainziscan_stage2_27524(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_31269_backing_aligned_0,
                                      int64_t N_20967, int64_t m_20968, __global
                                      unsigned char *mem_30423,
                                      int64_t stage1_num_groups_31238,
                                      int32_t num_threads_31239)
{
    #define segscan_group_sizze_27541 (mainzisegscan_group_sizze_27518)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31269_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31269_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31264;
    int32_t local_tid_31265;
    int64_t group_sizze_31268;
    int32_t wave_sizze_31267;
    int32_t group_tid_31266;
    
    global_tid_31264 = get_global_id(0);
    local_tid_31265 = get_local_id(0);
    group_sizze_31268 = get_local_size(0);
    wave_sizze_31267 = LOCKSTEP_WIDTH;
    group_tid_31266 = get_group_id(0);
    
    int32_t phys_tid_27524;
    
    phys_tid_27524 = global_tid_31264;
    
    __local char *scan_arr_mem_31269;
    
    scan_arr_mem_31269 = (__local char *) scan_arr_mem_31269_backing_0;
    
    int64_t flat_idx_31271;
    
    flat_idx_31271 = (sext_i32_i64(local_tid_31265) + 1) *
        (segscan_group_sizze_27541 * sdiv_up64(m_20968 * N_20967,
                                               sext_i32_i64(num_threads_31239))) -
        1;
    
    int64_t gtid_27515;
    
    gtid_27515 = squot64(flat_idx_31271, N_20967);
    
    int64_t gtid_27523;
    
    gtid_27523 = flat_idx_31271 - squot64(flat_idx_31271, N_20967) * N_20967;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_27515, m_20968) && slt64(gtid_27523, N_20967)) {
            ((__local
              int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] =
                ((__global int64_t *) mem_30423)[gtid_27515 * N_20967 +
                                                 gtid_27523];
        } else {
            ((__local
              int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_27546;
    int64_t x_27547;
    int64_t x_31272;
    int64_t x_31273;
    bool ltid_in_bounds_31275;
    
    ltid_in_bounds_31275 = slt64(sext_i32_i64(local_tid_31265),
                                 stage1_num_groups_31238);
    
    int32_t skip_threads_31276;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31275) {
            x_27547 = ((volatile __local
                        int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)];
            if ((local_tid_31265 - squot32(local_tid_31265, 32) * 32) == 0) {
                x_27546 = x_27547;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31276 = 1;
        while (slt32(skip_threads_31276, 32)) {
            if (sle32(skip_threads_31276, local_tid_31265 -
                      squot32(local_tid_31265, 32) * 32) &&
                ltid_in_bounds_31275) {
                // read operands
                {
                    x_27546 = ((volatile __local
                                int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265) -
                                                               sext_i32_i64(skip_threads_31276)];
                }
                // perform operation
                {
                    bool inactive_31277 =
                         slt64(srem64((sext_i32_i64(local_tid_31265) + 1) *
                                      (segscan_group_sizze_27541 *
                                       sdiv_up64(m_20968 * N_20967,
                                                 sext_i32_i64(num_threads_31239))) -
                                      1, N_20967),
                               (sext_i32_i64(local_tid_31265) + 1) *
                               (segscan_group_sizze_27541 * sdiv_up64(m_20968 *
                                                                      N_20967,
                                                                      sext_i32_i64(num_threads_31239))) -
                               1 - ((sext_i32_i64(local_tid_31265 -
                                     skip_threads_31276) + 1) *
                                    (segscan_group_sizze_27541 *
                                     sdiv_up64(m_20968 * N_20967,
                                               sext_i32_i64(num_threads_31239))) -
                                    1));
                    
                    if (inactive_31277) {
                        x_27546 = x_27547;
                    }
                    if (!inactive_31277) {
                        int64_t res_27548 = add64(x_27546, x_27547);
                        
                        x_27546 = res_27548;
                    }
                }
            }
            if (sle32(wave_sizze_31267, skip_threads_31276)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31276, local_tid_31265 -
                      squot32(local_tid_31265, 32) * 32) &&
                ltid_in_bounds_31275) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] =
                        x_27546;
                    x_27547 = x_27546;
                }
            }
            if (sle32(wave_sizze_31267, skip_threads_31276)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31276 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31265 - squot32(local_tid_31265, 32) * 32) == 31 &&
            ltid_in_bounds_31275) {
            ((volatile __local
              int64_t *) scan_arr_mem_31269)[sext_i32_i64(squot32(local_tid_31265,
                                                                  32))] =
                x_27546;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31278;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31265, 32) == 0 && ltid_in_bounds_31275) {
                x_31273 = ((volatile __local
                            int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)];
                if ((local_tid_31265 - squot32(local_tid_31265, 32) * 32) ==
                    0) {
                    x_31272 = x_31273;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31278 = 1;
            while (slt32(skip_threads_31278, 32)) {
                if (sle32(skip_threads_31278, local_tid_31265 -
                          squot32(local_tid_31265, 32) * 32) &&
                    (squot32(local_tid_31265, 32) == 0 &&
                     ltid_in_bounds_31275)) {
                    // read operands
                    {
                        x_31272 = ((volatile __local
                                    int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265) -
                                                                   sext_i32_i64(skip_threads_31278)];
                    }
                    // perform operation
                    {
                        bool inactive_31279 =
                             slt64(srem64((sext_i32_i64(local_tid_31265 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_27541 *
                                           sdiv_up64(m_20968 * N_20967,
                                                     sext_i32_i64(num_threads_31239))) -
                                          1, N_20967),
                                   (sext_i32_i64(local_tid_31265 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_27541 *
                                               sdiv_up64(m_20968 * N_20967,
                                                         sext_i32_i64(num_threads_31239))) -
                                   1 - ((sext_i32_i64((local_tid_31265 -
                                                       skip_threads_31278) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_27541 *
                                         sdiv_up64(m_20968 * N_20967,
                                                   sext_i32_i64(num_threads_31239))) -
                                        1));
                        
                        if (inactive_31279) {
                            x_31272 = x_31273;
                        }
                        if (!inactive_31279) {
                            int64_t res_31274 = add64(x_31272, x_31273);
                            
                            x_31272 = res_31274;
                        }
                    }
                }
                if (sle32(wave_sizze_31267, skip_threads_31278)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31278, local_tid_31265 -
                          squot32(local_tid_31265, 32) * 32) &&
                    (squot32(local_tid_31265, 32) == 0 &&
                     ltid_in_bounds_31275)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] =
                            x_31272;
                        x_31273 = x_31272;
                    }
                }
                if (sle32(wave_sizze_31267, skip_threads_31278)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31278 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31265, 32) == 0 || !ltid_in_bounds_31275)) {
            // read operands
            {
                x_27547 = x_27546;
                x_27546 = ((__local
                            int64_t *) scan_arr_mem_31269)[sext_i32_i64(squot32(local_tid_31265,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_31280 =
                     slt64(srem64((sext_i32_i64(local_tid_31265) + 1) *
                                  (segscan_group_sizze_27541 *
                                   sdiv_up64(m_20968 * N_20967,
                                             sext_i32_i64(num_threads_31239))) -
                                  1, N_20967), (sext_i32_i64(local_tid_31265) +
                                                1) *
                           (segscan_group_sizze_27541 * sdiv_up64(m_20968 *
                                                                  N_20967,
                                                                  sext_i32_i64(num_threads_31239))) -
                           1 - ((sext_i32_i64(squot32(local_tid_31265, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_27541 *
                                                 sdiv_up64(m_20968 * N_20967,
                                                           sext_i32_i64(num_threads_31239))) -
                                1));
                
                if (inactive_31280) {
                    x_27546 = x_27547;
                }
                if (!inactive_31280) {
                    int64_t res_27548 = add64(x_27546, x_27547);
                    
                    x_27546 = res_27548;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] =
                    x_27546;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31265, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)] =
                x_27547;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_27515, m_20968) && slt64(gtid_27523, N_20967)) {
            ((__global int64_t *) mem_30423)[gtid_27515 * N_20967 +
                                             gtid_27523] = ((__local
                                                             int64_t *) scan_arr_mem_31269)[sext_i32_i64(local_tid_31265)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27541
}
__kernel void mainziscan_stage2_28495(__global int *global_failure,
                                      __local volatile
                                      int64_t *scan_arr_mem_31636_backing_aligned_0,
                                      int64_t m_20968, int64_t iota32_arg_21351,
                                      __global unsigned char *mem_30585,
                                      int64_t stage1_num_groups_31605,
                                      int32_t num_threads_31606)
{
    #define segscan_group_sizze_28574 (mainzisegscan_group_sizze_28489)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31636_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31636_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31631;
    int32_t local_tid_31632;
    int64_t group_sizze_31635;
    int32_t wave_sizze_31634;
    int32_t group_tid_31633;
    
    global_tid_31631 = get_global_id(0);
    local_tid_31632 = get_local_id(0);
    group_sizze_31635 = get_local_size(0);
    wave_sizze_31634 = LOCKSTEP_WIDTH;
    group_tid_31633 = get_group_id(0);
    
    int32_t phys_tid_28495;
    
    phys_tid_28495 = global_tid_31631;
    
    __local char *scan_arr_mem_31636;
    
    scan_arr_mem_31636 = (__local char *) scan_arr_mem_31636_backing_0;
    
    int64_t flat_idx_31638;
    
    flat_idx_31638 = (sext_i32_i64(local_tid_31632) + 1) *
        (segscan_group_sizze_28574 * sdiv_up64(m_20968 * iota32_arg_21351,
                                               sext_i32_i64(num_threads_31606))) -
        1;
    
    int64_t gtid_28486;
    
    gtid_28486 = squot64(flat_idx_31638, iota32_arg_21351);
    
    int64_t gtid_28494;
    
    gtid_28494 = flat_idx_31638 - squot64(flat_idx_31638, iota32_arg_21351) *
        iota32_arg_21351;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_28486, m_20968) && slt64(gtid_28494, iota32_arg_21351)) {
            ((__local
              float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                ((__global float *) mem_30585)[gtid_28486 * iota32_arg_21351 +
                                               gtid_28494];
        } else {
            ((__local
              float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_28578;
    float x_28579;
    float x_31639;
    float x_31640;
    bool ltid_in_bounds_31642;
    
    ltid_in_bounds_31642 = slt64(sext_i32_i64(local_tid_31632),
                                 stage1_num_groups_31605);
    
    int32_t skip_threads_31643;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31642) {
            x_28579 = ((volatile __local
                        float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)];
            if ((local_tid_31632 - squot32(local_tid_31632, 32) * 32) == 0) {
                x_28578 = x_28579;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31643 = 1;
        while (slt32(skip_threads_31643, 32)) {
            if (sle32(skip_threads_31643, local_tid_31632 -
                      squot32(local_tid_31632, 32) * 32) &&
                ltid_in_bounds_31642) {
                // read operands
                {
                    x_28578 = ((volatile __local
                                float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632) -
                                                             sext_i32_i64(skip_threads_31643)];
                }
                // perform operation
                {
                    bool inactive_31644 =
                         slt64(srem64((sext_i32_i64(local_tid_31632) + 1) *
                                      (segscan_group_sizze_28574 *
                                       sdiv_up64(m_20968 * iota32_arg_21351,
                                                 sext_i32_i64(num_threads_31606))) -
                                      1, iota32_arg_21351),
                               (sext_i32_i64(local_tid_31632) + 1) *
                               (segscan_group_sizze_28574 * sdiv_up64(m_20968 *
                                                                      iota32_arg_21351,
                                                                      sext_i32_i64(num_threads_31606))) -
                               1 - ((sext_i32_i64(local_tid_31632 -
                                     skip_threads_31643) + 1) *
                                    (segscan_group_sizze_28574 *
                                     sdiv_up64(m_20968 * iota32_arg_21351,
                                               sext_i32_i64(num_threads_31606))) -
                                    1));
                    
                    if (inactive_31644) {
                        x_28578 = x_28579;
                    }
                    if (!inactive_31644) {
                        float res_28580 = x_28578 + x_28579;
                        
                        x_28578 = res_28580;
                    }
                }
            }
            if (sle32(wave_sizze_31634, skip_threads_31643)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31643, local_tid_31632 -
                      squot32(local_tid_31632, 32) * 32) &&
                ltid_in_bounds_31642) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                        x_28578;
                    x_28579 = x_28578;
                }
            }
            if (sle32(wave_sizze_31634, skip_threads_31643)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31643 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31632 - squot32(local_tid_31632, 32) * 32) == 31 &&
            ltid_in_bounds_31642) {
            ((volatile __local
              float *) scan_arr_mem_31636)[sext_i32_i64(squot32(local_tid_31632,
                                                                32))] = x_28578;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31645;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31632, 32) == 0 && ltid_in_bounds_31642) {
                x_31640 = ((volatile __local
                            float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)];
                if ((local_tid_31632 - squot32(local_tid_31632, 32) * 32) ==
                    0) {
                    x_31639 = x_31640;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31645 = 1;
            while (slt32(skip_threads_31645, 32)) {
                if (sle32(skip_threads_31645, local_tid_31632 -
                          squot32(local_tid_31632, 32) * 32) &&
                    (squot32(local_tid_31632, 32) == 0 &&
                     ltid_in_bounds_31642)) {
                    // read operands
                    {
                        x_31639 = ((volatile __local
                                    float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632) -
                                                                 sext_i32_i64(skip_threads_31645)];
                    }
                    // perform operation
                    {
                        bool inactive_31646 =
                             slt64(srem64((sext_i32_i64(local_tid_31632 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_28574 *
                                           sdiv_up64(m_20968 * iota32_arg_21351,
                                                     sext_i32_i64(num_threads_31606))) -
                                          1, iota32_arg_21351),
                                   (sext_i32_i64(local_tid_31632 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_28574 *
                                               sdiv_up64(m_20968 *
                                                         iota32_arg_21351,
                                                         sext_i32_i64(num_threads_31606))) -
                                   1 - ((sext_i32_i64((local_tid_31632 -
                                                       skip_threads_31645) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_28574 *
                                         sdiv_up64(m_20968 * iota32_arg_21351,
                                                   sext_i32_i64(num_threads_31606))) -
                                        1));
                        
                        if (inactive_31646) {
                            x_31639 = x_31640;
                        }
                        if (!inactive_31646) {
                            float res_31641 = x_31639 + x_31640;
                            
                            x_31639 = res_31641;
                        }
                    }
                }
                if (sle32(wave_sizze_31634, skip_threads_31645)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31645, local_tid_31632 -
                          squot32(local_tid_31632, 32) * 32) &&
                    (squot32(local_tid_31632, 32) == 0 &&
                     ltid_in_bounds_31642)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                            x_31639;
                        x_31640 = x_31639;
                    }
                }
                if (sle32(wave_sizze_31634, skip_threads_31645)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31645 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31632, 32) == 0 || !ltid_in_bounds_31642)) {
            // read operands
            {
                x_28579 = x_28578;
                x_28578 = ((__local
                            float *) scan_arr_mem_31636)[sext_i32_i64(squot32(local_tid_31632,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_31647 =
                     slt64(srem64((sext_i32_i64(local_tid_31632) + 1) *
                                  (segscan_group_sizze_28574 *
                                   sdiv_up64(m_20968 * iota32_arg_21351,
                                             sext_i32_i64(num_threads_31606))) -
                                  1, iota32_arg_21351),
                           (sext_i32_i64(local_tid_31632) + 1) *
                           (segscan_group_sizze_28574 * sdiv_up64(m_20968 *
                                                                  iota32_arg_21351,
                                                                  sext_i32_i64(num_threads_31606))) -
                           1 - ((sext_i32_i64(squot32(local_tid_31632, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_28574 *
                                                 sdiv_up64(m_20968 *
                                                           iota32_arg_21351,
                                                           sext_i32_i64(num_threads_31606))) -
                                1));
                
                if (inactive_31647) {
                    x_28578 = x_28579;
                }
                if (!inactive_31647) {
                    float res_28580 = x_28578 + x_28579;
                    
                    x_28578 = res_28580;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                    x_28578;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31632, 32) == 0) {
            ((__local
              float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)] =
                x_28579;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_28486, m_20968) && slt64(gtid_28494, iota32_arg_21351)) {
            ((__global float *) mem_30585)[gtid_28486 * iota32_arg_21351 +
                                           gtid_28494] = ((__local
                                                           float *) scan_arr_mem_31636)[sext_i32_i64(local_tid_31632)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_28574
}
__kernel void mainziscan_stage3_27524(__global int *global_failure,
                                      int64_t N_20967, int64_t m_20968,
                                      int64_t num_groups_27542, __global
                                      unsigned char *mem_30423,
                                      int32_t num_threads_31239,
                                      int32_t required_groups_31281)
{
    #define segscan_group_sizze_27541 (mainzisegscan_group_sizze_27518)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31282;
    int32_t local_tid_31283;
    int64_t group_sizze_31286;
    int32_t wave_sizze_31285;
    int32_t group_tid_31284;
    
    global_tid_31282 = get_global_id(0);
    local_tid_31283 = get_local_id(0);
    group_sizze_31286 = get_local_size(0);
    wave_sizze_31285 = LOCKSTEP_WIDTH;
    group_tid_31284 = get_group_id(0);
    
    int32_t phys_tid_27524;
    
    phys_tid_27524 = global_tid_31282;
    
    int32_t phys_group_id_31287;
    
    phys_group_id_31287 = get_group_id(0);
    for (int32_t i_31288 = 0; i_31288 < sdiv_up32(required_groups_31281 -
                                                  phys_group_id_31287,
                                                  sext_i64_i32(num_groups_27542));
         i_31288++) {
        int32_t virt_group_id_31289 = phys_group_id_31287 + i_31288 *
                sext_i64_i32(num_groups_27542);
        int64_t flat_idx_31290 = sext_i32_i64(virt_group_id_31289) *
                segscan_group_sizze_27541 + sext_i32_i64(local_tid_31283);
        int64_t gtid_27515 = squot64(flat_idx_31290, N_20967);
        int64_t gtid_27523 = flat_idx_31290 - squot64(flat_idx_31290, N_20967) *
                N_20967;
        int64_t orig_group_31291 = squot64(flat_idx_31290,
                                           segscan_group_sizze_27541 *
                                           sdiv_up64(m_20968 * N_20967,
                                                     sext_i32_i64(num_threads_31239)));
        int64_t carry_in_flat_idx_31292 = orig_group_31291 *
                (segscan_group_sizze_27541 * sdiv_up64(m_20968 * N_20967,
                                                       sext_i32_i64(num_threads_31239))) -
                1;
        
        if (slt64(gtid_27515, m_20968) && slt64(gtid_27523, N_20967)) {
            if (!(orig_group_31291 == 0 || (flat_idx_31290 ==
                                            (orig_group_31291 + 1) *
                                            (segscan_group_sizze_27541 *
                                             sdiv_up64(m_20968 * N_20967,
                                                       sext_i32_i64(num_threads_31239))) -
                                            1 || slt64(srem64(flat_idx_31290,
                                                              N_20967),
                                                       flat_idx_31290 -
                                                       carry_in_flat_idx_31292)))) {
                int64_t x_27546;
                int64_t x_27547;
                
                x_27546 = ((__global
                            int64_t *) mem_30423)[squot64(carry_in_flat_idx_31292,
                                                          N_20967) * N_20967 +
                                                  (carry_in_flat_idx_31292 -
                                                   squot64(carry_in_flat_idx_31292,
                                                           N_20967) * N_20967)];
                x_27547 = ((__global int64_t *) mem_30423)[gtid_27515 *
                                                           N_20967 +
                                                           gtid_27523];
                
                int64_t res_27548;
                
                res_27548 = add64(x_27546, x_27547);
                x_27546 = res_27548;
                ((__global int64_t *) mem_30423)[gtid_27515 * N_20967 +
                                                 gtid_27523] = x_27546;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_27541
}
__kernel void mainziscan_stage3_28495(__global int *global_failure,
                                      int64_t m_20968, int64_t iota32_arg_21351,
                                      int64_t num_groups_28575, __global
                                      unsigned char *mem_30585,
                                      int32_t num_threads_31606,
                                      int32_t required_groups_31648)
{
    #define segscan_group_sizze_28574 (mainzisegscan_group_sizze_28489)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31649;
    int32_t local_tid_31650;
    int64_t group_sizze_31653;
    int32_t wave_sizze_31652;
    int32_t group_tid_31651;
    
    global_tid_31649 = get_global_id(0);
    local_tid_31650 = get_local_id(0);
    group_sizze_31653 = get_local_size(0);
    wave_sizze_31652 = LOCKSTEP_WIDTH;
    group_tid_31651 = get_group_id(0);
    
    int32_t phys_tid_28495;
    
    phys_tid_28495 = global_tid_31649;
    
    int32_t phys_group_id_31654;
    
    phys_group_id_31654 = get_group_id(0);
    for (int32_t i_31655 = 0; i_31655 < sdiv_up32(required_groups_31648 -
                                                  phys_group_id_31654,
                                                  sext_i64_i32(num_groups_28575));
         i_31655++) {
        int32_t virt_group_id_31656 = phys_group_id_31654 + i_31655 *
                sext_i64_i32(num_groups_28575);
        int64_t flat_idx_31657 = sext_i32_i64(virt_group_id_31656) *
                segscan_group_sizze_28574 + sext_i32_i64(local_tid_31650);
        int64_t gtid_28486 = squot64(flat_idx_31657, iota32_arg_21351);
        int64_t gtid_28494 = flat_idx_31657 - squot64(flat_idx_31657,
                                                      iota32_arg_21351) *
                iota32_arg_21351;
        int64_t orig_group_31658 = squot64(flat_idx_31657,
                                           segscan_group_sizze_28574 *
                                           sdiv_up64(m_20968 * iota32_arg_21351,
                                                     sext_i32_i64(num_threads_31606)));
        int64_t carry_in_flat_idx_31659 = orig_group_31658 *
                (segscan_group_sizze_28574 * sdiv_up64(m_20968 *
                                                       iota32_arg_21351,
                                                       sext_i32_i64(num_threads_31606))) -
                1;
        
        if (slt64(gtid_28486, m_20968) && slt64(gtid_28494, iota32_arg_21351)) {
            if (!(orig_group_31658 == 0 || (flat_idx_31657 ==
                                            (orig_group_31658 + 1) *
                                            (segscan_group_sizze_28574 *
                                             sdiv_up64(m_20968 *
                                                       iota32_arg_21351,
                                                       sext_i32_i64(num_threads_31606))) -
                                            1 || slt64(srem64(flat_idx_31657,
                                                              iota32_arg_21351),
                                                       flat_idx_31657 -
                                                       carry_in_flat_idx_31659)))) {
                float x_28578;
                float x_28579;
                
                x_28578 = ((__global
                            float *) mem_30585)[squot64(carry_in_flat_idx_31659,
                                                        iota32_arg_21351) *
                                                iota32_arg_21351 +
                                                (carry_in_flat_idx_31659 -
                                                 squot64(carry_in_flat_idx_31659,
                                                         iota32_arg_21351) *
                                                 iota32_arg_21351)];
                x_28579 = ((__global float *) mem_30585)[gtid_28486 *
                                                         iota32_arg_21351 +
                                                         gtid_28494];
                
                float res_28580;
                
                res_28580 = x_28578 + x_28579;
                x_28578 = res_28580;
                ((__global float *) mem_30585)[gtid_28486 * iota32_arg_21351 +
                                               gtid_28494] = x_28578;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_28574
}
__kernel void mainzisegmap_25321(__global int *global_failure, int64_t N_20967,
                                 float freq_20973, int64_t res_20987, __global
                                 unsigned char *mappingindices_mem_29972,
                                 __global unsigned char *mem_29977)
{
    #define segmap_group_sizze_25394 (mainzisegmap_group_sizze_25324)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30768;
    int32_t local_tid_30769;
    int64_t group_sizze_30772;
    int32_t wave_sizze_30771;
    int32_t group_tid_30770;
    
    global_tid_30768 = get_global_id(0);
    local_tid_30769 = get_local_id(0);
    group_sizze_30772 = get_local_size(0);
    wave_sizze_30771 = LOCKSTEP_WIDTH;
    group_tid_30770 = get_group_id(0);
    
    int32_t phys_tid_25321;
    
    phys_tid_25321 = global_tid_30768;
    
    int64_t gtid_25319;
    
    gtid_25319 = squot64(sext_i32_i64(group_tid_30770) *
                         segmap_group_sizze_25394 +
                         sext_i32_i64(local_tid_30769), N_20967);
    
    int64_t gtid_25320;
    
    gtid_25320 = sext_i32_i64(group_tid_30770) * segmap_group_sizze_25394 +
        sext_i32_i64(local_tid_30769) - squot64(sext_i32_i64(group_tid_30770) *
                                                segmap_group_sizze_25394 +
                                                sext_i32_i64(local_tid_30769),
                                                N_20967) * N_20967;
    if (slt64(gtid_25319, res_20987) && slt64(gtid_25320, N_20967)) {
        int32_t index_primexp_28699 = sext_i64_i32(gtid_25319);
        bool index_primexp_28696 = index_primexp_28699 == 0;
        float res_25400;
        
        if (index_primexp_28696) {
            res_25400 = 1.0F;
        } else {
            int32_t x_25399 = ((__global
                                int32_t *) mappingindices_mem_29972)[gtid_25320];
            bool cond_25401 = index_primexp_28699 == 1;
            float res_25402;
            
            if (cond_25401) {
                float res_25403 = sitofp_i32_f32(x_25399);
                
                res_25402 = res_25403;
            } else {
                int32_t r32_arg_25404 = sdiv32(index_primexp_28699, 2);
                float res_25405 = sitofp_i32_f32(r32_arg_25404);
                float res_25406 = sitofp_i32_f32(x_25399);
                float x_25407 = 6.2831855F * res_25405;
                float x_25408 = res_25406 * x_25407;
                float angle_25409 = x_25408 / freq_20973;
                int32_t x_25410 = smod32(index_primexp_28699, 2);
                bool cond_25411 = x_25410 == 0;
                float res_25412;
                
                if (cond_25411) {
                    float res_25413;
                    
                    res_25413 = futrts_sin32(angle_25409);
                    res_25412 = res_25413;
                } else {
                    float res_25414;
                    
                    res_25414 = futrts_cos32(angle_25409);
                    res_25412 = res_25414;
                }
                res_25402 = res_25412;
            }
            res_25400 = res_25402;
        }
        ((__global float *) mem_29977)[gtid_25319 * N_20967 + gtid_25320] =
            res_25400;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25394
}
__kernel void mainzisegmap_25499(__global int *global_failure, int64_t N_20967,
                                 float freq_20973, int64_t res_20987, __global
                                 unsigned char *mappingindices_mem_29972,
                                 __global unsigned char *mem_29981)
{
    #define segmap_group_sizze_25568 (mainzisegmap_group_sizze_25502)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30773;
    int32_t local_tid_30774;
    int64_t group_sizze_30777;
    int32_t wave_sizze_30776;
    int32_t group_tid_30775;
    
    global_tid_30773 = get_global_id(0);
    local_tid_30774 = get_local_id(0);
    group_sizze_30777 = get_local_size(0);
    wave_sizze_30776 = LOCKSTEP_WIDTH;
    group_tid_30775 = get_group_id(0);
    
    int32_t phys_tid_25499;
    
    phys_tid_25499 = global_tid_30773;
    
    int64_t gtid_25497;
    
    gtid_25497 = squot64(sext_i32_i64(group_tid_30775) *
                         segmap_group_sizze_25568 +
                         sext_i32_i64(local_tid_30774), N_20967);
    
    int64_t gtid_25498;
    
    gtid_25498 = sext_i32_i64(group_tid_30775) * segmap_group_sizze_25568 +
        sext_i32_i64(local_tid_30774) - squot64(sext_i32_i64(group_tid_30775) *
                                                segmap_group_sizze_25568 +
                                                sext_i32_i64(local_tid_30774),
                                                N_20967) * N_20967;
    if (slt64(gtid_25497, res_20987) && slt64(gtid_25498, N_20967)) {
        int32_t index_primexp_28708 = sext_i64_i32(gtid_25497);
        bool index_primexp_28705 = index_primexp_28708 == 0;
        float res_25574;
        
        if (index_primexp_28705) {
            res_25574 = 1.0F;
        } else {
            int32_t x_25573 = ((__global
                                int32_t *) mappingindices_mem_29972)[gtid_25498];
            int32_t i_25575 = add32(1, index_primexp_28708);
            int32_t r32_arg_25576 = sdiv32(i_25575, 2);
            float res_25577 = sitofp_i32_f32(r32_arg_25576);
            float res_25578 = sitofp_i32_f32(x_25573);
            float x_25579 = 6.2831855F * res_25577;
            float x_25580 = res_25578 * x_25579;
            float angle_25581 = x_25580 / freq_20973;
            int32_t x_25582 = smod32(i_25575, 2);
            bool cond_25583 = x_25582 == 0;
            float res_25584;
            
            if (cond_25583) {
                float res_25585;
                
                res_25585 = futrts_sin32(angle_25581);
                res_25584 = res_25585;
            } else {
                float res_25586;
                
                res_25586 = futrts_cos32(angle_25581);
                res_25584 = res_25586;
            }
            res_25574 = res_25584;
        }
        ((__global float *) mem_29981)[gtid_25497 * N_20967 + gtid_25498] =
            res_25574;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25568
}
__kernel void mainzisegmap_25627(__global int *global_failure, int64_t N_20967,
                                 int64_t res_20987, float res_21052, __global
                                 unsigned char *mem_29985, __global
                                 unsigned char *mem_29989)
{
    #define segmap_group_sizze_25651 (mainzisegmap_group_sizze_25630)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30778;
    int32_t local_tid_30779;
    int64_t group_sizze_30782;
    int32_t wave_sizze_30781;
    int32_t group_tid_30780;
    
    global_tid_30778 = get_global_id(0);
    local_tid_30779 = get_local_id(0);
    group_sizze_30782 = get_local_size(0);
    wave_sizze_30781 = LOCKSTEP_WIDTH;
    group_tid_30780 = get_group_id(0);
    
    int32_t phys_tid_25627;
    
    phys_tid_25627 = global_tid_30778;
    
    int64_t gtid_25625;
    
    gtid_25625 = squot64(sext_i32_i64(group_tid_30780) *
                         segmap_group_sizze_25651 +
                         sext_i32_i64(local_tid_30779), res_20987);
    
    int64_t gtid_25626;
    
    gtid_25626 = sext_i32_i64(group_tid_30780) * segmap_group_sizze_25651 +
        sext_i32_i64(local_tid_30779) - squot64(sext_i32_i64(group_tid_30780) *
                                                segmap_group_sizze_25651 +
                                                sext_i32_i64(local_tid_30779),
                                                res_20987) * res_20987;
    if (slt64(gtid_25625, N_20967) && slt64(gtid_25626, res_20987)) {
        float x_25654 = ((__global float *) mem_29985)[gtid_25625 * res_20987 +
                                                       gtid_25626];
        float res_25655 = res_21052 + x_25654;
        
        ((__global float *) mem_29989)[gtid_25625 * res_20987 + gtid_25626] =
            res_25655;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25651
}
__kernel void mainzisegmap_25660(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, int32_t n_20972,
                                 int32_t k2p2zq_20985, int64_t res_20987,
                                 int64_t num_groups_25685, __global
                                 unsigned char *binop_p_mem_29982, __global
                                 unsigned char *mem_29989, __global
                                 unsigned char *mem_29992, __global
                                 unsigned char *mem_29996, __global
                                 unsigned char *mem_30038)
{
    #define segmap_group_sizze_25684 (mainzisegmap_group_sizze_25662)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30786;
    int32_t local_tid_30787;
    int64_t group_sizze_30790;
    int32_t wave_sizze_30789;
    int32_t group_tid_30788;
    
    global_tid_30786 = get_global_id(0);
    local_tid_30787 = get_local_id(0);
    group_sizze_30790 = get_local_size(0);
    wave_sizze_30789 = LOCKSTEP_WIDTH;
    group_tid_30788 = get_group_id(0);
    
    int32_t phys_tid_25660;
    
    phys_tid_25660 = global_tid_30786;
    
    int32_t phys_group_id_30791;
    
    phys_group_id_30791 = get_group_id(0);
    for (int32_t i_30792 = 0; i_30792 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968, segmap_group_sizze_25684)) -
                   phys_group_id_30791, sext_i64_i32(num_groups_25685));
         i_30792++) {
        int32_t virt_group_id_30793 = phys_group_id_30791 + i_30792 *
                sext_i64_i32(num_groups_25685);
        int64_t gtid_25659 = sext_i32_i64(virt_group_id_30793) *
                segmap_group_sizze_25684 + sext_i32_i64(local_tid_30787);
        
        if (slt64(gtid_25659, m_20968)) {
            for (int32_t i_29954 = 0; i_29954 < k2p2zq_20985; i_29954++) {
                int64_t i_29894 = sext_i32_i64(i_29954);
                
                for (int32_t i_29953 = 0; i_29953 < k2p2zq_20985; i_29953++) {
                    int64_t i_29898 = sext_i32_i64(i_29953);
                    float res_25693;
                    float redout_29900 = 0.0F;
                    
                    for (int32_t i_29952 = 0; i_29952 < n_20972; i_29952++) {
                        int64_t i_29901 = sext_i32_i64(i_29952);
                        float x_25697 = ((__global float *) mem_29992)[i_29901 *
                                                                       m_20968 +
                                                                       gtid_25659];
                        float x_25698 = ((__global
                                          float *) binop_p_mem_29982)[i_29894 *
                                                                      N_20967 +
                                                                      i_29901];
                        float x_25699 = ((__global float *) mem_29989)[i_29901 *
                                                                       res_20987 +
                                                                       i_29898];
                        float x_25700 = x_25698 * x_25699;
                        bool res_25701;
                        
                        res_25701 = futrts_isnan32(x_25697);
                        
                        float y_25702;
                        
                        if (res_25701) {
                            y_25702 = 0.0F;
                        } else {
                            y_25702 = 1.0F;
                        }
                        
                        float res_25703 = x_25700 * y_25702;
                        float res_25696 = res_25703 + redout_29900;
                        float redout_tmp_30796 = res_25696;
                        
                        redout_29900 = redout_tmp_30796;
                    }
                    res_25693 = redout_29900;
                    ((__global float *) mem_29996)[phys_tid_25660 + (i_29894 *
                                                                     (num_groups_25685 *
                                                                      segmap_group_sizze_25684 *
                                                                      res_20987) +
                                                                     i_29898 *
                                                                     (num_groups_25685 *
                                                                      segmap_group_sizze_25684))] =
                        res_25693;
                }
            }
            for (int64_t i_30797 = 0; i_30797 < res_20987; i_30797++) {
                for (int64_t i_30798 = 0; i_30798 < res_20987; i_30798++) {
                    ((__global float *) mem_30038)[i_30797 * (m_20968 *
                                                              res_20987) +
                                                   i_30798 * m_20968 +
                                                   gtid_25659] = ((__global
                                                                   float *) mem_29996)[phys_tid_25660 +
                                                                                       (i_30797 *
                                                                                        (num_groups_25685 *
                                                                                         segmap_group_sizze_25684 *
                                                                                         res_20987) +
                                                                                        i_30798 *
                                                                                        (num_groups_25685 *
                                                                                         segmap_group_sizze_25684))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25684
}
__kernel void mainzisegmap_25706(__global int *global_failure, int64_t m_20968,
                                 int64_t N_20969, int32_t n_20972,
                                 int32_t k2p2zq_20985, int64_t res_20987,
                                 int64_t num_groups_25862, __global
                                 unsigned char *images_mem_29973, __global
                                 unsigned char *mem_29985, __global
                                 unsigned char *mem_29989, __global
                                 unsigned char *mem_30041, __global
                                 unsigned char *mem_30057)
{
    #define segmap_group_sizze_25861 (mainzisegmap_group_sizze_25709)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30799;
    int32_t local_tid_30800;
    int64_t group_sizze_30803;
    int32_t wave_sizze_30802;
    int32_t group_tid_30801;
    
    global_tid_30799 = get_global_id(0);
    local_tid_30800 = get_local_id(0);
    group_sizze_30803 = get_local_size(0);
    wave_sizze_30802 = LOCKSTEP_WIDTH;
    group_tid_30801 = get_group_id(0);
    
    int32_t phys_tid_25706;
    
    phys_tid_25706 = global_tid_30799;
    
    int32_t phys_group_id_30804;
    
    phys_group_id_30804 = get_group_id(0);
    for (int32_t i_30805 = 0; i_30805 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968 * res_20987,
                                          segmap_group_sizze_25861)) -
                   phys_group_id_30804, sext_i64_i32(num_groups_25862));
         i_30805++) {
        int32_t virt_group_id_30806 = phys_group_id_30804 + i_30805 *
                sext_i64_i32(num_groups_25862);
        int64_t gtid_25704 = squot64(sext_i32_i64(virt_group_id_30806) *
                                     segmap_group_sizze_25861 +
                                     sext_i32_i64(local_tid_30800), res_20987);
        int64_t gtid_25705 = sext_i32_i64(virt_group_id_30806) *
                segmap_group_sizze_25861 + sext_i32_i64(local_tid_30800) -
                squot64(sext_i32_i64(virt_group_id_30806) *
                        segmap_group_sizze_25861 +
                        sext_i32_i64(local_tid_30800), res_20987) * res_20987;
        
        if (slt64(gtid_25704, m_20968) && slt64(gtid_25705, res_20987)) {
            for (int32_t i_29956 = 0; i_29956 < k2p2zq_20985; i_29956++) {
                int64_t i_29904 = sext_i32_i64(i_29956);
                float res_25873;
                float redout_29906 = 0.0F;
                
                for (int32_t i_29955 = 0; i_29955 < n_20972; i_29955++) {
                    int64_t i_29907 = sext_i32_i64(i_29955);
                    float x_25877 = ((__global
                                      float *) images_mem_29973)[gtid_25704 *
                                                                 N_20969 +
                                                                 i_29907];
                    float x_25878 = ((__global float *) mem_29985)[i_29907 *
                                                                   res_20987 +
                                                                   gtid_25705];
                    float x_25879 = ((__global float *) mem_29989)[i_29907 *
                                                                   res_20987 +
                                                                   i_29904];
                    float x_25880 = x_25878 * x_25879;
                    bool res_25881;
                    
                    res_25881 = futrts_isnan32(x_25877);
                    
                    float y_25882;
                    
                    if (res_25881) {
                        y_25882 = 0.0F;
                    } else {
                        y_25882 = 1.0F;
                    }
                    
                    float res_25883 = x_25880 * y_25882;
                    float res_25876 = res_25883 + redout_29906;
                    float redout_tmp_30808 = res_25876;
                    
                    redout_29906 = redout_tmp_30808;
                }
                res_25873 = redout_29906;
                ((__global float *) mem_30041)[phys_tid_25706 + i_29904 *
                                               (num_groups_25862 *
                                                segmap_group_sizze_25861)] =
                    res_25873;
            }
            for (int64_t i_30809 = 0; i_30809 < res_20987; i_30809++) {
                ((__global float *) mem_30057)[i_30809 * (res_20987 * m_20968) +
                                               gtid_25704 * res_20987 +
                                               gtid_25705] = ((__global
                                                               float *) mem_30041)[phys_tid_25706 +
                                                                                   i_30809 *
                                                                                   (num_groups_25862 *
                                                                                    segmap_group_sizze_25861)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25861
}
__kernel void mainzisegmap_25736(__global int *global_failure, int64_t m_20968,
                                 int64_t N_20969, int32_t n_20972,
                                 int64_t res_20987, __global
                                 unsigned char *images_mem_29973, __global
                                 unsigned char *mem_29985, __global
                                 unsigned char *mem_29989, __global
                                 unsigned char *mem_30062)
{
    #define segmap_group_sizze_25887 (mainzisegmap_group_sizze_25740)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30810;
    int32_t local_tid_30811;
    int64_t group_sizze_30814;
    int32_t wave_sizze_30813;
    int32_t group_tid_30812;
    
    global_tid_30810 = get_global_id(0);
    local_tid_30811 = get_local_id(0);
    group_sizze_30814 = get_local_size(0);
    wave_sizze_30813 = LOCKSTEP_WIDTH;
    group_tid_30812 = get_group_id(0);
    
    int32_t phys_tid_25736;
    
    phys_tid_25736 = global_tid_30810;
    
    int64_t gtid_25733;
    
    gtid_25733 = squot64(sext_i32_i64(group_tid_30812) *
                         segmap_group_sizze_25887 +
                         sext_i32_i64(local_tid_30811), res_20987 * res_20987);
    
    int64_t gtid_25734;
    
    gtid_25734 = squot64(sext_i32_i64(group_tid_30812) *
                         segmap_group_sizze_25887 +
                         sext_i32_i64(local_tid_30811) -
                         squot64(sext_i32_i64(group_tid_30812) *
                                 segmap_group_sizze_25887 +
                                 sext_i32_i64(local_tid_30811), res_20987 *
                                 res_20987) * (res_20987 * res_20987),
                         res_20987);
    
    int64_t gtid_25735;
    
    gtid_25735 = sext_i32_i64(group_tid_30812) * segmap_group_sizze_25887 +
        sext_i32_i64(local_tid_30811) - squot64(sext_i32_i64(group_tid_30812) *
                                                segmap_group_sizze_25887 +
                                                sext_i32_i64(local_tid_30811),
                                                res_20987 * res_20987) *
        (res_20987 * res_20987) - squot64(sext_i32_i64(group_tid_30812) *
                                          segmap_group_sizze_25887 +
                                          sext_i32_i64(local_tid_30811) -
                                          squot64(sext_i32_i64(group_tid_30812) *
                                                  segmap_group_sizze_25887 +
                                                  sext_i32_i64(local_tid_30811),
                                                  res_20987 * res_20987) *
                                          (res_20987 * res_20987), res_20987) *
        res_20987;
    if ((slt64(gtid_25733, m_20968) && slt64(gtid_25734, res_20987)) &&
        slt64(gtid_25735, res_20987)) {
        float res_25898;
        float redout_29908 = 0.0F;
        
        for (int32_t i_29957 = 0; i_29957 < n_20972; i_29957++) {
            int64_t i_29909 = sext_i32_i64(i_29957);
            float x_25902 = ((__global float *) images_mem_29973)[gtid_25733 *
                                                                  N_20969 +
                                                                  i_29909];
            float x_25903 = ((__global float *) mem_29985)[i_29909 * res_20987 +
                                                           gtid_25734];
            float x_25904 = ((__global float *) mem_29989)[i_29909 * res_20987 +
                                                           gtid_25735];
            float x_25905 = x_25903 * x_25904;
            bool res_25906;
            
            res_25906 = futrts_isnan32(x_25902);
            
            float y_25907;
            
            if (res_25906) {
                y_25907 = 0.0F;
            } else {
                y_25907 = 1.0F;
            }
            
            float res_25908 = x_25905 * y_25907;
            float res_25901 = res_25908 + redout_29908;
            float redout_tmp_30815 = res_25901;
            
            redout_29908 = redout_tmp_30815;
        }
        res_25898 = redout_29908;
        ((__global float *) mem_30062)[gtid_25733 * (res_20987 * res_20987) +
                                       gtid_25734 * res_20987 + gtid_25735] =
            res_25898;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25887
}
__kernel void mainzisegmap_26240(__global int *global_failure, int64_t m_20968,
                                 int64_t res_20987, int64_t m_21118,
                                 int64_t res_r_ixfn_30155,
                                 int64_t res_r_ixfn_30156,
                                 int64_t res_r_ixfn_30158, __global
                                 unsigned char *res_r_mem_30160, __global
                                 unsigned char *mem_30165)
{
    #define segmap_group_sizze_26863 (mainzisegmap_group_sizze_26244)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30938;
    int32_t local_tid_30939;
    int64_t group_sizze_30942;
    int32_t wave_sizze_30941;
    int32_t group_tid_30940;
    
    global_tid_30938 = get_global_id(0);
    local_tid_30939 = get_local_id(0);
    group_sizze_30942 = get_local_size(0);
    wave_sizze_30941 = LOCKSTEP_WIDTH;
    group_tid_30940 = get_group_id(0);
    
    int32_t phys_tid_26240;
    
    phys_tid_26240 = global_tid_30938;
    
    int64_t gtid_26237;
    
    gtid_26237 = squot64(sext_i32_i64(group_tid_30940) *
                         segmap_group_sizze_26863 +
                         sext_i32_i64(local_tid_30939), res_20987 * res_20987);
    
    int64_t gtid_26238;
    
    gtid_26238 = squot64(sext_i32_i64(group_tid_30940) *
                         segmap_group_sizze_26863 +
                         sext_i32_i64(local_tid_30939) -
                         squot64(sext_i32_i64(group_tid_30940) *
                                 segmap_group_sizze_26863 +
                                 sext_i32_i64(local_tid_30939), res_20987 *
                                 res_20987) * (res_20987 * res_20987),
                         res_20987);
    
    int64_t gtid_26239;
    
    gtid_26239 = sext_i32_i64(group_tid_30940) * segmap_group_sizze_26863 +
        sext_i32_i64(local_tid_30939) - squot64(sext_i32_i64(group_tid_30940) *
                                                segmap_group_sizze_26863 +
                                                sext_i32_i64(local_tid_30939),
                                                res_20987 * res_20987) *
        (res_20987 * res_20987) - squot64(sext_i32_i64(group_tid_30940) *
                                          segmap_group_sizze_26863 +
                                          sext_i32_i64(local_tid_30939) -
                                          squot64(sext_i32_i64(group_tid_30940) *
                                                  segmap_group_sizze_26863 +
                                                  sext_i32_i64(local_tid_30939),
                                                  res_20987 * res_20987) *
                                          (res_20987 * res_20987), res_20987) *
        res_20987;
    if ((slt64(gtid_26237, m_20968) && slt64(gtid_26238, res_20987)) &&
        slt64(gtid_26239, res_20987)) {
        int64_t index_primexp_28738 = m_21118 * gtid_26238;
        int64_t i_26869 = add64(res_20987, gtid_26239);
        int64_t new_index_26870 = i_26869 + index_primexp_28738;
        float res_26871 = ((__global
                            float *) res_r_mem_30160)[res_r_ixfn_30155 +
                                                      (gtid_26237 *
                                                       res_r_ixfn_30156 +
                                                       new_index_26870 *
                                                       res_r_ixfn_30158)];
        
        ((__global float *) mem_30165)[gtid_26237 * (res_20987 * res_20987) +
                                       gtid_26238 * res_20987 + gtid_26239] =
            res_26871;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26863
}
__kernel void mainzisegmap_26459(__global int *global_failure, int64_t m_20968,
                                 int64_t nm_21119, int64_t ctx_param_ext_30118,
                                 int64_t ctx_param_ext_30119,
                                 int64_t ctx_param_ext_30121, __global
                                 unsigned char *mem_param_30123, __global
                                 unsigned char *mem_30143)
{
    #define segmap_group_sizze_26828 (mainzisegmap_group_sizze_26462)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30932;
    int32_t local_tid_30933;
    int64_t group_sizze_30936;
    int32_t wave_sizze_30935;
    int32_t group_tid_30934;
    
    global_tid_30932 = get_global_id(0);
    local_tid_30933 = get_local_id(0);
    group_sizze_30936 = get_local_size(0);
    wave_sizze_30935 = LOCKSTEP_WIDTH;
    group_tid_30934 = get_group_id(0);
    
    int32_t phys_tid_26459;
    
    phys_tid_26459 = global_tid_30932;
    
    int64_t gtid_26457;
    
    gtid_26457 = squot64(sext_i32_i64(group_tid_30934) *
                         segmap_group_sizze_26828 +
                         sext_i32_i64(local_tid_30933), nm_21119);
    
    int64_t gtid_26458;
    
    gtid_26458 = sext_i32_i64(group_tid_30934) * segmap_group_sizze_26828 +
        sext_i32_i64(local_tid_30933) - squot64(sext_i32_i64(group_tid_30934) *
                                                segmap_group_sizze_26828 +
                                                sext_i32_i64(local_tid_30933),
                                                nm_21119) * nm_21119;
    if (slt64(gtid_26457, m_20968) && slt64(gtid_26458, nm_21119)) {
        float write_value_26834 = ((__global float *) mem_30143)[gtid_26457 *
                                                                 nm_21119 +
                                                                 gtid_26458];
        
        if ((sle64(0, gtid_26457) && slt64(gtid_26457, m_20968)) && (sle64(0,
                                                                           gtid_26458) &&
                                                                     slt64(gtid_26458,
                                                                           nm_21119))) {
            ((__global float *) mem_param_30123)[ctx_param_ext_30118 +
                                                 (gtid_26457 *
                                                  ctx_param_ext_30119 +
                                                  gtid_26458 *
                                                  ctx_param_ext_30121)] =
                write_value_26834;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26828
}
__kernel void mainzisegmap_26513(__global int *global_failure, int64_t m_20968,
                                 int32_t k2p2zq_20985, int64_t nm_21119,
                                 int32_t res_21127, int32_t i_26727,
                                 int64_t i_26729, int64_t ctx_param_ext_30118,
                                 int64_t ctx_param_ext_30119,
                                 int64_t ctx_param_ext_30121, __global
                                 unsigned char *mem_param_30123, __global
                                 unsigned char *mem_30139, __global
                                 unsigned char *mem_30143)
{
    #define segmap_group_sizze_26794 (mainzisegmap_group_sizze_26516)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30927;
    int32_t local_tid_30928;
    int64_t group_sizze_30931;
    int32_t wave_sizze_30930;
    int32_t group_tid_30929;
    
    global_tid_30927 = get_global_id(0);
    local_tid_30928 = get_local_id(0);
    group_sizze_30931 = get_local_size(0);
    wave_sizze_30930 = LOCKSTEP_WIDTH;
    group_tid_30929 = get_group_id(0);
    
    int32_t phys_tid_26513;
    
    phys_tid_26513 = global_tid_30927;
    
    int64_t gtid_26511;
    
    gtid_26511 = squot64(sext_i32_i64(group_tid_30929) *
                         segmap_group_sizze_26794 +
                         sext_i32_i64(local_tid_30928), nm_21119);
    
    int64_t gtid_26512;
    
    gtid_26512 = sext_i32_i64(group_tid_30929) * segmap_group_sizze_26794 +
        sext_i32_i64(local_tid_30928) - squot64(sext_i32_i64(group_tid_30929) *
                                                segmap_group_sizze_26794 +
                                                sext_i32_i64(local_tid_30928),
                                                nm_21119) * nm_21119;
    if (slt64(gtid_26511, m_20968) && slt64(gtid_26512, nm_21119)) {
        bool cond_26799 = ((__global bool *) mem_30139)[gtid_26511];
        int32_t res_26801 = sext_i64_i32(gtid_26512);
        int32_t res_26802 = sdiv32(res_26801, res_21127);
        int32_t res_26803 = smod32(res_26801, res_21127);
        float res_26804;
        
        if (cond_26799) {
            int32_t x_26805 = mul32(res_21127, res_26802);
            int32_t i_26806 = add32(res_26803, x_26805);
            int64_t i_26807 = sext_i32_i64(i_26806);
            float res_26808 = ((__global
                                float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_26511 *
                                                           ctx_param_ext_30119 +
                                                           i_26807 *
                                                           ctx_param_ext_30121)];
            
            res_26804 = res_26808;
        } else {
            float v1_26798 = ((__global
                               float *) mem_param_30123)[ctx_param_ext_30118 +
                                                         (gtid_26511 *
                                                          ctx_param_ext_30119 +
                                                          i_26729 *
                                                          ctx_param_ext_30121)];
            int64_t j_26809 = sext_i32_i64(res_26803);
            float x_26810 = ((__global
                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                        (gtid_26511 *
                                                         ctx_param_ext_30119 +
                                                         j_26809 *
                                                         ctx_param_ext_30121)];
            float x_26811 = x_26810 / v1_26798;
            int32_t y_26812 = sub32(k2p2zq_20985, 1);
            bool cond_26813 = slt32(res_26802, y_26812);
            float res_26814;
            
            if (cond_26813) {
                int32_t x_26815 = add32(1, res_26802);
                int32_t x_26816 = mul32(res_21127, x_26815);
                int32_t i_26817 = add32(res_26803, x_26816);
                int64_t i_26818 = sext_i32_i64(i_26817);
                float x_26819 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_26511 *
                                                             ctx_param_ext_30119 +
                                                             i_26818 *
                                                             ctx_param_ext_30121)];
                int32_t i_26820 = add32(i_26727, x_26816);
                int64_t i_26821 = sext_i32_i64(i_26820);
                float x_26822 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_26511 *
                                                             ctx_param_ext_30119 +
                                                             i_26821 *
                                                             ctx_param_ext_30121)];
                float y_26823 = x_26811 * x_26822;
                float res_26824 = x_26819 - y_26823;
                
                res_26814 = res_26824;
            } else {
                res_26814 = x_26811;
            }
            res_26804 = res_26814;
        }
        ((__global float *) mem_30143)[gtid_26511 * nm_21119 + gtid_26512] =
            res_26804;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26794
}
__kernel void mainzisegmap_26581(__global int *global_failure, int64_t m_20968,
                                 int64_t i_26729, int64_t ctx_param_ext_30118,
                                 int64_t ctx_param_ext_30119,
                                 int64_t ctx_param_ext_30121, __global
                                 unsigned char *mem_param_30123, __global
                                 unsigned char *mem_30139)
{
    #define segmap_group_sizze_26778 (mainzisegmap_group_sizze_26583)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30922;
    int32_t local_tid_30923;
    int64_t group_sizze_30926;
    int32_t wave_sizze_30925;
    int32_t group_tid_30924;
    
    global_tid_30922 = get_global_id(0);
    local_tid_30923 = get_local_id(0);
    group_sizze_30926 = get_local_size(0);
    wave_sizze_30925 = LOCKSTEP_WIDTH;
    group_tid_30924 = get_group_id(0);
    
    int32_t phys_tid_26581;
    
    phys_tid_26581 = global_tid_30922;
    
    int64_t gtid_26580;
    
    gtid_26580 = sext_i32_i64(group_tid_30924) * segmap_group_sizze_26778 +
        sext_i32_i64(local_tid_30923);
    if (slt64(gtid_26580, m_20968)) {
        float v1_26783 = ((__global
                           float *) mem_param_30123)[ctx_param_ext_30118 +
                                                     (gtid_26580 *
                                                      ctx_param_ext_30119 +
                                                      i_26729 *
                                                      ctx_param_ext_30121)];
        bool cond_26784 = v1_26783 == 0.0F;
        
        ((__global bool *) mem_30139)[gtid_26580] = cond_26784;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26778
}
__kernel void mainzisegmap_26672(__global int *global_failure, int64_t m_20968,
                                 int64_t res_20987, int64_t m_21118,
                                 int64_t nm_21119, __global
                                 unsigned char *res_mem_30083, __global
                                 unsigned char *mem_30115)
{
    #define segmap_group_sizze_26712 (mainzisegmap_group_sizze_26675)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30889;
    int32_t local_tid_30890;
    int64_t group_sizze_30893;
    int32_t wave_sizze_30892;
    int32_t group_tid_30891;
    
    global_tid_30889 = get_global_id(0);
    local_tid_30890 = get_local_id(0);
    group_sizze_30893 = get_local_size(0);
    wave_sizze_30892 = LOCKSTEP_WIDTH;
    group_tid_30891 = get_group_id(0);
    
    int32_t phys_tid_26672;
    
    phys_tid_26672 = global_tid_30889;
    
    int64_t gtid_26670;
    
    gtid_26670 = squot64(sext_i32_i64(group_tid_30891) *
                         segmap_group_sizze_26712 +
                         sext_i32_i64(local_tid_30890), nm_21119);
    
    int64_t gtid_26671;
    
    gtid_26671 = sext_i32_i64(group_tid_30891) * segmap_group_sizze_26712 +
        sext_i32_i64(local_tid_30890) - squot64(sext_i32_i64(group_tid_30891) *
                                                segmap_group_sizze_26712 +
                                                sext_i32_i64(local_tid_30890),
                                                nm_21119) * nm_21119;
    if (slt64(gtid_26670, m_20968) && slt64(gtid_26671, nm_21119)) {
        int64_t res_26717 = sdiv64(gtid_26671, m_21118);
        int64_t res_26718 = smod64(gtid_26671, m_21118);
        bool cond_26719 = slt64(res_26718, res_20987);
        float res_26720;
        
        if (cond_26719) {
            float res_26721 = ((__global float *) res_mem_30083)[gtid_26670 *
                                                                 (res_20987 *
                                                                  res_20987) +
                                                                 res_26717 *
                                                                 res_20987 +
                                                                 res_26718];
            
            res_26720 = res_26721;
        } else {
            int64_t y_26722 = add64(res_20987, res_26717);
            bool cond_26723 = res_26718 == y_26722;
            float res_26724;
            
            if (cond_26723) {
                res_26724 = 1.0F;
            } else {
                res_26724 = 0.0F;
            }
            res_26720 = res_26724;
        }
        ((__global float *) mem_30115)[gtid_26670 * nm_21119 + gtid_26671] =
            res_26720;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26712
}
__kernel void mainzisegmap_26878(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, int32_t n_20972,
                                 int32_t k2p2zq_20985, int64_t res_20987,
                                 int64_t num_groups_26899, __global
                                 unsigned char *binop_p_mem_29982, __global
                                 unsigned char *mem_30169, __global
                                 unsigned char *mem_30172, __global
                                 unsigned char *mem_30187)
{
    #define segmap_group_sizze_26898 (mainzisegmap_group_sizze_26880)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30946;
    int32_t local_tid_30947;
    int64_t group_sizze_30950;
    int32_t wave_sizze_30949;
    int32_t group_tid_30948;
    
    global_tid_30946 = get_global_id(0);
    local_tid_30947 = get_local_id(0);
    group_sizze_30950 = get_local_size(0);
    wave_sizze_30949 = LOCKSTEP_WIDTH;
    group_tid_30948 = get_group_id(0);
    
    int32_t phys_tid_26878;
    
    phys_tid_26878 = global_tid_30946;
    
    int32_t phys_group_id_30951;
    
    phys_group_id_30951 = get_group_id(0);
    for (int32_t i_30952 = 0; i_30952 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968, segmap_group_sizze_26898)) -
                   phys_group_id_30951, sext_i64_i32(num_groups_26899));
         i_30952++) {
        int32_t virt_group_id_30953 = phys_group_id_30951 + i_30952 *
                sext_i64_i32(num_groups_26899);
        int64_t gtid_26877 = sext_i32_i64(virt_group_id_30953) *
                segmap_group_sizze_26898 + sext_i32_i64(local_tid_30947);
        
        if (slt64(gtid_26877, m_20968)) {
            for (int32_t i_29959 = 0; i_29959 < k2p2zq_20985; i_29959++) {
                int64_t i_29912 = sext_i32_i64(i_29959);
                float res_26905;
                float redout_29914 = 0.0F;
                
                for (int32_t i_29958 = 0; i_29958 < n_20972; i_29958++) {
                    int64_t i_29915 = sext_i32_i64(i_29958);
                    float x_26910 = ((__global float *) mem_30169)[i_29915 *
                                                                   m_20968 +
                                                                   gtid_26877];
                    bool res_26911;
                    
                    res_26911 = futrts_isnan32(x_26910);
                    
                    float res_26912;
                    
                    if (res_26911) {
                        res_26912 = 0.0F;
                    } else {
                        float x_26909 = ((__global
                                          float *) binop_p_mem_29982)[i_29912 *
                                                                      N_20967 +
                                                                      i_29915];
                        float res_26913 = x_26909 * x_26910;
                        
                        res_26912 = res_26913;
                    }
                    
                    float res_26908 = res_26912 + redout_29914;
                    float redout_tmp_30955 = res_26908;
                    
                    redout_29914 = redout_tmp_30955;
                }
                res_26905 = redout_29914;
                ((__global float *) mem_30172)[phys_tid_26878 + i_29912 *
                                               (num_groups_26899 *
                                                segmap_group_sizze_26898)] =
                    res_26905;
            }
            for (int64_t i_30956 = 0; i_30956 < res_20987; i_30956++) {
                ((__global float *) mem_30187)[i_30956 * m_20968 + gtid_26877] =
                    ((__global float *) mem_30172)[phys_tid_26878 + i_30956 *
                                                   (num_groups_26899 *
                                                    segmap_group_sizze_26898)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_26898
}
__kernel void mainzisegmap_27019(__global int *global_failure, int64_t m_20968,
                                 int32_t k2p2zq_20985, int64_t res_20987,
                                 int64_t num_groups_27039, __global
                                 unsigned char *mem_30261, __global
                                 unsigned char *mem_30264, __global
                                 unsigned char *mem_30267, __global
                                 unsigned char *mem_30282)
{
    #define segmap_group_sizze_27038 (mainzisegmap_group_sizze_27021)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31034;
    int32_t local_tid_31035;
    int64_t group_sizze_31038;
    int32_t wave_sizze_31037;
    int32_t group_tid_31036;
    
    global_tid_31034 = get_global_id(0);
    local_tid_31035 = get_local_id(0);
    group_sizze_31038 = get_local_size(0);
    wave_sizze_31037 = LOCKSTEP_WIDTH;
    group_tid_31036 = get_group_id(0);
    
    int32_t phys_tid_27019;
    
    phys_tid_27019 = global_tid_31034;
    
    int32_t phys_group_id_31039;
    
    phys_group_id_31039 = get_group_id(0);
    for (int32_t i_31040 = 0; i_31040 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968, segmap_group_sizze_27038)) -
                   phys_group_id_31039, sext_i64_i32(num_groups_27039));
         i_31040++) {
        int32_t virt_group_id_31041 = phys_group_id_31039 + i_31040 *
                sext_i64_i32(num_groups_27039);
        int64_t gtid_27018 = sext_i32_i64(virt_group_id_31041) *
                segmap_group_sizze_27038 + sext_i32_i64(local_tid_31035);
        
        if (slt64(gtid_27018, m_20968)) {
            for (int32_t i_29961 = 0; i_29961 < k2p2zq_20985; i_29961++) {
                int64_t i_29922 = sext_i32_i64(i_29961);
                float res_27046;
                float redout_29924 = 0.0F;
                
                for (int32_t i_29960 = 0; i_29960 < k2p2zq_20985; i_29960++) {
                    int64_t i_29925 = sext_i32_i64(i_29960);
                    float x_27050 = ((__global float *) mem_30264)[i_29925 *
                                                                   m_20968 +
                                                                   gtid_27018];
                    float x_27051 = ((__global float *) mem_30261)[i_29922 *
                                                                   (m_20968 *
                                                                    res_20987) +
                                                                   i_29925 *
                                                                   m_20968 +
                                                                   gtid_27018];
                    float res_27052 = x_27050 * x_27051;
                    float res_27049 = res_27052 + redout_29924;
                    float redout_tmp_31043 = res_27049;
                    
                    redout_29924 = redout_tmp_31043;
                }
                res_27046 = redout_29924;
                ((__global float *) mem_30267)[phys_tid_27019 + i_29922 *
                                               (num_groups_27039 *
                                                segmap_group_sizze_27038)] =
                    res_27046;
            }
            for (int64_t i_31044 = 0; i_31044 < res_20987; i_31044++) {
                ((__global float *) mem_30282)[i_31044 * m_20968 + gtid_27018] =
                    ((__global float *) mem_30267)[phys_tid_27019 + i_31044 *
                                                   (num_groups_27039 *
                                                    segmap_group_sizze_27038)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27038
}
__kernel void mainzisegmap_27055(__global int *global_failure, int64_t m_20968,
                                 int32_t k2p2zq_20985, int64_t res_20987,
                                 __global unsigned char *res_mem_30257, __global
                                 unsigned char *mem_30286, __global
                                 unsigned char *mem_30290)
{
    #define segmap_group_sizze_27114 (mainzisegmap_group_sizze_27058)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31045;
    int32_t local_tid_31046;
    int64_t group_sizze_31049;
    int32_t wave_sizze_31048;
    int32_t group_tid_31047;
    
    global_tid_31045 = get_global_id(0);
    local_tid_31046 = get_local_id(0);
    group_sizze_31049 = get_local_size(0);
    wave_sizze_31048 = LOCKSTEP_WIDTH;
    group_tid_31047 = get_group_id(0);
    
    int32_t phys_tid_27055;
    
    phys_tid_27055 = global_tid_31045;
    
    int64_t gtid_27053;
    
    gtid_27053 = squot64(sext_i32_i64(group_tid_31047) *
                         segmap_group_sizze_27114 +
                         sext_i32_i64(local_tid_31046), res_20987);
    
    int64_t gtid_27054;
    
    gtid_27054 = sext_i32_i64(group_tid_31047) * segmap_group_sizze_27114 +
        sext_i32_i64(local_tid_31046) - squot64(sext_i32_i64(group_tid_31047) *
                                                segmap_group_sizze_27114 +
                                                sext_i32_i64(local_tid_31046),
                                                res_20987) * res_20987;
    if (slt64(gtid_27053, m_20968) && slt64(gtid_27054, res_20987)) {
        float res_27123;
        float redout_29926 = 0.0F;
        
        for (int32_t i_29962 = 0; i_29962 < k2p2zq_20985; i_29962++) {
            int64_t i_29927 = sext_i32_i64(i_29962);
            float x_27127 = ((__global float *) res_mem_30257)[gtid_27053 *
                                                               res_20987 +
                                                               i_29927];
            float x_27128 = ((__global float *) mem_30286)[i_29927 *
                                                           (res_20987 *
                                                            m_20968) +
                                                           gtid_27053 *
                                                           res_20987 +
                                                           gtid_27054];
            float res_27129 = x_27127 * x_27128;
            float res_27126 = res_27129 + redout_29926;
            float redout_tmp_31050 = res_27126;
            
            redout_29926 = redout_tmp_31050;
        }
        res_27123 = redout_29926;
        ((__global float *) mem_30290)[gtid_27053 * res_20987 + gtid_27054] =
            res_27123;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27114
}
__kernel void mainzisegmap_27151(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, int32_t k2p2zq_20985,
                                 int64_t res_20987, int64_t num_groups_27170,
                                 __global unsigned char *mem_29989, __global
                                 unsigned char *mem_30303, __global
                                 unsigned char *mem_30306, __global
                                 unsigned char *mem_30321)
{
    #define segmap_group_sizze_27169 (mainzisegmap_group_sizze_27153)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31115;
    int32_t local_tid_31116;
    int64_t group_sizze_31119;
    int32_t wave_sizze_31118;
    int32_t group_tid_31117;
    
    global_tid_31115 = get_global_id(0);
    local_tid_31116 = get_local_id(0);
    group_sizze_31119 = get_local_size(0);
    wave_sizze_31118 = LOCKSTEP_WIDTH;
    group_tid_31117 = get_group_id(0);
    
    int32_t phys_tid_27151;
    
    phys_tid_27151 = global_tid_31115;
    
    int32_t phys_group_id_31120;
    
    phys_group_id_31120 = get_group_id(0);
    for (int32_t i_31121 = 0; i_31121 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968, segmap_group_sizze_27169)) -
                   phys_group_id_31120, sext_i64_i32(num_groups_27170));
         i_31121++) {
        int32_t virt_group_id_31122 = phys_group_id_31120 + i_31121 *
                sext_i64_i32(num_groups_27170);
        int64_t gtid_27150 = sext_i32_i64(virt_group_id_31122) *
                segmap_group_sizze_27169 + sext_i32_i64(local_tid_31116);
        
        if (slt64(gtid_27150, m_20968)) {
            for (int64_t i_29930 = 0; i_29930 < N_20967; i_29930++) {
                float res_27176;
                float redout_29932 = 0.0F;
                
                for (int32_t i_29963 = 0; i_29963 < k2p2zq_20985; i_29963++) {
                    int64_t i_29933 = sext_i32_i64(i_29963);
                    float x_27180 = ((__global float *) mem_30303)[i_29933 *
                                                                   m_20968 +
                                                                   gtid_27150];
                    float x_27181 = ((__global float *) mem_29989)[i_29930 *
                                                                   res_20987 +
                                                                   i_29933];
                    float res_27182 = x_27180 * x_27181;
                    float res_27179 = res_27182 + redout_29932;
                    float redout_tmp_31124 = res_27179;
                    
                    redout_29932 = redout_tmp_31124;
                }
                res_27176 = redout_29932;
                ((__global float *) mem_30306)[phys_tid_27151 + i_29930 *
                                               (num_groups_27170 *
                                                segmap_group_sizze_27169)] =
                    res_27176;
            }
            for (int64_t i_31125 = 0; i_31125 < N_20967; i_31125++) {
                ((__global float *) mem_30321)[i_31125 * m_20968 + gtid_27150] =
                    ((__global float *) mem_30306)[phys_tid_27151 + i_31125 *
                                                   (num_groups_27170 *
                                                    segmap_group_sizze_27169)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27169
}
__kernel void mainzisegmap_27431(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, __global
                                 unsigned char *mem_30397, __global
                                 unsigned char *mem_30400, __global
                                 unsigned char *mem_30423, __global
                                 unsigned char *mem_30426)
{
    #define segmap_group_sizze_27597 (mainzisegmap_group_sizze_27434)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31298;
    int32_t local_tid_31299;
    int64_t group_sizze_31302;
    int32_t wave_sizze_31301;
    int32_t group_tid_31300;
    
    global_tid_31298 = get_global_id(0);
    local_tid_31299 = get_local_id(0);
    group_sizze_31302 = get_local_size(0);
    wave_sizze_31301 = LOCKSTEP_WIDTH;
    group_tid_31300 = get_group_id(0);
    
    int32_t phys_tid_27431;
    
    phys_tid_27431 = global_tid_31298;
    
    int64_t gtid_27429;
    
    gtid_27429 = squot64(sext_i32_i64(group_tid_31300) *
                         segmap_group_sizze_27597 +
                         sext_i32_i64(local_tid_31299), N_20967);
    
    int64_t gtid_27430;
    
    gtid_27430 = sext_i32_i64(group_tid_31300) * segmap_group_sizze_27597 +
        sext_i32_i64(local_tid_31299) - squot64(sext_i32_i64(group_tid_31300) *
                                                segmap_group_sizze_27597 +
                                                sext_i32_i64(local_tid_31299),
                                                N_20967) * N_20967;
    if (slt64(gtid_27429, m_20968) && slt64(gtid_27430, N_20967)) {
        float x_27605 = ((__global float *) mem_30426)[gtid_27429 * N_20967 +
                                                       gtid_27430];
        int32_t index_primexp_28746 = sext_i64_i32(gtid_27430);
        bool res_27608;
        
        res_27608 = futrts_isnan32(x_27605);
        
        bool res_27609 = !res_27608;
        int64_t res_27610;
        
        if (res_27609) {
            int64_t x_27606 = ((__global int64_t *) mem_30423)[gtid_27429 *
                                                               N_20967 +
                                                               gtid_27430];
            int64_t res_27611 = sub64(x_27606, 1);
            
            res_27610 = res_27611;
        } else {
            res_27610 = -1;
        }
        if ((sle64(0, gtid_27429) && slt64(gtid_27429, m_20968)) && (sle64(0,
                                                                           res_27610) &&
                                                                     slt64(res_27610,
                                                                           N_20967))) {
            ((__global int32_t *) mem_30400)[gtid_27429 * N_20967 + res_27610] =
                index_primexp_28746;
        }
        if ((sle64(0, gtid_27429) && slt64(gtid_27429, m_20968)) && (sle64(0,
                                                                           res_27610) &&
                                                                     slt64(res_27610,
                                                                           N_20967))) {
            ((__global float *) mem_30397)[gtid_27429 * N_20967 + res_27610] =
                x_27605;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27597
}
__kernel void mainzisegmap_27507(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, int64_t i_21234, __global
                                 unsigned char *mem_30423, __global
                                 unsigned char *mem_30429)
{
    #define segmap_group_sizze_27561 (mainzisegmap_group_sizze_27509)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31293;
    int32_t local_tid_31294;
    int64_t group_sizze_31297;
    int32_t wave_sizze_31296;
    int32_t group_tid_31295;
    
    global_tid_31293 = get_global_id(0);
    local_tid_31294 = get_local_id(0);
    group_sizze_31297 = get_local_size(0);
    wave_sizze_31296 = LOCKSTEP_WIDTH;
    group_tid_31295 = get_group_id(0);
    
    int32_t phys_tid_27507;
    
    phys_tid_27507 = global_tid_31293;
    
    int64_t gtid_27506;
    
    gtid_27506 = sext_i32_i64(group_tid_31295) * segmap_group_sizze_27561 +
        sext_i32_i64(local_tid_31294);
    if (slt64(gtid_27506, m_20968)) {
        int64_t res_27565 = ((__global int64_t *) mem_30423)[gtid_27506 *
                                                             N_20967 + i_21234];
        int32_t res_27566 = sext_i64_i32(res_27565);
        
        ((__global int32_t *) mem_30429)[gtid_27506] = res_27566;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27561
}
__kernel void mainzisegmap_27758(__global int *global_failure, int64_t m_20968,
                                 float hfrac_20974, int32_t k2p2_20983, __global
                                 unsigned char *mem_30499, __global
                                 unsigned char *mem_30502, __global
                                 unsigned char *mem_30505, __global
                                 unsigned char *mem_30507)
{
    #define segmap_group_sizze_27843 (mainzisegmap_group_sizze_27760)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31453;
    int32_t local_tid_31454;
    int64_t group_sizze_31457;
    int32_t wave_sizze_31456;
    int32_t group_tid_31455;
    
    global_tid_31453 = get_global_id(0);
    local_tid_31454 = get_local_id(0);
    group_sizze_31457 = get_local_size(0);
    wave_sizze_31456 = LOCKSTEP_WIDTH;
    group_tid_31455 = get_group_id(0);
    
    int32_t phys_tid_27758;
    
    phys_tid_27758 = global_tid_31453;
    
    int64_t gtid_27757;
    
    gtid_27757 = sext_i32_i64(group_tid_31455) * segmap_group_sizze_27843 +
        sext_i32_i64(local_tid_31454);
    if (slt64(gtid_27757, m_20968)) {
        int32_t res_27847 = ((__global int32_t *) mem_30499)[gtid_27757];
        float res_27848 = ((__global float *) mem_30502)[gtid_27757];
        int32_t r32_arg_27849 = sub32(res_27847, k2p2_20983);
        float res_27850 = sitofp_i32_f32(r32_arg_27849);
        float sqrt_arg_27851 = res_27848 / res_27850;
        float res_27852;
        
        res_27852 = futrts_sqrt32(sqrt_arg_27851);
        
        float res_27853 = sitofp_i32_f32(res_27847);
        float t32_arg_27854 = hfrac_20974 * res_27853;
        int32_t res_27855 = fptosi_f32_i32(t32_arg_27854);
        
        ((__global int32_t *) mem_30505)[gtid_27757] = res_27855;
        ((__global float *) mem_30507)[gtid_27757] = res_27852;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_27843
}
__kernel void mainzisegmap_28029(__global int *global_failure, float lam_20975,
                                 int64_t iota32_arg_21351, int32_t x_21356,
                                 float res_21359, __global
                                 unsigned char *mappingindices_mem_29972,
                                 __global unsigned char *mem_30565, __global
                                 unsigned char *mem_30567)
{
    #define segmap_group_sizze_28048 (mainzisegmap_group_sizze_28031)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31563;
    int32_t local_tid_31564;
    int64_t group_sizze_31567;
    int32_t wave_sizze_31566;
    int32_t group_tid_31565;
    
    global_tid_31563 = get_global_id(0);
    local_tid_31564 = get_local_id(0);
    group_sizze_31567 = get_local_size(0);
    wave_sizze_31566 = LOCKSTEP_WIDTH;
    group_tid_31565 = get_group_id(0);
    
    int32_t phys_tid_28029;
    
    phys_tid_28029 = global_tid_31563;
    
    int64_t gtid_28028;
    
    gtid_28028 = sext_i32_i64(group_tid_31565) * segmap_group_sizze_28048 +
        sext_i32_i64(local_tid_31564);
    if (slt64(gtid_28028, iota32_arg_21351)) {
        int32_t res_28053 = sext_i64_i32(gtid_28028);
        int32_t t_28054 = add32(x_21356, res_28053);
        int32_t i_28055 = sub32(t_28054, 1);
        int64_t i_28056 = sext_i32_i64(i_28055);
        int32_t time_28057 = ((__global
                               int32_t *) mappingindices_mem_29972)[i_28056];
        float res_28058 = sitofp_i32_f32(time_28057);
        float logplus_arg_28059 = res_28058 / res_21359;
        bool cond_28060 = 2.7182817F < logplus_arg_28059;
        float res_28061;
        
        if (cond_28060) {
            float res_28062;
            
            res_28062 = futrts_log32(logplus_arg_28059);
            res_28061 = res_28062;
        } else {
            res_28061 = 1.0F;
        }
        
        float res_28063;
        
        res_28063 = futrts_sqrt32(res_28061);
        
        float res_28064 = lam_20975 * res_28063;
        
        ((__global int32_t *) mem_30565)[gtid_28028] = res_28053;
        ((__global float *) mem_30567)[gtid_28028] = res_28064;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28048
}
__kernel void mainzisegmap_28390(__global int *global_failure, int64_t N_20967,
                                 int64_t m_20968, int32_t n_20972, __global
                                 unsigned char *res_mem_30433, __global
                                 unsigned char *res_mem_30512, __global
                                 unsigned char *mem_30581, __global
                                 unsigned char *mem_30588, __global
                                 unsigned char *mem_30590, __global
                                 unsigned char *mem_30597)
{
    #define segmap_group_sizze_28652 (mainzisegmap_group_sizze_28392)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31758;
    int32_t local_tid_31759;
    int64_t group_sizze_31762;
    int32_t wave_sizze_31761;
    int32_t group_tid_31760;
    
    global_tid_31758 = get_global_id(0);
    local_tid_31759 = get_local_id(0);
    group_sizze_31762 = get_local_size(0);
    wave_sizze_31761 = LOCKSTEP_WIDTH;
    group_tid_31760 = get_group_id(0);
    
    int32_t phys_tid_28390;
    
    phys_tid_28390 = global_tid_31758;
    
    int64_t gtid_28389;
    
    gtid_28389 = sext_i32_i64(group_tid_31760) * segmap_group_sizze_28652 +
        sext_i32_i64(local_tid_31759);
    if (slt64(gtid_28389, m_20968)) {
        int32_t x_28656 = ((__global int32_t *) res_mem_30512)[gtid_28389];
        int32_t y_28658 = ((__global int32_t *) mem_30581)[gtid_28389];
        bool acc0_28660 = ((__global bool *) mem_30588)[gtid_28389];
        bool x_28665 = acc0_28660 && acc0_28660;
        int32_t res_28669;
        
        if (acc0_28660) {
            int32_t acc0_28661 = ((__global int32_t *) mem_30590)[gtid_28389];
            
            res_28669 = acc0_28661;
        } else {
            res_28669 = -1;
        }
        
        bool cond_28675 = !x_28665;
        int32_t fst_breakzq_28676;
        
        if (cond_28675) {
            fst_breakzq_28676 = -1;
        } else {
            bool cond_28677 = slt32(res_28669, y_28658);
            int32_t res_28678;
            
            if (cond_28677) {
                int32_t i_28679 = add32(x_28656, res_28669);
                int64_t i_28680 = sext_i32_i64(i_28679);
                int32_t x_28681 = ((__global
                                    int32_t *) res_mem_30433)[gtid_28389 *
                                                              N_20967 +
                                                              i_28680];
                int32_t res_28682 = sub32(x_28681, n_20972);
                
                res_28678 = res_28682;
            } else {
                res_28678 = -1;
            }
            fst_breakzq_28676 = res_28678;
        }
        
        bool cond_28683 = sle32(x_28656, 5);
        bool res_28684 = sle32(y_28658, 5);
        bool x_28685 = !cond_28683;
        bool y_28686 = res_28684 && x_28685;
        bool cond_28687 = cond_28683 || y_28686;
        int32_t fst_breakzq_28688;
        
        if (cond_28687) {
            fst_breakzq_28688 = -2;
        } else {
            fst_breakzq_28688 = fst_breakzq_28676;
        }
        ((__global int32_t *) mem_30597)[gtid_28389] = fst_breakzq_28688;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28652
}
__kernel void mainzisegmap_28529(__global int *global_failure, int64_t m_20968,
                                 int64_t num_groups_28552, __global
                                 unsigned char *res_mem_30431, __global
                                 unsigned char *res_mem_30512, __global
                                 unsigned char *res_mem_30513, __global
                                 unsigned char *mem_30579, __global
                                 unsigned char *mem_30581)
{
    #define segmap_group_sizze_28551 (mainzisegmap_group_sizze_28531)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31596;
    int32_t local_tid_31597;
    int64_t group_sizze_31600;
    int32_t wave_sizze_31599;
    int32_t group_tid_31598;
    
    global_tid_31596 = get_global_id(0);
    local_tid_31597 = get_local_id(0);
    group_sizze_31600 = get_local_size(0);
    wave_sizze_31599 = LOCKSTEP_WIDTH;
    group_tid_31598 = get_group_id(0);
    
    int32_t phys_tid_28529;
    
    phys_tid_28529 = global_tid_31596;
    
    int32_t phys_group_id_31601;
    
    phys_group_id_31601 = get_group_id(0);
    for (int32_t i_31602 = 0; i_31602 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968, segmap_group_sizze_28551)) -
                   phys_group_id_31601, sext_i64_i32(num_groups_28552));
         i_31602++) {
        int32_t virt_group_id_31603 = phys_group_id_31601 + i_31602 *
                sext_i64_i32(num_groups_28552);
        int64_t gtid_28528 = sext_i32_i64(virt_group_id_31603) *
                segmap_group_sizze_28551 + sext_i32_i64(local_tid_31597);
        
        if (slt64(gtid_28528, m_20968)) {
            int32_t x_28558 = ((__global int32_t *) res_mem_30431)[gtid_28528];
            int32_t x_28559 = ((__global int32_t *) res_mem_30512)[gtid_28528];
            float x_28560 = ((__global float *) res_mem_30513)[gtid_28528];
            int32_t y_28561 = sub32(x_28558, x_28559);
            float res_28562 = sitofp_i32_f32(x_28559);
            float res_28563;
            
            res_28563 = futrts_sqrt32(res_28562);
            
            float y_28564 = x_28560 * res_28563;
            
            ((__global float *) mem_30579)[gtid_28528] = y_28564;
            ((__global int32_t *) mem_30581)[gtid_28528] = y_28561;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_28551
}
__kernel void mainzisegmap_intragroup_25996(__global int *global_failure,
                                            int failure_is_an_option, __global
                                            int64_t *global_failure_args,
                                            __local volatile
                                            int64_t *mem_30107_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30097_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_30087_backing_aligned_2,
                                            int32_t k2p2zq_20985,
                                            int64_t res_20987, int64_t m_21118,
                                            int64_t nm_21119, int32_t res_21127,
                                            int64_t computed_group_sizze_25937,
                                            __global
                                            unsigned char *res_mem_30083,
                                            __global unsigned char *mem_30111)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30107_backing_2 = (__local volatile
                                                           char *) mem_30107_backing_aligned_0;
    __local volatile char *restrict mem_30097_backing_1 = (__local volatile
                                                           char *) mem_30097_backing_aligned_1;
    __local volatile char *restrict mem_30087_backing_0 = (__local volatile
                                                           char *) mem_30087_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_30879;
    int32_t local_tid_30880;
    int64_t group_sizze_30883;
    int32_t wave_sizze_30882;
    int32_t group_tid_30881;
    
    global_tid_30879 = get_global_id(0);
    local_tid_30880 = get_local_id(0);
    group_sizze_30883 = get_local_size(0);
    wave_sizze_30882 = LOCKSTEP_WIDTH;
    group_tid_30881 = get_group_id(0);
    
    int32_t phys_tid_25996;
    
    phys_tid_25996 = group_tid_30881;
    
    int32_t ltid_pre_30884;
    
    ltid_pre_30884 = squot32(local_tid_30880, sext_i64_i32(res_20987));
    
    int32_t ltid_pre_30885;
    
    ltid_pre_30885 = local_tid_30880 - squot32(local_tid_30880,
                                               sext_i64_i32(res_20987)) *
        sext_i64_i32(res_20987);
    
    int32_t ltid_pre_30886;
    
    ltid_pre_30886 = local_tid_30880;
    
    int64_t gtid_25935;
    
    gtid_25935 = sext_i32_i64(group_tid_30881);
    
    __local char *mem_30087;
    
    mem_30087 = (__local char *) mem_30087_backing_0;
    
    int64_t gtid_25938 = sext_i32_i64(ltid_pre_30886);
    int32_t phys_tid_25939 = local_tid_30880;
    
    if (slt64(gtid_25938, nm_21119)) {
        int64_t res_26135 = sdiv64(gtid_25938, m_21118);
        int64_t res_26136 = smod64(gtid_25938, m_21118);
        bool cond_26137 = slt64(res_26136, res_20987);
        float res_26138;
        
        if (cond_26137) {
            float res_26139 = ((__global float *) res_mem_30083)[gtid_25935 *
                                                                 (res_20987 *
                                                                  res_20987) +
                                                                 res_26135 *
                                                                 res_20987 +
                                                                 res_26136];
            
            res_26138 = res_26139;
        } else {
            int64_t y_26140 = add64(res_20987, res_26135);
            bool cond_26141 = res_26136 == y_26140;
            float res_26142;
            
            if (cond_26141) {
                res_26142 = 1.0F;
            } else {
                res_26142 = 0.0F;
            }
            res_26138 = res_26142;
        }
        ((__local float *) mem_30087)[gtid_25938] = res_26138;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30097;
    
    mem_30097 = (__local char *) mem_30097_backing_1;
    for (int32_t i_26144 = 0; i_26144 < k2p2zq_20985; i_26144++) {
        int64_t i_26146 = sext_i32_i64(i_26144);
        bool x_26147 = sle64(0, i_26146);
        bool y_26148 = slt64(i_26146, nm_21119);
        bool bounds_check_26149 = x_26147 && y_26148;
        bool index_certs_26150;
        
        if (!bounds_check_26149) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                    global_failure_args[0] = i_26146;
                    global_failure_args[1] = nm_21119;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_26151 = ((__local float *) mem_30087)[i_26146];
        bool cond_26152 = v1_26151 == 0.0F;
        int64_t gtid_25949 = sext_i32_i64(ltid_pre_30886);
        int32_t phys_tid_25950 = local_tid_30880;
        
        if (slt64(gtid_25949, nm_21119)) {
            int32_t res_26155 = sext_i64_i32(gtid_25949);
            int32_t res_26156 = sdiv32(res_26155, res_21127);
            int32_t res_26157 = smod32(res_26155, res_21127);
            float res_26158;
            
            if (cond_26152) {
                int32_t x_26159 = mul32(res_21127, res_26156);
                int32_t i_26160 = add32(res_26157, x_26159);
                int64_t i_26161 = sext_i32_i64(i_26160);
                float res_26162 = ((__local float *) mem_30087)[i_26161];
                
                res_26158 = res_26162;
            } else {
                int64_t j_26163 = sext_i32_i64(res_26157);
                float x_26164 = ((__local float *) mem_30087)[j_26163];
                float x_26165 = x_26164 / v1_26151;
                int32_t y_26166 = sub32(k2p2zq_20985, 1);
                bool cond_26167 = slt32(res_26156, y_26166);
                float res_26168;
                
                if (cond_26167) {
                    int32_t x_26169 = add32(1, res_26156);
                    int32_t x_26170 = mul32(res_21127, x_26169);
                    int32_t i_26171 = add32(res_26157, x_26170);
                    int64_t i_26172 = sext_i32_i64(i_26171);
                    float x_26173 = ((__local float *) mem_30087)[i_26172];
                    int32_t i_26174 = add32(i_26144, x_26170);
                    int64_t i_26175 = sext_i32_i64(i_26174);
                    float x_26176 = ((__local float *) mem_30087)[i_26175];
                    float y_26177 = x_26165 * x_26176;
                    float res_26178 = x_26173 - y_26177;
                    
                    res_26168 = res_26178;
                } else {
                    res_26168 = x_26165;
                }
                res_26158 = res_26168;
            }
            ((__local float *) mem_30097)[gtid_25949] = res_26158;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_25976 = sext_i32_i64(ltid_pre_30886);
        int32_t phys_tid_25977 = local_tid_30880;
        
        if (slt64(write_i_25976, nm_21119)) {
            float write_value_26181 = ((__local
                                        float *) mem_30097)[write_i_25976];
            
            if (sle64(0, write_i_25976) && slt64(write_i_25976, nm_21119)) {
                ((__local float *) mem_30087)[write_i_25976] =
                    write_value_26181;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_30107;
    
    mem_30107 = (__local char *) mem_30107_backing_2;
    
    int64_t gtid_25979 = sext_i32_i64(ltid_pre_30884);
    int64_t gtid_25980 = sext_i32_i64(ltid_pre_30885);
    int32_t phys_tid_25981 = local_tid_30880;
    
    if (slt64(gtid_25979, res_20987) && slt64(gtid_25980, res_20987)) {
        int64_t index_primexp_28721 = m_21118 * gtid_25979;
        int64_t i_26188 = add64(res_20987, gtid_25980);
        int64_t new_index_26189 = i_26188 + index_primexp_28721;
        float res_26190 = ((__local float *) mem_30087)[new_index_26189];
        
        ((__local float *) mem_30107)[gtid_25979 * res_20987 + gtid_25980] =
            res_26190;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_30888 = 0; i_30888 < sdiv_up64(res_20987 * res_20987 -
                                                  sext_i32_i64(local_tid_30880),
                                                  computed_group_sizze_25937);
         i_30888++) {
        ((__global float *) mem_30111)[gtid_25935 * (res_20987 * res_20987) +
                                       squot64(i_30888 *
                                               computed_group_sizze_25937 +
                                               sext_i32_i64(local_tid_30880),
                                               res_20987) * res_20987 +
                                       (i_30888 * computed_group_sizze_25937 +
                                        sext_i32_i64(local_tid_30880) -
                                        squot64(i_30888 *
                                                computed_group_sizze_25937 +
                                                sext_i32_i64(local_tid_30880),
                                                res_20987) * res_20987)] =
            ((__local float *) mem_30107)[squot64(i_30888 *
                                                  computed_group_sizze_25937 +
                                                  sext_i32_i64(local_tid_30880),
                                                  res_20987) * res_20987 +
                                          (i_30888 *
                                           computed_group_sizze_25937 +
                                           sext_i32_i64(local_tid_30880) -
                                           squot64(i_30888 *
                                                   computed_group_sizze_25937 +
                                                   sext_i32_i64(local_tid_30880),
                                                   res_20987) * res_20987)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_26340(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30132_backing_aligned_0,
                                            int64_t m_20968,
                                            int32_t k2p2zq_20985,
                                            int64_t nm_21119, int32_t res_21127,
                                            int32_t i_26727, int64_t i_26729,
                                            int64_t ctx_param_ext_30118,
                                            int64_t ctx_param_ext_30119,
                                            int64_t ctx_param_ext_30121,
                                            __global
                                            unsigned char *mem_param_30123,
                                            __global unsigned char *mem_30128,
                                            __global unsigned char *mem_30136)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30132_backing_0 = (__local volatile
                                                           char *) mem_30132_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30915;
    int32_t local_tid_30916;
    int64_t group_sizze_30919;
    int32_t wave_sizze_30918;
    int32_t group_tid_30917;
    
    global_tid_30915 = get_global_id(0);
    local_tid_30916 = get_local_id(0);
    group_sizze_30919 = get_local_size(0);
    wave_sizze_30918 = LOCKSTEP_WIDTH;
    group_tid_30917 = get_group_id(0);
    
    int32_t phys_tid_26340;
    
    phys_tid_26340 = group_tid_30917;
    
    int32_t ltid_pre_30920;
    
    ltid_pre_30920 = local_tid_30916;
    
    int64_t gtid_26308;
    
    gtid_26308 = sext_i32_i64(group_tid_30917);
    
    float v1_26746 = ((__global float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_26308 *
                                                           ctx_param_ext_30119 +
                                                           i_26729 *
                                                           ctx_param_ext_30121)];
    bool cond_26747 = v1_26746 == 0.0F;
    __local char *mem_30132;
    
    mem_30132 = (__local char *) mem_30132_backing_0;
    
    int64_t gtid_26311 = sext_i32_i64(ltid_pre_30920);
    int32_t phys_tid_26312 = local_tid_30916;
    
    if (slt64(gtid_26311, nm_21119)) {
        int32_t res_26750 = sext_i64_i32(gtid_26311);
        int32_t res_26751 = sdiv32(res_26750, res_21127);
        int32_t res_26752 = smod32(res_26750, res_21127);
        float res_26753;
        
        if (cond_26747) {
            int32_t x_26754 = mul32(res_21127, res_26751);
            int32_t i_26755 = add32(res_26752, x_26754);
            int64_t i_26756 = sext_i32_i64(i_26755);
            float res_26757 = ((__global
                                float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_26308 *
                                                           ctx_param_ext_30119 +
                                                           i_26756 *
                                                           ctx_param_ext_30121)];
            
            res_26753 = res_26757;
        } else {
            int64_t j_26758 = sext_i32_i64(res_26752);
            float x_26759 = ((__global
                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                        (gtid_26308 *
                                                         ctx_param_ext_30119 +
                                                         j_26758 *
                                                         ctx_param_ext_30121)];
            float x_26760 = x_26759 / v1_26746;
            int32_t y_26761 = sub32(k2p2zq_20985, 1);
            bool cond_26762 = slt32(res_26751, y_26761);
            float res_26763;
            
            if (cond_26762) {
                int32_t x_26764 = add32(1, res_26751);
                int32_t x_26765 = mul32(res_21127, x_26764);
                int32_t i_26766 = add32(res_26752, x_26765);
                int64_t i_26767 = sext_i32_i64(i_26766);
                float x_26768 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_26308 *
                                                             ctx_param_ext_30119 +
                                                             i_26767 *
                                                             ctx_param_ext_30121)];
                int32_t i_26769 = add32(i_26727, x_26765);
                int64_t i_26770 = sext_i32_i64(i_26769);
                float x_26771 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_26308 *
                                                             ctx_param_ext_30119 +
                                                             i_26770 *
                                                             ctx_param_ext_30121)];
                float y_26772 = x_26760 * x_26771;
                float res_26773 = x_26768 - y_26772;
                
                res_26763 = res_26773;
            } else {
                res_26763 = x_26760;
            }
            res_26753 = res_26763;
        }
        ((__local float *) mem_30132)[gtid_26311] = res_26753;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_26338 = sext_i32_i64(ltid_pre_30920);
    int32_t phys_tid_26339 = local_tid_30916;
    
    if (slt64(write_i_26338, nm_21119)) {
        float write_value_26776 = ((__local float *) mem_30132)[write_i_26338];
        
        if (sle64(0, write_i_26338) && slt64(write_i_26338, nm_21119)) {
            ((__global float *) mem_30128)[gtid_26308 + write_i_26338 *
                                           m_20968] = write_value_26776;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_30916 == 0) {
        for (int64_t i_30921 = 0; i_30921 < nm_21119; i_30921++) {
            ((__global float *) mem_30136)[gtid_26308 * nm_21119 + i_30921] =
                ((__global float *) mem_30128)[gtid_26308 + i_30921 * m_20968];
        }
    }
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_27314(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30410_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30408_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_30406_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_30404_backing_aligned_3,
                                            int64_t N_20967, int64_t N_20969,
                                            int64_t i_21234, __global
                                            unsigned char *images_mem_29973,
                                            __global
                                            unsigned char *res_mem_30394,
                                            __global unsigned char *mem_30413,
                                            __global unsigned char *mem_30416,
                                            __global unsigned char *mem_30419)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30410_backing_3 = (__local volatile
                                                           char *) mem_30410_backing_aligned_0;
    __local volatile char *restrict mem_30408_backing_2 = (__local volatile
                                                           char *) mem_30408_backing_aligned_1;
    __local volatile char *restrict mem_30406_backing_1 = (__local volatile
                                                           char *) mem_30406_backing_aligned_2;
    __local volatile char *restrict mem_30404_backing_0 = (__local volatile
                                                           char *) mem_30404_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31220;
    int32_t local_tid_31221;
    int64_t group_sizze_31224;
    int32_t wave_sizze_31223;
    int32_t group_tid_31222;
    
    global_tid_31220 = get_global_id(0);
    local_tid_31221 = get_local_id(0);
    group_sizze_31224 = get_local_size(0);
    wave_sizze_31223 = LOCKSTEP_WIDTH;
    group_tid_31222 = get_group_id(0);
    
    int32_t phys_tid_27314;
    
    phys_tid_27314 = group_tid_31222;
    
    int32_t ltid_pre_31225;
    
    ltid_pre_31225 = local_tid_31221;
    
    int64_t gtid_27307;
    
    gtid_27307 = sext_i32_i64(group_tid_31222);
    
    __local char *mem_30404;
    
    mem_30404 = (__local char *) mem_30404_backing_0;
    
    __local char *mem_30406;
    
    mem_30406 = (__local char *) mem_30406_backing_1;
    
    int64_t gtid_27310 = sext_i32_i64(ltid_pre_31225);
    int32_t phys_tid_27311 = local_tid_31221;
    
    if (slt64(gtid_27310, N_20967)) {
        float x_27403 = ((__global float *) images_mem_29973)[gtid_27307 *
                                                              N_20969 +
                                                              gtid_27310];
        bool res_27405;
        
        res_27405 = futrts_isnan32(x_27403);
        
        bool cond_27406 = !res_27405;
        float res_27407;
        
        if (cond_27406) {
            float x_27404 = ((__global float *) res_mem_30394)[gtid_27307 *
                                                               N_20967 +
                                                               gtid_27310];
            float res_27408 = x_27403 - x_27404;
            
            res_27407 = res_27408;
        } else {
            res_27407 = NAN;
        }
        
        bool res_27409;
        
        res_27409 = futrts_isnan32(res_27407);
        
        bool res_27410 = !res_27409;
        int64_t res_27411 = btoi_bool_i64(res_27410);
        
        ((__local int64_t *) mem_30404)[gtid_27310] = res_27411;
        ((__local float *) mem_30406)[gtid_27310] = res_27407;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_31226;
    
    dims_flat_31226 = N_20967;
    
    int64_t x_27400;
    int64_t x_27401;
    int64_t x_31228;
    int64_t x_31229;
    bool ltid_in_bounds_31231;
    
    ltid_in_bounds_31231 = slt64(sext_i32_i64(local_tid_31221), N_20967);
    
    int32_t skip_threads_31232;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31231) {
            x_27401 = ((volatile __local
                        int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)];
            if ((local_tid_31221 - squot32(local_tid_31221, 32) * 32) == 0) {
                x_27400 = x_27401;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31232 = 1;
        while (slt32(skip_threads_31232, 32)) {
            if (sle32(skip_threads_31232, local_tid_31221 -
                      squot32(local_tid_31221, 32) * 32) &&
                ltid_in_bounds_31231) {
                // read operands
                {
                    x_27400 = ((volatile __local
                                int64_t *) mem_30404)[sext_i32_i64(local_tid_31221) -
                                                      sext_i32_i64(skip_threads_31232)];
                }
                // perform operation
                {
                    bool inactive_31233 =
                         slt64(srem64(sext_i32_i64(local_tid_31221), N_20967),
                               sext_i32_i64(local_tid_31221) -
                               sext_i32_i64(local_tid_31221 -
                               skip_threads_31232));
                    
                    if (inactive_31233) {
                        x_27400 = x_27401;
                    }
                    if (!inactive_31233) {
                        int64_t res_27402 = add64(x_27400, x_27401);
                        
                        x_27400 = res_27402;
                    }
                }
            }
            if (sle32(wave_sizze_31223, skip_threads_31232)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31232, local_tid_31221 -
                      squot32(local_tid_31221, 32) * 32) &&
                ltid_in_bounds_31231) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)] =
                        x_27400;
                    x_27401 = x_27400;
                }
            }
            if (sle32(wave_sizze_31223, skip_threads_31232)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31232 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31221 - squot32(local_tid_31221, 32) * 32) == 31 &&
            ltid_in_bounds_31231) {
            ((volatile __local
              int64_t *) mem_30404)[sext_i32_i64(squot32(local_tid_31221,
                                                         32))] = x_27400;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31234;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31221, 32) == 0 && ltid_in_bounds_31231) {
                x_31229 = ((volatile __local
                            int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)];
                if ((local_tid_31221 - squot32(local_tid_31221, 32) * 32) ==
                    0) {
                    x_31228 = x_31229;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31234 = 1;
            while (slt32(skip_threads_31234, 32)) {
                if (sle32(skip_threads_31234, local_tid_31221 -
                          squot32(local_tid_31221, 32) * 32) &&
                    (squot32(local_tid_31221, 32) == 0 &&
                     ltid_in_bounds_31231)) {
                    // read operands
                    {
                        x_31228 = ((volatile __local
                                    int64_t *) mem_30404)[sext_i32_i64(local_tid_31221) -
                                                          sext_i32_i64(skip_threads_31234)];
                    }
                    // perform operation
                    {
                        bool inactive_31235 =
                             slt64(srem64(sext_i32_i64(local_tid_31221 * 32 +
                                          32 - 1), N_20967),
                                   sext_i32_i64(local_tid_31221 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_31221 -
                                                 skip_threads_31234) * 32 + 32 -
                                   1));
                        
                        if (inactive_31235) {
                            x_31228 = x_31229;
                        }
                        if (!inactive_31235) {
                            int64_t res_31230 = add64(x_31228, x_31229);
                            
                            x_31228 = res_31230;
                        }
                    }
                }
                if (sle32(wave_sizze_31223, skip_threads_31234)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31234, local_tid_31221 -
                          squot32(local_tid_31221, 32) * 32) &&
                    (squot32(local_tid_31221, 32) == 0 &&
                     ltid_in_bounds_31231)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)] =
                            x_31228;
                        x_31229 = x_31228;
                    }
                }
                if (sle32(wave_sizze_31223, skip_threads_31234)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31234 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31221, 32) == 0 || !ltid_in_bounds_31231)) {
            // read operands
            {
                x_27401 = x_27400;
                x_27400 = ((__local
                            int64_t *) mem_30404)[sext_i32_i64(squot32(local_tid_31221,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_31236 =
                     slt64(srem64(sext_i32_i64(local_tid_31221), N_20967),
                           sext_i32_i64(local_tid_31221) -
                           sext_i32_i64(squot32(local_tid_31221, 32) * 32 - 1));
                
                if (inactive_31236) {
                    x_27400 = x_27401;
                }
                if (!inactive_31236) {
                    int64_t res_27402 = add64(x_27400, x_27401);
                    
                    x_27400 = res_27402;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)] =
                    x_27400;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31221, 32) == 0) {
            ((__local int64_t *) mem_30404)[sext_i32_i64(local_tid_31221)] =
                x_27401;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_27412 = ((__local int64_t *) mem_30404)[i_21234];
    int32_t res_27413 = sext_i64_i32(res_27412);
    __local char *mem_30408;
    
    mem_30408 = (__local char *) mem_30408_backing_2;
    ((__local float *) mem_30408)[sext_i32_i64(local_tid_31221)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30410;
    
    mem_30410 = (__local char *) mem_30410_backing_3;
    ((__local int32_t *) mem_30410)[sext_i32_i64(local_tid_31221)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_27312 = sext_i32_i64(ltid_pre_31225);
    int32_t phys_tid_27313 = local_tid_31221;
    
    if (slt64(write_i_27312, N_20967)) {
        float x_27418 = ((__local float *) mem_30406)[write_i_27312];
        int32_t index_primexp_28743 = sext_i64_i32(write_i_27312);
        bool res_27421;
        
        res_27421 = futrts_isnan32(x_27418);
        
        bool res_27422 = !res_27421;
        int64_t res_27423;
        
        if (res_27422) {
            int64_t x_27419 = ((__local int64_t *) mem_30404)[write_i_27312];
            int64_t res_27424 = sub64(x_27419, 1);
            
            res_27423 = res_27424;
        } else {
            res_27423 = -1;
        }
        if (sle64(0, res_27423) && slt64(res_27423, N_20967)) {
            ((__local int32_t *) mem_30410)[res_27423] = index_primexp_28743;
        }
        if (sle64(0, res_27423) && slt64(res_27423, N_20967)) {
            ((__local float *) mem_30408)[res_27423] = x_27418;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_31221 == 0) {
        ((__global int32_t *) mem_30413)[gtid_27307] = res_27413;
    }
    ((__global float *) mem_30416)[gtid_27307 * N_20967 +
                                   sext_i32_i64(local_tid_31221)] = ((__local
                                                                      float *) mem_30408)[sext_i32_i64(local_tid_31221)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_30419)[gtid_27307 * N_20967 +
                                     sext_i32_i64(local_tid_31221)] = ((__local
                                                                        int32_t *) mem_30410)[sext_i32_i64(local_tid_31221)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainzisegmap_intragroup_27654(__global int *global_failure,
                                            __local volatile
                                            int64_t *red_arr_mem_31329_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_31325_backing_aligned_1,
                                            int64_t N_20967, int64_t N_20969,
                                            float hfrac_20974,
                                            int64_t res_20981,
                                            int32_t k2p2_20983, __global
                                            unsigned char *images_mem_29973,
                                            __global
                                            unsigned char *res_mem_30432,
                                            __global unsigned char *mem_30492,
                                            __global unsigned char *mem_30494,
                                            __global unsigned char *mem_30496)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31329_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31329_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31325_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31325_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31319;
    int32_t local_tid_31320;
    int64_t group_sizze_31323;
    int32_t wave_sizze_31322;
    int32_t group_tid_31321;
    
    global_tid_31319 = get_global_id(0);
    local_tid_31320 = get_local_id(0);
    group_sizze_31323 = get_local_size(0);
    wave_sizze_31322 = LOCKSTEP_WIDTH;
    group_tid_31321 = get_group_id(0);
    
    int32_t phys_tid_27654;
    
    phys_tid_27654 = group_tid_31321;
    
    int32_t ltid_pre_31324;
    
    ltid_pre_31324 = local_tid_31320;
    
    int64_t gtid_27647;
    
    gtid_27647 = sext_i32_i64(group_tid_31321);
    
    int32_t res_27731;
    int64_t gtid_27650 = sext_i32_i64(ltid_pre_31324);
    int32_t phys_tid_27651 = local_tid_31320;
    __local char *red_arr_mem_31325;
    
    red_arr_mem_31325 = (__local char *) red_arr_mem_31325_backing_0;
    if (slt64(gtid_27650, res_20981)) {
        float x_27735 = ((__global float *) images_mem_29973)[gtid_27647 *
                                                              N_20969 +
                                                              gtid_27650];
        bool res_27736;
        
        res_27736 = futrts_isnan32(x_27735);
        
        bool cond_27737 = !res_27736;
        int32_t res_27738 = btoi_bool_i32(cond_27737);
        
        ((__local int32_t *) red_arr_mem_31325)[gtid_27650] = res_27738;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31327;
    int32_t skip_waves_31328;
    
    skip_waves_31328 = 1;
    
    int32_t x_27732;
    int32_t x_27733;
    
    offset_31327 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31320, sext_i64_i32(res_20981))) {
            x_27732 = ((__local
                        int32_t *) red_arr_mem_31325)[sext_i32_i64(local_tid_31320 +
                                                      offset_31327)];
        }
    }
    offset_31327 = 1;
    while (slt32(offset_31327, wave_sizze_31322)) {
        if (slt32(local_tid_31320 + offset_31327, sext_i64_i32(res_20981)) &&
            ((local_tid_31320 - squot32(local_tid_31320, wave_sizze_31322) *
              wave_sizze_31322) & (2 * offset_31327 - 1)) == 0) {
            // read array element
            {
                x_27733 = ((volatile __local
                            int32_t *) red_arr_mem_31325)[sext_i32_i64(local_tid_31320 +
                                                          offset_31327)];
            }
            // apply reduction operation
            {
                int32_t res_27734 = add32(x_27732, x_27733);
                
                x_27732 = res_27734;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_31325)[sext_i32_i64(local_tid_31320)] =
                    x_27732;
            }
        }
        offset_31327 *= 2;
    }
    while (slt32(skip_waves_31328, squot32(sext_i64_i32(res_20981) +
                                           wave_sizze_31322 - 1,
                                           wave_sizze_31322))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31327 = skip_waves_31328 * wave_sizze_31322;
        if (slt32(local_tid_31320 + offset_31327, sext_i64_i32(res_20981)) &&
            ((local_tid_31320 - squot32(local_tid_31320, wave_sizze_31322) *
              wave_sizze_31322) == 0 && (squot32(local_tid_31320,
                                                 wave_sizze_31322) & (2 *
                                                                      skip_waves_31328 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_27733 = ((__local
                            int32_t *) red_arr_mem_31325)[sext_i32_i64(local_tid_31320 +
                                                          offset_31327)];
            }
            // apply reduction operation
            {
                int32_t res_27734 = add32(x_27732, x_27733);
                
                x_27732 = res_27734;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_31325)[sext_i32_i64(local_tid_31320)] =
                    x_27732;
            }
        }
        skip_waves_31328 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_27731 = ((__local int32_t *) red_arr_mem_31325)[0];
    
    float res_27739;
    int64_t gtid_27652 = sext_i32_i64(ltid_pre_31324);
    int32_t phys_tid_27653 = local_tid_31320;
    __local char *red_arr_mem_31329;
    
    red_arr_mem_31329 = (__local char *) red_arr_mem_31329_backing_1;
    if (slt64(gtid_27652, res_20981)) {
        int32_t index_primexp_28751 = sext_i64_i32(gtid_27652);
        bool cond_27744 = slt32(index_primexp_28751, res_27731);
        float res_27745;
        
        if (cond_27744) {
            int64_t i_27746 = sext_i32_i64(index_primexp_28751);
            float res_27747 = ((__global float *) res_mem_30432)[gtid_27647 *
                                                                 N_20967 +
                                                                 i_27746];
            
            res_27745 = res_27747;
        } else {
            res_27745 = 0.0F;
        }
        
        float res_27748 = res_27745 * res_27745;
        
        ((__local float *) red_arr_mem_31329)[gtid_27652] = res_27748;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31331;
    int32_t skip_waves_31332;
    
    skip_waves_31332 = 1;
    
    float x_27740;
    float x_27741;
    
    offset_31331 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31320, sext_i64_i32(res_20981))) {
            x_27740 = ((__local
                        float *) red_arr_mem_31329)[sext_i32_i64(local_tid_31320 +
                                                    offset_31331)];
        }
    }
    offset_31331 = 1;
    while (slt32(offset_31331, wave_sizze_31322)) {
        if (slt32(local_tid_31320 + offset_31331, sext_i64_i32(res_20981)) &&
            ((local_tid_31320 - squot32(local_tid_31320, wave_sizze_31322) *
              wave_sizze_31322) & (2 * offset_31331 - 1)) == 0) {
            // read array element
            {
                x_27741 = ((volatile __local
                            float *) red_arr_mem_31329)[sext_i32_i64(local_tid_31320 +
                                                        offset_31331)];
            }
            // apply reduction operation
            {
                float res_27742 = x_27740 + x_27741;
                
                x_27740 = res_27742;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_31329)[sext_i32_i64(local_tid_31320)] =
                    x_27740;
            }
        }
        offset_31331 *= 2;
    }
    while (slt32(skip_waves_31332, squot32(sext_i64_i32(res_20981) +
                                           wave_sizze_31322 - 1,
                                           wave_sizze_31322))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31331 = skip_waves_31332 * wave_sizze_31322;
        if (slt32(local_tid_31320 + offset_31331, sext_i64_i32(res_20981)) &&
            ((local_tid_31320 - squot32(local_tid_31320, wave_sizze_31322) *
              wave_sizze_31322) == 0 && (squot32(local_tid_31320,
                                                 wave_sizze_31322) & (2 *
                                                                      skip_waves_31332 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_27741 = ((__local
                            float *) red_arr_mem_31329)[sext_i32_i64(local_tid_31320 +
                                                        offset_31331)];
            }
            // apply reduction operation
            {
                float res_27742 = x_27740 + x_27741;
                
                x_27740 = res_27742;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_31329)[sext_i32_i64(local_tid_31320)] =
                    x_27740;
            }
        }
        skip_waves_31332 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_27739 = ((__local float *) red_arr_mem_31329)[0];
    
    int32_t r32_arg_27749 = sub32(res_27731, k2p2_20983);
    float res_27750 = sitofp_i32_f32(r32_arg_27749);
    float sqrt_arg_27751 = res_27739 / res_27750;
    float res_27752;
    
    res_27752 = futrts_sqrt32(sqrt_arg_27751);
    
    float res_27753 = sitofp_i32_f32(res_27731);
    float t32_arg_27754 = hfrac_20974 * res_27753;
    int32_t res_27755 = fptosi_f32_i32(t32_arg_27754);
    
    if (local_tid_31320 == 0) {
        ((__global int32_t *) mem_30492)[gtid_27647] = res_27755;
    }
    if (local_tid_31320 == 0) {
        ((__global int32_t *) mem_30494)[gtid_27647] = res_27731;
    }
    if (local_tid_31320 == 0) {
        ((__global float *) mem_30496)[gtid_27647] = res_27752;
    }
    
  error_4:
    return;
}
__kernel void mainzisegmap_intragroup_28074(__global int *global_failure,
                                            __local volatile
                                            int64_t *red_arr_mem_31592_backing_aligned_0,
                                            __local volatile
                                            int64_t *red_arr_mem_31590_backing_aligned_1,
                                            __local volatile
                                            int64_t *red_arr_mem_31588_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_30571_backing_aligned_3,
                                            int64_t N_20967, int32_t n_20972,
                                            int64_t iota32_arg_21351, __global
                                            unsigned char *res_mem_30431,
                                            __global
                                            unsigned char *res_mem_30432,
                                            __global
                                            unsigned char *res_mem_30433,
                                            __global
                                            unsigned char *res_mem_30511,
                                            __global
                                            unsigned char *res_mem_30512,
                                            __global
                                            unsigned char *res_mem_30513,
                                            __global
                                            unsigned char *res_mem_30562,
                                            __global unsigned char *mem_30567,
                                            __global unsigned char *mem_30574,
                                            __global unsigned char *mem_30576)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31592_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_31592_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31590_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31590_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31588_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31588_backing_aligned_2;
    __local volatile char *restrict mem_30571_backing_0 = (__local volatile
                                                           char *) mem_30571_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31571;
    int32_t local_tid_31572;
    int64_t group_sizze_31575;
    int32_t wave_sizze_31574;
    int32_t group_tid_31573;
    
    global_tid_31571 = get_global_id(0);
    local_tid_31572 = get_local_id(0);
    group_sizze_31575 = get_local_size(0);
    wave_sizze_31574 = LOCKSTEP_WIDTH;
    group_tid_31573 = get_group_id(0);
    
    int32_t phys_tid_28074;
    
    phys_tid_28074 = group_tid_31573;
    
    int32_t ltid_pre_31576;
    
    ltid_pre_31576 = local_tid_31572;
    
    int64_t gtid_28067;
    
    gtid_28067 = sext_i32_i64(group_tid_31573);
    
    int32_t x_28287;
    
    x_28287 = ((__global int32_t *) res_mem_30431)[gtid_28067];
    
    int32_t x_28288 = ((__global int32_t *) res_mem_30512)[gtid_28067];
    float x_28289 = ((__global float *) res_mem_30513)[gtid_28067];
    int32_t x_28290 = ((__global int32_t *) res_mem_30511)[gtid_28067];
    float x_28291 = ((__global float *) res_mem_30562)[gtid_28067];
    int32_t y_28294 = sub32(x_28287, x_28288);
    float res_28295 = sitofp_i32_f32(x_28288);
    float res_28296;
    
    res_28296 = futrts_sqrt32(res_28295);
    
    float y_28297 = x_28289 * res_28296;
    __local char *mem_30571;
    
    mem_30571 = (__local char *) mem_30571_backing_0;
    
    int64_t gtid_28070 = sext_i32_i64(ltid_pre_31576);
    int32_t phys_tid_28071 = local_tid_31572;
    
    if (slt64(gtid_28070, iota32_arg_21351)) {
        int32_t index_primexp_28764 = sext_i64_i32(gtid_28070);
        bool cond_28310 = sle32(y_28294, index_primexp_28764);
        float res_28311;
        
        if (cond_28310) {
            res_28311 = 0.0F;
        } else {
            bool cond_28312 = index_primexp_28764 == 0;
            float res_28313;
            
            if (cond_28312) {
                res_28313 = x_28291;
            } else {
                int32_t x_28314 = sub32(x_28288, x_28290);
                int32_t i_28315 = add32(x_28314, index_primexp_28764);
                int64_t i_28316 = sext_i32_i64(i_28315);
                float negate_arg_28317 = ((__global
                                           float *) res_mem_30432)[gtid_28067 *
                                                                   N_20967 +
                                                                   i_28316];
                float x_28318 = 0.0F - negate_arg_28317;
                int32_t i_28319 = add32(x_28288, index_primexp_28764);
                int64_t i_28320 = sext_i32_i64(i_28319);
                float y_28321 = ((__global float *) res_mem_30432)[gtid_28067 *
                                                                   N_20967 +
                                                                   i_28320];
                float res_28322 = x_28318 + y_28321;
                
                res_28313 = res_28322;
            }
            res_28311 = res_28313;
        }
        ((__local float *) mem_30571)[gtid_28070] = res_28311;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_31577;
    
    dims_flat_31577 = iota32_arg_21351;
    
    float x_28306;
    float x_28307;
    float x_31579;
    float x_31580;
    bool ltid_in_bounds_31582;
    
    ltid_in_bounds_31582 = slt64(sext_i32_i64(local_tid_31572),
                                 iota32_arg_21351);
    
    int32_t skip_threads_31583;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31582) {
            x_28307 = ((volatile __local
                        float *) mem_30571)[sext_i32_i64(local_tid_31572)];
            if ((local_tid_31572 - squot32(local_tid_31572, 32) * 32) == 0) {
                x_28306 = x_28307;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31583 = 1;
        while (slt32(skip_threads_31583, 32)) {
            if (sle32(skip_threads_31583, local_tid_31572 -
                      squot32(local_tid_31572, 32) * 32) &&
                ltid_in_bounds_31582) {
                // read operands
                {
                    x_28306 = ((volatile __local
                                float *) mem_30571)[sext_i32_i64(local_tid_31572) -
                                                    sext_i32_i64(skip_threads_31583)];
                }
                // perform operation
                {
                    bool inactive_31584 =
                         slt64(srem64(sext_i32_i64(local_tid_31572),
                                      iota32_arg_21351),
                               sext_i32_i64(local_tid_31572) -
                               sext_i32_i64(local_tid_31572 -
                               skip_threads_31583));
                    
                    if (inactive_31584) {
                        x_28306 = x_28307;
                    }
                    if (!inactive_31584) {
                        float res_28308 = x_28306 + x_28307;
                        
                        x_28306 = res_28308;
                    }
                }
            }
            if (sle32(wave_sizze_31574, skip_threads_31583)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31583, local_tid_31572 -
                      squot32(local_tid_31572, 32) * 32) &&
                ltid_in_bounds_31582) {
                // write result
                {
                    ((volatile __local
                      float *) mem_30571)[sext_i32_i64(local_tid_31572)] =
                        x_28306;
                    x_28307 = x_28306;
                }
            }
            if (sle32(wave_sizze_31574, skip_threads_31583)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31583 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31572 - squot32(local_tid_31572, 32) * 32) == 31 &&
            ltid_in_bounds_31582) {
            ((volatile __local
              float *) mem_30571)[sext_i32_i64(squot32(local_tid_31572, 32))] =
                x_28306;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31585;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31572, 32) == 0 && ltid_in_bounds_31582) {
                x_31580 = ((volatile __local
                            float *) mem_30571)[sext_i32_i64(local_tid_31572)];
                if ((local_tid_31572 - squot32(local_tid_31572, 32) * 32) ==
                    0) {
                    x_31579 = x_31580;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31585 = 1;
            while (slt32(skip_threads_31585, 32)) {
                if (sle32(skip_threads_31585, local_tid_31572 -
                          squot32(local_tid_31572, 32) * 32) &&
                    (squot32(local_tid_31572, 32) == 0 &&
                     ltid_in_bounds_31582)) {
                    // read operands
                    {
                        x_31579 = ((volatile __local
                                    float *) mem_30571)[sext_i32_i64(local_tid_31572) -
                                                        sext_i32_i64(skip_threads_31585)];
                    }
                    // perform operation
                    {
                        bool inactive_31586 =
                             slt64(srem64(sext_i32_i64(local_tid_31572 * 32 +
                                          32 - 1), iota32_arg_21351),
                                   sext_i32_i64(local_tid_31572 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_31572 -
                                                 skip_threads_31585) * 32 + 32 -
                                   1));
                        
                        if (inactive_31586) {
                            x_31579 = x_31580;
                        }
                        if (!inactive_31586) {
                            float res_31581 = x_31579 + x_31580;
                            
                            x_31579 = res_31581;
                        }
                    }
                }
                if (sle32(wave_sizze_31574, skip_threads_31585)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31585, local_tid_31572 -
                          squot32(local_tid_31572, 32) * 32) &&
                    (squot32(local_tid_31572, 32) == 0 &&
                     ltid_in_bounds_31582)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_30571)[sext_i32_i64(local_tid_31572)] =
                            x_31579;
                        x_31580 = x_31579;
                    }
                }
                if (sle32(wave_sizze_31574, skip_threads_31585)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31585 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31572, 32) == 0 || !ltid_in_bounds_31582)) {
            // read operands
            {
                x_28307 = x_28306;
                x_28306 = ((__local
                            float *) mem_30571)[sext_i32_i64(squot32(local_tid_31572,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_31587 =
                     slt64(srem64(sext_i32_i64(local_tid_31572),
                                  iota32_arg_21351),
                           sext_i32_i64(local_tid_31572) -
                           sext_i32_i64(squot32(local_tid_31572, 32) * 32 - 1));
                
                if (inactive_31587) {
                    x_28306 = x_28307;
                }
                if (!inactive_31587) {
                    float res_28308 = x_28306 + x_28307;
                    
                    x_28306 = res_28308;
                }
            }
            // write final result
            {
                ((__local float *) mem_30571)[sext_i32_i64(local_tid_31572)] =
                    x_28306;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31572, 32) == 0) {
            ((__local float *) mem_30571)[sext_i32_i64(local_tid_31572)] =
                x_28307;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    bool acc0_28328;
    int32_t acc0_28329;
    float acc0_28330;
    int64_t gtid_28072 = sext_i32_i64(ltid_pre_31576);
    int32_t phys_tid_28073 = local_tid_31572;
    __local char *red_arr_mem_31588;
    
    red_arr_mem_31588 = (__local char *) red_arr_mem_31588_backing_1;
    
    __local char *red_arr_mem_31590;
    
    red_arr_mem_31590 = (__local char *) red_arr_mem_31590_backing_2;
    
    __local char *red_arr_mem_31592;
    
    red_arr_mem_31592 = (__local char *) red_arr_mem_31592_backing_3;
    if (slt64(gtid_28072, iota32_arg_21351)) {
        float x_28345 = ((__local float *) mem_30571)[gtid_28072];
        float x_28346 = ((__global float *) mem_30567)[gtid_28072];
        int32_t index_primexp_28767 = sext_i64_i32(gtid_28072);
        float res_28349 = x_28345 / y_28297;
        bool cond_28350 = slt32(index_primexp_28767, y_28294);
        bool res_28351;
        
        res_28351 = futrts_isnan32(res_28349);
        
        bool res_28352 = !res_28351;
        bool x_28353 = cond_28350 && res_28352;
        float res_28354 = (float) fabs(res_28349);
        bool res_28355 = x_28346 < res_28354;
        bool x_28356 = x_28353 && res_28355;
        float res_28357;
        
        if (cond_28350) {
            res_28357 = res_28349;
        } else {
            res_28357 = 0.0F;
        }
        ((__local bool *) red_arr_mem_31588)[gtid_28072] = x_28356;
        ((__local int32_t *) red_arr_mem_31590)[gtid_28072] =
            index_primexp_28767;
        ((__local float *) red_arr_mem_31592)[gtid_28072] = res_28357;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31594;
    int32_t skip_waves_31595;
    
    skip_waves_31595 = 1;
    
    bool x_28331;
    int32_t x_28332;
    float x_28333;
    bool x_28334;
    int32_t x_28335;
    float x_28336;
    
    offset_31594 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31572, sext_i64_i32(iota32_arg_21351))) {
            x_28331 = ((__local
                        bool *) red_arr_mem_31588)[sext_i32_i64(local_tid_31572 +
                                                   offset_31594)];
            x_28332 = ((__local
                        int32_t *) red_arr_mem_31590)[sext_i32_i64(local_tid_31572 +
                                                      offset_31594)];
            x_28333 = ((__local
                        float *) red_arr_mem_31592)[sext_i32_i64(local_tid_31572 +
                                                    offset_31594)];
        }
    }
    offset_31594 = 1;
    while (slt32(offset_31594, wave_sizze_31574)) {
        if (slt32(local_tid_31572 + offset_31594,
                  sext_i64_i32(iota32_arg_21351)) && ((local_tid_31572 -
                                                       squot32(local_tid_31572,
                                                               wave_sizze_31574) *
                                                       wave_sizze_31574) & (2 *
                                                                            offset_31594 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_28334 = ((volatile __local
                            bool *) red_arr_mem_31588)[sext_i32_i64(local_tid_31572 +
                                                       offset_31594)];
                x_28335 = ((volatile __local
                            int32_t *) red_arr_mem_31590)[sext_i32_i64(local_tid_31572 +
                                                          offset_31594)];
                x_28336 = ((volatile __local
                            float *) red_arr_mem_31592)[sext_i32_i64(local_tid_31572 +
                                                        offset_31594)];
            }
            // apply reduction operation
            {
                bool res_28337;
                int32_t res_28338;
                
                if (x_28331) {
                    res_28337 = x_28331;
                    res_28338 = x_28332;
                } else {
                    bool x_28339 = x_28334 && x_28334;
                    bool x_28340 = !x_28334;
                    bool y_28341 = x_28331 && x_28340;
                    bool res_28342 = x_28339 || y_28341;
                    int32_t res_28343;
                    
                    if (x_28334) {
                        res_28343 = x_28335;
                    } else {
                        res_28343 = x_28332;
                    }
                    res_28337 = res_28342;
                    res_28338 = res_28343;
                }
                
                float res_28344 = x_28333 + x_28336;
                
                x_28331 = res_28337;
                x_28332 = res_28338;
                x_28333 = res_28344;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_31588)[sext_i32_i64(local_tid_31572)] =
                    x_28331;
                ((volatile __local
                  int32_t *) red_arr_mem_31590)[sext_i32_i64(local_tid_31572)] =
                    x_28332;
                ((volatile __local
                  float *) red_arr_mem_31592)[sext_i32_i64(local_tid_31572)] =
                    x_28333;
            }
        }
        offset_31594 *= 2;
    }
    while (slt32(skip_waves_31595, squot32(sext_i64_i32(iota32_arg_21351) +
                                           wave_sizze_31574 - 1,
                                           wave_sizze_31574))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31594 = skip_waves_31595 * wave_sizze_31574;
        if (slt32(local_tid_31572 + offset_31594,
                  sext_i64_i32(iota32_arg_21351)) && ((local_tid_31572 -
                                                       squot32(local_tid_31572,
                                                               wave_sizze_31574) *
                                                       wave_sizze_31574) == 0 &&
                                                      (squot32(local_tid_31572,
                                                               wave_sizze_31574) &
                                                       (2 * skip_waves_31595 -
                                                        1)) == 0)) {
            // read array element
            {
                x_28334 = ((__local
                            bool *) red_arr_mem_31588)[sext_i32_i64(local_tid_31572 +
                                                       offset_31594)];
                x_28335 = ((__local
                            int32_t *) red_arr_mem_31590)[sext_i32_i64(local_tid_31572 +
                                                          offset_31594)];
                x_28336 = ((__local
                            float *) red_arr_mem_31592)[sext_i32_i64(local_tid_31572 +
                                                        offset_31594)];
            }
            // apply reduction operation
            {
                bool res_28337;
                int32_t res_28338;
                
                if (x_28331) {
                    res_28337 = x_28331;
                    res_28338 = x_28332;
                } else {
                    bool x_28339 = x_28334 && x_28334;
                    bool x_28340 = !x_28334;
                    bool y_28341 = x_28331 && x_28340;
                    bool res_28342 = x_28339 || y_28341;
                    int32_t res_28343;
                    
                    if (x_28334) {
                        res_28343 = x_28335;
                    } else {
                        res_28343 = x_28332;
                    }
                    res_28337 = res_28342;
                    res_28338 = res_28343;
                }
                
                float res_28344 = x_28333 + x_28336;
                
                x_28331 = res_28337;
                x_28332 = res_28338;
                x_28333 = res_28344;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_31588)[sext_i32_i64(local_tid_31572)] =
                    x_28331;
                ((__local
                  int32_t *) red_arr_mem_31590)[sext_i32_i64(local_tid_31572)] =
                    x_28332;
                ((__local
                  float *) red_arr_mem_31592)[sext_i32_i64(local_tid_31572)] =
                    x_28333;
            }
        }
        skip_waves_31595 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_28328 = ((__local bool *) red_arr_mem_31588)[0];
    acc0_28329 = ((__local int32_t *) red_arr_mem_31590)[0];
    acc0_28330 = ((__local float *) red_arr_mem_31592)[0];
    
    bool x_28360 = acc0_28328 && acc0_28328;
    int32_t res_28364;
    
    if (acc0_28328) {
        res_28364 = acc0_28329;
    } else {
        res_28364 = -1;
    }
    
    bool cond_28370 = !x_28360;
    int32_t fst_breakzq_28371;
    
    if (cond_28370) {
        fst_breakzq_28371 = -1;
    } else {
        bool cond_28372 = slt32(res_28364, y_28294);
        int32_t res_28373;
        
        if (cond_28372) {
            int32_t i_28374 = add32(x_28288, res_28364);
            int64_t i_28375 = sext_i32_i64(i_28374);
            int32_t x_28376 = ((__global int32_t *) res_mem_30433)[gtid_28067 *
                                                                   N_20967 +
                                                                   i_28375];
            int32_t res_28377 = sub32(x_28376, n_20972);
            
            res_28373 = res_28377;
        } else {
            res_28373 = -1;
        }
        fst_breakzq_28371 = res_28373;
    }
    
    bool cond_28378 = sle32(x_28288, 5);
    bool res_28379 = sle32(y_28294, 5);
    bool x_28380 = !cond_28378;
    bool y_28381 = res_28379 && x_28380;
    bool cond_28382 = cond_28378 || y_28381;
    int32_t fst_breakzq_28383;
    
    if (cond_28382) {
        fst_breakzq_28383 = -2;
    } else {
        fst_breakzq_28383 = fst_breakzq_28371;
    }
    if (local_tid_31572 == 0) {
        ((__global int32_t *) mem_30574)[gtid_28067] = fst_breakzq_28383;
    }
    if (local_tid_31572 == 0) {
        ((__global float *) mem_30576)[gtid_28067] = acc0_28330;
    }
    
  error_3:
    return;
}
__kernel void mainzisegmap_intragroup_28850(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30232_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30229_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_30210_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_30207_backing_aligned_3,
                                            int64_t m_20968, int64_t N_20969,
                                            int64_t res_20981,
                                            int64_t res_20987,
                                            int64_t num_groups_y_28848,
                                            int64_t num_whole_tiles_28866,
                                            int64_t residual_input_29016,
                                            unsigned char cond_29017, __global
                                            unsigned char *images_mem_29973,
                                            __global unsigned char *mem_29985,
                                            __global unsigned char *mem_30247)
{
    #define tile_sizze_28845 (mainzitile_sizze_28844)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30232_backing_7 = (__local volatile
                                                           char *) mem_30232_backing_aligned_0;
    __local volatile char *restrict mem_30229_backing_6 = (__local volatile
                                                           char *) mem_30229_backing_aligned_1;
    __local volatile char *restrict mem_30210_backing_1 = (__local volatile
                                                           char *) mem_30210_backing_aligned_2;
    __local volatile char *restrict mem_30207_backing_0 = (__local volatile
                                                           char *) mem_30207_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30957;
    int32_t local_tid_30958;
    int64_t group_sizze_30961;
    int32_t wave_sizze_30960;
    int32_t group_tid_30959;
    
    global_tid_30957 = get_global_id(0);
    local_tid_30958 = get_local_id(0);
    group_sizze_30961 = get_local_size(0);
    wave_sizze_30960 = LOCKSTEP_WIDTH;
    group_tid_30959 = get_group_id(0);
    
    int32_t gid_flat_28850;
    
    gid_flat_28850 = group_tid_30959;
    
    int32_t ltid_pre_30962;
    
    ltid_pre_30962 = squot32(local_tid_30958, sext_i64_i32(tile_sizze_28845));
    
    int32_t ltid_pre_30963;
    
    ltid_pre_30963 = local_tid_30958 - squot32(local_tid_30958,
                                               sext_i64_i32(tile_sizze_28845)) *
        sext_i64_i32(tile_sizze_28845);
    
    int64_t gid_x_28842;
    
    gid_x_28842 = squot64(sext_i32_i64(group_tid_30959), num_groups_y_28848);
    
    int64_t gid_y_28843;
    
    gid_y_28843 = sext_i32_i64(group_tid_30959) -
        squot64(sext_i32_i64(group_tid_30959), num_groups_y_28848) *
        num_groups_y_28848;
    
    float mem_30192[1];
    int64_t ltid_x_28867 = sext_i32_i64(ltid_pre_30962);
    int64_t ltid_y_28868 = sext_i32_i64(ltid_pre_30963);
    int32_t ltid_flat_28869 = local_tid_30958;
    
    if (slt64(ltid_x_28867, tile_sizze_28845) && slt64(ltid_y_28868,
                                                       tile_sizze_28845)) {
        mem_30192[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_28966 = gid_x_28842 * tile_sizze_28845;
    int64_t binop_x_28968 = gid_y_28843 * tile_sizze_28845;
    __local char *mem_30207;
    
    mem_30207 = (__local char *) mem_30207_backing_0;
    
    __local char *mem_30210;
    
    mem_30210 = (__local char *) mem_30210_backing_1;
    
    float accs_mem_30225[1];
    float mem_param_30200[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_30200[i_2] = mem_30192[i_2];
    for (int64_t tile_id_28878 = 0; tile_id_28878 < num_whole_tiles_28866;
         tile_id_28878++) {
        int64_t binop_x_28962 = tile_sizze_28845 * tile_id_28878;
        int64_t ltid_x_28879 = sext_i32_i64(ltid_pre_30962);
        int64_t ltid_y_28880 = sext_i32_i64(ltid_pre_30963);
        int32_t ltid_flat_28881 = local_tid_30958;
        int64_t i_28963 = ltid_x_28879 + binop_x_28962;
        int64_t j_28965 = ltid_y_28880 + binop_x_28962;
        int64_t gtid_28967 = ltid_x_28879 + binop_x_28966;
        int64_t gtid_28969 = ltid_y_28880 + binop_x_28968;
        bool binop_x_28972 = slt64(i_28963, res_20981);
        bool binop_y_28973 = slt64(gtid_28969, res_20987);
        bool cond_28974 = binop_x_28972 && binop_y_28973;
        float pre_28975;
        
        if (cond_28974) {
            float x_28976 = ((__global float *) mem_29985)[i_28963 * res_20987 +
                                                           gtid_28969];
            
            pre_28975 = x_28976;
        } else {
            pre_28975 = 0.0F;
        }
        
        bool binop_x_28978 = slt64(j_28965, res_20981);
        bool binop_y_28979 = slt64(gtid_28967, m_20968);
        bool cond_28980 = binop_x_28978 && binop_y_28979;
        float pre_28981;
        
        if (cond_28980) {
            float x_28982 = ((__global float *) images_mem_29973)[gtid_28967 *
                                                                  N_20969 +
                                                                  j_28965];
            
            pre_28981 = x_28982;
        } else {
            pre_28981 = 0.0F;
        }
        ((__local float *) mem_30207)[ltid_x_28879 * tile_sizze_28845 +
                                      ltid_y_28880] = pre_28975;
        ((__local float *) mem_30210)[ltid_x_28879 * tile_sizze_28845 +
                                      ltid_y_28880] = pre_28981;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30214[1];
        int64_t ltid_x_28924 = sext_i32_i64(ltid_pre_30962);
        int64_t ltid_y_28925 = sext_i32_i64(ltid_pre_30963);
        int32_t ltid_flat_28926 = local_tid_30958;
        int64_t gtid_28986 = ltid_x_28924 + binop_x_28966;
        int64_t gtid_28988 = ltid_y_28925 + binop_x_28968;
        float acc_28991 = mem_param_30200[0];
        bool binop_x_28994 = slt64(gtid_28986, m_20968);
        bool binop_y_28995 = slt64(gtid_28988, res_20987);
        bool cond_28996 = binop_x_28994 && binop_y_28995;
        float acc_28997;
        
        if (cond_28996) {
            float x_28998;
            float redout_29916 = acc_28991;
            
            for (int64_t i_29917 = 0; i_29917 < tile_sizze_28845; i_29917++) {
                float x_29003 = ((__local float *) mem_30210)[ltid_x_28924 *
                                                              tile_sizze_28845 +
                                                              i_29917];
                bool res_29004;
                
                res_29004 = futrts_isnan32(x_29003);
                
                float res_29005;
                
                if (res_29004) {
                    res_29005 = 0.0F;
                } else {
                    float x_29002 = ((__local float *) mem_30207)[i_29917 *
                                                                  tile_sizze_28845 +
                                                                  ltid_y_28925];
                    float res_29006 = x_29002 * x_29003;
                    
                    res_29005 = res_29006;
                }
                
                float res_29001 = res_29005 + redout_29916;
                float redout_tmp_30966 = res_29001;
                
                redout_29916 = redout_tmp_30966;
            }
            x_28998 = redout_29916;
            acc_28997 = x_28998;
        } else {
            acc_28997 = acc_28991;
        }
        mem_30214[0] = acc_28997;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_30964[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_30964[i_3] = mem_30214[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_30200[i_4] = mem_param_tmp_30964[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_30225[i_5] = mem_param_30200[i_5];
    
    __local char *mem_30229;
    
    mem_30229 = (__local char *) mem_30229_backing_6;
    
    __local char *mem_30232;
    
    mem_30232 = (__local char *) mem_30232_backing_7;
    
    float mem_30236[1];
    float mem_30636[1];
    
    if (cond_29017) {
        mem_30636[0] = accs_mem_30225[0];
    } else {
        int64_t binop_x_29103 = tile_sizze_28845 * num_whole_tiles_28866;
        int64_t ltid_x_29018 = sext_i32_i64(ltid_pre_30962);
        int64_t ltid_y_29019 = sext_i32_i64(ltid_pre_30963);
        int32_t ltid_flat_29020 = local_tid_30958;
        int64_t i_29104 = ltid_x_29018 + binop_x_29103;
        int64_t j_29106 = ltid_y_29019 + binop_x_29103;
        int64_t gtid_29108 = binop_x_28966 + ltid_x_29018;
        int64_t gtid_29110 = binop_x_28968 + ltid_y_29019;
        bool binop_x_29113 = slt64(i_29104, res_20981);
        bool binop_y_29114 = slt64(gtid_29110, res_20987);
        bool cond_29115 = binop_x_29113 && binop_y_29114;
        float pre_29116;
        
        if (cond_29115) {
            float x_29117 = ((__global float *) mem_29985)[i_29104 * res_20987 +
                                                           gtid_29110];
            
            pre_29116 = x_29117;
        } else {
            pre_29116 = 0.0F;
        }
        
        bool binop_x_29119 = slt64(j_29106, res_20981);
        bool binop_y_29120 = slt64(gtid_29108, m_20968);
        bool cond_29121 = binop_x_29119 && binop_y_29120;
        float pre_29122;
        
        if (cond_29121) {
            float x_29123 = ((__global float *) images_mem_29973)[gtid_29108 *
                                                                  N_20969 +
                                                                  j_29106];
            
            pre_29122 = x_29123;
        } else {
            pre_29122 = 0.0F;
        }
        ((__local float *) mem_30229)[ltid_x_29018 * tile_sizze_28845 +
                                      ltid_y_29019] = pre_29116;
        ((__local float *) mem_30232)[ltid_x_29018 * tile_sizze_28845 +
                                      ltid_y_29019] = pre_29122;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_29065 = sext_i32_i64(ltid_pre_30962);
        int64_t ltid_y_29066 = sext_i32_i64(ltid_pre_30963);
        int32_t ltid_flat_29067 = local_tid_30958;
        int64_t gtid_29129 = binop_x_28966 + ltid_x_29065;
        int64_t gtid_29131 = binop_x_28968 + ltid_y_29066;
        float acc_29134 = accs_mem_30225[0];
        bool binop_x_29137 = slt64(gtid_29129, m_20968);
        bool binop_y_29138 = slt64(gtid_29131, res_20987);
        bool cond_29139 = binop_x_29137 && binop_y_29138;
        float acc_29140;
        
        if (cond_29139) {
            float x_29141;
            float redout_29918 = acc_29134;
            
            for (int64_t i_29919 = 0; i_29919 < residual_input_29016;
                 i_29919++) {
                float x_29146 = ((__local float *) mem_30232)[ltid_x_29065 *
                                                              tile_sizze_28845 +
                                                              i_29919];
                bool res_29147;
                
                res_29147 = futrts_isnan32(x_29146);
                
                float res_29148;
                
                if (res_29147) {
                    res_29148 = 0.0F;
                } else {
                    float x_29145 = ((__local float *) mem_30229)[i_29919 *
                                                                  tile_sizze_28845 +
                                                                  ltid_y_29066];
                    float res_29149 = x_29145 * x_29146;
                    
                    res_29148 = res_29149;
                }
                
                float res_29144 = res_29148 + redout_29918;
                float redout_tmp_30967 = res_29144;
                
                redout_29918 = redout_tmp_30967;
            }
            x_29141 = redout_29918;
            acc_29140 = x_29141;
        } else {
            acc_29140 = acc_29134;
        }
        mem_30236[0] = acc_29140;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30636[0] = mem_30236[0];
    }
    
    int64_t thread_out_index_30968 = gid_x_28842 * tile_sizze_28845 +
            sext_i32_i64(ltid_pre_30962);
    int64_t thread_out_index_30969 = gid_y_28843 * tile_sizze_28845 +
            sext_i32_i64(ltid_pre_30963);
    
    if (slt64(thread_out_index_30968, m_20968) && slt64(thread_out_index_30969,
                                                        res_20987)) {
        ((__global float *) mem_30247)[thread_out_index_30968 * res_20987 +
                                       thread_out_index_30969] = mem_30636[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_28845
}
__kernel void mainzisegmap_intragroup_29172(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30369_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30366_backing_aligned_1,
                                            __local volatile
                                            int64_t *mem_30347_backing_aligned_2,
                                            __local volatile
                                            int64_t *mem_30344_backing_aligned_3,
                                            int64_t N_20967, int64_t m_20968,
                                            int64_t res_20987,
                                            int64_t num_groups_y_29170,
                                            int64_t num_whole_tiles_29188,
                                            int64_t residual_input_29332,
                                            unsigned char cond_29333, __global
                                            unsigned char *res_mem_30300,
                                            __global unsigned char *mem_30324,
                                            __global unsigned char *mem_30384)
{
    #define tile_sizze_29167 (mainzitile_sizze_29166)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30369_backing_7 = (__local volatile
                                                           char *) mem_30369_backing_aligned_0;
    __local volatile char *restrict mem_30366_backing_6 = (__local volatile
                                                           char *) mem_30366_backing_aligned_1;
    __local volatile char *restrict mem_30347_backing_1 = (__local volatile
                                                           char *) mem_30347_backing_aligned_2;
    __local volatile char *restrict mem_30344_backing_0 = (__local volatile
                                                           char *) mem_30344_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31126;
    int32_t local_tid_31127;
    int64_t group_sizze_31130;
    int32_t wave_sizze_31129;
    int32_t group_tid_31128;
    
    global_tid_31126 = get_global_id(0);
    local_tid_31127 = get_local_id(0);
    group_sizze_31130 = get_local_size(0);
    wave_sizze_31129 = LOCKSTEP_WIDTH;
    group_tid_31128 = get_group_id(0);
    
    int32_t gid_flat_29172;
    
    gid_flat_29172 = group_tid_31128;
    
    int32_t ltid_pre_31131;
    
    ltid_pre_31131 = squot32(local_tid_31127, sext_i64_i32(tile_sizze_29167));
    
    int32_t ltid_pre_31132;
    
    ltid_pre_31132 = local_tid_31127 - squot32(local_tid_31127,
                                               sext_i64_i32(tile_sizze_29167)) *
        sext_i64_i32(tile_sizze_29167);
    
    int64_t gid_x_29164;
    
    gid_x_29164 = squot64(sext_i32_i64(group_tid_31128), num_groups_y_29170);
    
    int64_t gid_y_29165;
    
    gid_y_29165 = sext_i32_i64(group_tid_31128) -
        squot64(sext_i32_i64(group_tid_31128), num_groups_y_29170) *
        num_groups_y_29170;
    
    float mem_30329[1];
    int64_t ltid_x_29189 = sext_i32_i64(ltid_pre_31131);
    int64_t ltid_y_29190 = sext_i32_i64(ltid_pre_31132);
    int32_t ltid_flat_29191 = local_tid_31127;
    
    if (slt64(ltid_x_29189, tile_sizze_29167) && slt64(ltid_y_29190,
                                                       tile_sizze_29167)) {
        mem_30329[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_29286 = gid_x_29164 * tile_sizze_29167;
    int64_t binop_x_29288 = gid_y_29165 * tile_sizze_29167;
    __local char *mem_30344;
    
    mem_30344 = (__local char *) mem_30344_backing_0;
    
    __local char *mem_30347;
    
    mem_30347 = (__local char *) mem_30347_backing_1;
    
    float accs_mem_30362[1];
    float mem_param_30337[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_30337[i_2] = mem_30329[i_2];
    for (int64_t tile_id_29200 = 0; tile_id_29200 < num_whole_tiles_29188;
         tile_id_29200++) {
        int64_t binop_x_29282 = tile_sizze_29167 * tile_id_29200;
        int64_t ltid_x_29201 = sext_i32_i64(ltid_pre_31131);
        int64_t ltid_y_29202 = sext_i32_i64(ltid_pre_31132);
        int32_t ltid_flat_29203 = local_tid_31127;
        int64_t i_29283 = ltid_x_29201 + binop_x_29282;
        int64_t j_29285 = ltid_y_29202 + binop_x_29282;
        int64_t gtid_29287 = ltid_x_29201 + binop_x_29286;
        int64_t gtid_29289 = ltid_y_29202 + binop_x_29288;
        bool binop_x_29292 = slt64(j_29285, res_20987);
        bool binop_y_29293 = slt64(gtid_29287, m_20968);
        bool cond_29294 = binop_x_29292 && binop_y_29293;
        float pre_29295;
        
        if (cond_29294) {
            float x_29296 = ((__global float *) res_mem_30300)[gtid_29287 *
                                                               res_20987 +
                                                               j_29285];
            
            pre_29295 = x_29296;
        } else {
            pre_29295 = 0.0F;
        }
        
        bool binop_x_29298 = slt64(i_29283, res_20987);
        bool binop_y_29299 = slt64(gtid_29289, N_20967);
        bool cond_29300 = binop_x_29298 && binop_y_29299;
        float pre_29301;
        
        if (cond_29300) {
            float x_29302 = ((__global float *) mem_30324)[i_29283 * N_20967 +
                                                           gtid_29289];
            
            pre_29301 = x_29302;
        } else {
            pre_29301 = 0.0F;
        }
        ((__local float *) mem_30344)[ltid_x_29201 * tile_sizze_29167 +
                                      ltid_y_29202] = pre_29295;
        ((__local float *) mem_30347)[ltid_x_29201 * tile_sizze_29167 +
                                      ltid_y_29202] = pre_29301;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30351[1];
        int64_t ltid_x_29246 = sext_i32_i64(ltid_pre_31131);
        int64_t ltid_y_29247 = sext_i32_i64(ltid_pre_31132);
        int32_t ltid_flat_29248 = local_tid_31127;
        int64_t gtid_29306 = ltid_x_29246 + binop_x_29286;
        int64_t gtid_29308 = ltid_y_29247 + binop_x_29288;
        float acc_29311 = mem_param_30337[0];
        bool binop_x_29314 = slt64(gtid_29306, m_20968);
        bool binop_y_29315 = slt64(gtid_29308, N_20967);
        bool cond_29316 = binop_x_29314 && binop_y_29315;
        float acc_29317;
        
        if (cond_29316) {
            float x_29318;
            float redout_29934 = acc_29311;
            
            for (int64_t i_29935 = 0; i_29935 < tile_sizze_29167; i_29935++) {
                float x_29322 = ((__local float *) mem_30344)[ltid_x_29246 *
                                                              tile_sizze_29167 +
                                                              i_29935];
                float x_29323 = ((__local float *) mem_30347)[i_29935 *
                                                              tile_sizze_29167 +
                                                              ltid_y_29247];
                float res_29324 = x_29322 * x_29323;
                float res_29321 = res_29324 + redout_29934;
                float redout_tmp_31135 = res_29321;
                
                redout_29934 = redout_tmp_31135;
            }
            x_29318 = redout_29934;
            acc_29317 = x_29318;
        } else {
            acc_29317 = acc_29311;
        }
        mem_30351[0] = acc_29317;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31133[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_31133[i_3] = mem_30351[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_30337[i_4] = mem_param_tmp_31133[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_30362[i_5] = mem_param_30337[i_5];
    
    __local char *mem_30366;
    
    mem_30366 = (__local char *) mem_30366_backing_6;
    
    __local char *mem_30369;
    
    mem_30369 = (__local char *) mem_30369_backing_7;
    
    float mem_30373[1];
    float mem_30648[1];
    
    if (cond_29333) {
        mem_30648[0] = accs_mem_30362[0];
    } else {
        int64_t binop_x_29417 = tile_sizze_29167 * num_whole_tiles_29188;
        int64_t ltid_x_29334 = sext_i32_i64(ltid_pre_31131);
        int64_t ltid_y_29335 = sext_i32_i64(ltid_pre_31132);
        int32_t ltid_flat_29336 = local_tid_31127;
        int64_t i_29418 = ltid_x_29334 + binop_x_29417;
        int64_t j_29420 = ltid_y_29335 + binop_x_29417;
        int64_t gtid_29422 = binop_x_29286 + ltid_x_29334;
        int64_t gtid_29424 = binop_x_29288 + ltid_y_29335;
        bool binop_x_29427 = slt64(j_29420, res_20987);
        bool binop_y_29428 = slt64(gtid_29422, m_20968);
        bool cond_29429 = binop_x_29427 && binop_y_29428;
        float pre_29430;
        
        if (cond_29429) {
            float x_29431 = ((__global float *) res_mem_30300)[gtid_29422 *
                                                               res_20987 +
                                                               j_29420];
            
            pre_29430 = x_29431;
        } else {
            pre_29430 = 0.0F;
        }
        
        bool binop_x_29433 = slt64(i_29418, res_20987);
        bool binop_y_29434 = slt64(gtid_29424, N_20967);
        bool cond_29435 = binop_x_29433 && binop_y_29434;
        float pre_29436;
        
        if (cond_29435) {
            float x_29437 = ((__global float *) mem_30324)[i_29418 * N_20967 +
                                                           gtid_29424];
            
            pre_29436 = x_29437;
        } else {
            pre_29436 = 0.0F;
        }
        ((__local float *) mem_30366)[ltid_x_29334 * tile_sizze_29167 +
                                      ltid_y_29335] = pre_29430;
        ((__local float *) mem_30369)[ltid_x_29334 * tile_sizze_29167 +
                                      ltid_y_29335] = pre_29436;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_29381 = sext_i32_i64(ltid_pre_31131);
        int64_t ltid_y_29382 = sext_i32_i64(ltid_pre_31132);
        int32_t ltid_flat_29383 = local_tid_31127;
        int64_t gtid_29443 = binop_x_29286 + ltid_x_29381;
        int64_t gtid_29445 = binop_x_29288 + ltid_y_29382;
        float acc_29448 = accs_mem_30362[0];
        bool binop_x_29451 = slt64(gtid_29443, m_20968);
        bool binop_y_29452 = slt64(gtid_29445, N_20967);
        bool cond_29453 = binop_x_29451 && binop_y_29452;
        float acc_29454;
        
        if (cond_29453) {
            float x_29455;
            float redout_29936 = acc_29448;
            
            for (int64_t i_29937 = 0; i_29937 < residual_input_29332;
                 i_29937++) {
                float x_29459 = ((__local float *) mem_30366)[ltid_x_29381 *
                                                              tile_sizze_29167 +
                                                              i_29937];
                float x_29460 = ((__local float *) mem_30369)[i_29937 *
                                                              tile_sizze_29167 +
                                                              ltid_y_29382];
                float res_29461 = x_29459 * x_29460;
                float res_29458 = res_29461 + redout_29936;
                float redout_tmp_31136 = res_29458;
                
                redout_29936 = redout_tmp_31136;
            }
            x_29455 = redout_29936;
            acc_29454 = x_29455;
        } else {
            acc_29454 = acc_29448;
        }
        mem_30373[0] = acc_29454;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30648[0] = mem_30373[0];
    }
    
    int64_t thread_out_index_31137 = gid_x_29164 * tile_sizze_29167 +
            sext_i32_i64(ltid_pre_31131);
    int64_t thread_out_index_31138 = gid_y_29165 * tile_sizze_29167 +
            sext_i32_i64(ltid_pre_31132);
    
    if (slt64(thread_out_index_31137, m_20968) && slt64(thread_out_index_31138,
                                                        N_20967)) {
        ((__global float *) mem_30384)[thread_out_index_31137 * N_20967 +
                                       thread_out_index_31138] = mem_30648[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_29167
}
__kernel void mainzisegmap_intragroup_29477(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30466_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30453_backing_aligned_1,
                                            int64_t m_20968, int32_t n_20972,
                                            float hfrac_20974,
                                            int64_t res_20981,
                                            int32_t k2p2_20983,
                                            int64_t num_whole_tiles_29485,
                                            int64_t residual_input_29606,
                                            unsigned char cond_29607, __global
                                            unsigned char *mem_30436, __global
                                            unsigned char *mem_30439, __global
                                            unsigned char *mem_30483, __global
                                            unsigned char *mem_30485, __global
                                            unsigned char *mem_30487)
{
    #define segmap_group_sizze_27689 (mainzisegmap_group_sizze_27658)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30466_backing_5 = (__local volatile
                                                           char *) mem_30466_backing_aligned_0;
    __local volatile char *restrict mem_30453_backing_0 = (__local volatile
                                                           char *) mem_30453_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31306;
    int32_t local_tid_31307;
    int64_t group_sizze_31310;
    int32_t wave_sizze_31309;
    int32_t group_tid_31308;
    
    global_tid_31306 = get_global_id(0);
    local_tid_31307 = get_local_id(0);
    group_sizze_31310 = get_local_size(0);
    wave_sizze_31309 = LOCKSTEP_WIDTH;
    group_tid_31308 = get_group_id(0);
    
    int32_t gid_flat_29477;
    
    gid_flat_29477 = group_tid_31308;
    
    int32_t ltid_pre_31311;
    
    ltid_pre_31311 = local_tid_31307;
    
    int64_t gid_29476;
    
    gid_29476 = sext_i32_i64(group_tid_31308);
    
    float mem_30443[1];
    int64_t ltid_29486 = sext_i32_i64(ltid_pre_31311);
    int32_t ltid_flat_29487 = local_tid_31307;
    
    if (slt64(ltid_29486, segmap_group_sizze_27689)) {
        mem_30443[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_29572 = segmap_group_sizze_27689 * gid_29476;
    __local char *mem_30453;
    
    mem_30453 = (__local char *) mem_30453_backing_0;
    
    float accs_mem_30463[1];
    float mem_param_30448[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_30448[i_1] = mem_30443[i_1];
    for (int64_t tile_id_29493 = 0; tile_id_29493 < num_whole_tiles_29485;
         tile_id_29493++) {
        int64_t binop_x_29554 = segmap_group_sizze_27689 * tile_id_29493;
        int64_t ltid_29494 = sext_i32_i64(ltid_pre_31311);
        int32_t ltid_flat_29495 = local_tid_31307;
        
        if (slt64(ltid_29494, segmap_group_sizze_27689)) {
            int64_t j_29555 = ltid_29494 + binop_x_29554;
            bool cond_29567 = slt64(j_29555, res_20981);
            int32_t pre_29568;
            
            if (cond_29567) {
                int32_t index_primexp_29888 = sext_i64_i32(j_29555);
                
                pre_29568 = index_primexp_29888;
            } else {
                pre_29568 = 0;
            }
            ((__local int32_t *) mem_30453)[ltid_29494] = pre_29568;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30456[1];
        int64_t ltid_29521 = sext_i32_i64(ltid_pre_31311);
        int32_t ltid_flat_29522 = local_tid_31307;
        
        if (slt64(ltid_29521, segmap_group_sizze_27689)) {
            int64_t gtid_29573 = ltid_29521 + binop_x_29572;
            int32_t res_29575;
            int32_t redout_29938 = 0;
            
            for (int32_t i_29964 = 0; i_29964 < n_20972; i_29964++) {
                int64_t i_29939 = sext_i32_i64(i_29964);
                float x_29579 = ((__global float *) mem_30436)[i_29939 *
                                                               m_20968 +
                                                               gtid_29573];
                bool res_29580;
                
                res_29580 = futrts_isnan32(x_29579);
                
                bool cond_29581 = !res_29580;
                int32_t res_29582 = btoi_bool_i32(cond_29581);
                int32_t res_29578 = add32(res_29582, redout_29938);
                int32_t redout_tmp_31314 = res_29578;
                
                redout_29938 = redout_tmp_31314;
            }
            res_29575 = redout_29938;
            
            float acc_29583 = mem_param_30448[0];
            bool cond_29584 = slt64(gtid_29573, m_20968);
            float acc_29585;
            
            if (cond_29584) {
                float x_29586;
                float redout_29940 = acc_29583;
                
                for (int64_t i_29941 = 0; i_29941 < segmap_group_sizze_27689;
                     i_29941++) {
                    int32_t x_29590 = ((__local int32_t *) mem_30453)[i_29941];
                    bool cond_29591 = slt32(x_29590, res_29575);
                    float res_29592;
                    
                    if (cond_29591) {
                        int64_t i_29593 = sext_i32_i64(x_29590);
                        float res_29594 = ((__global
                                            float *) mem_30439)[i_29593 *
                                                                m_20968 +
                                                                gtid_29573];
                        
                        res_29592 = res_29594;
                    } else {
                        res_29592 = 0.0F;
                    }
                    
                    float res_29595 = res_29592 * res_29592;
                    float res_29589 = res_29595 + redout_29940;
                    float redout_tmp_31315 = res_29589;
                    
                    redout_29940 = redout_tmp_31315;
                }
                x_29586 = redout_29940;
                acc_29585 = x_29586;
            } else {
                acc_29585 = acc_29583;
            }
            mem_30456[0] = acc_29585;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31312[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_31312[i_2] = mem_30456[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_30448[i_3] = mem_param_tmp_31312[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_30463[i_4] = mem_param_30448[i_4];
    
    __local char *mem_30466;
    
    mem_30466 = (__local char *) mem_30466_backing_5;
    
    float mem_30469[1];
    float mem_30657[1];
    
    if (cond_29607) {
        mem_30657[0] = accs_mem_30463[0];
    } else {
        int64_t binop_x_29617 = segmap_group_sizze_27689 *
                num_whole_tiles_29485;
        int64_t ltid_29608 = sext_i32_i64(ltid_pre_31311);
        int32_t ltid_flat_29609 = local_tid_31307;
        
        if (slt64(ltid_29608, segmap_group_sizze_27689)) {
            int64_t j_29618 = ltid_29608 + binop_x_29617;
            bool cond_29630 = slt64(j_29618, res_20981);
            int32_t pre_29631;
            
            if (cond_29630) {
                int32_t index_primexp_29889 = sext_i64_i32(j_29618);
                
                pre_29631 = index_primexp_29889;
            } else {
                pre_29631 = 0;
            }
            ((__local int32_t *) mem_30466)[ltid_29608] = pre_29631;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_29636 = sext_i32_i64(ltid_pre_31311);
        int32_t ltid_flat_29637 = local_tid_31307;
        
        if (slt64(ltid_29636, segmap_group_sizze_27689)) {
            int64_t gtid_29644 = binop_x_29572 + ltid_29636;
            int32_t res_29646;
            int32_t redout_29942 = 0;
            
            for (int32_t i_29965 = 0; i_29965 < n_20972; i_29965++) {
                int64_t i_29943 = sext_i32_i64(i_29965);
                float x_29650 = ((__global float *) mem_30436)[i_29943 *
                                                               m_20968 +
                                                               gtid_29644];
                bool res_29651;
                
                res_29651 = futrts_isnan32(x_29650);
                
                bool cond_29652 = !res_29651;
                int32_t res_29653 = btoi_bool_i32(cond_29652);
                int32_t res_29649 = add32(res_29653, redout_29942);
                int32_t redout_tmp_31316 = res_29649;
                
                redout_29942 = redout_tmp_31316;
            }
            res_29646 = redout_29942;
            
            float acc_29654 = accs_mem_30463[0];
            bool cond_29655 = slt64(gtid_29644, m_20968);
            float acc_29656;
            
            if (cond_29655) {
                float x_29657;
                float redout_29944 = acc_29654;
                
                for (int64_t i_29945 = 0; i_29945 < residual_input_29606;
                     i_29945++) {
                    int32_t x_29661 = ((__local int32_t *) mem_30466)[i_29945];
                    bool cond_29662 = slt32(x_29661, res_29646);
                    float res_29663;
                    
                    if (cond_29662) {
                        int64_t i_29664 = sext_i32_i64(x_29661);
                        float res_29665 = ((__global
                                            float *) mem_30439)[i_29664 *
                                                                m_20968 +
                                                                gtid_29644];
                        
                        res_29663 = res_29665;
                    } else {
                        res_29663 = 0.0F;
                    }
                    
                    float res_29666 = res_29663 * res_29663;
                    float res_29660 = res_29666 + redout_29944;
                    float redout_tmp_31317 = res_29660;
                    
                    redout_29944 = redout_tmp_31317;
                }
                x_29657 = redout_29944;
                acc_29656 = x_29657;
            } else {
                acc_29656 = acc_29654;
            }
            mem_30469[0] = acc_29656;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30657[0] = mem_30469[0];
    }
    
    int32_t mem_30477[1];
    int32_t mem_30479[1];
    float mem_30481[1];
    int64_t ltid_29669 = sext_i32_i64(ltid_pre_31311);
    int32_t ltid_flat_29670 = local_tid_31307;
    
    if (slt64(ltid_29669, segmap_group_sizze_27689)) {
        int64_t gtid_29680 = binop_x_29572 + ltid_29669;
        bool cond_29682 = slt64(gtid_29680, m_20968);
        int32_t postlude_29683;
        int32_t postlude_29684;
        float postlude_29685;
        
        if (cond_29682) {
            float res_29681 = mem_30657[0];
            int32_t res_29687;
            int32_t redout_29946 = 0;
            
            for (int32_t i_29966 = 0; i_29966 < n_20972; i_29966++) {
                int64_t i_29947 = sext_i32_i64(i_29966);
                float x_29691 = ((__global float *) mem_30436)[i_29947 *
                                                               m_20968 +
                                                               gtid_29680];
                bool res_29692;
                
                res_29692 = futrts_isnan32(x_29691);
                
                bool cond_29693 = !res_29692;
                int32_t res_29694 = btoi_bool_i32(cond_29693);
                int32_t res_29690 = add32(res_29694, redout_29946);
                int32_t redout_tmp_31318 = res_29690;
                
                redout_29946 = redout_tmp_31318;
            }
            res_29687 = redout_29946;
            
            int32_t r32_arg_29695 = sub32(res_29687, k2p2_20983);
            float res_29696 = sitofp_i32_f32(r32_arg_29695);
            float sqrt_arg_29697 = res_29681 / res_29696;
            float res_29698;
            
            res_29698 = futrts_sqrt32(sqrt_arg_29697);
            
            float res_29699 = sitofp_i32_f32(res_29687);
            float t32_arg_29700 = hfrac_20974 * res_29699;
            int32_t res_29701 = fptosi_f32_i32(t32_arg_29700);
            
            postlude_29683 = res_29701;
            postlude_29684 = res_29687;
            postlude_29685 = res_29698;
        } else {
            postlude_29683 = 0;
            postlude_29684 = 0;
            postlude_29685 = 0.0F;
        }
        mem_30477[0] = postlude_29683;
        mem_30479[0] = postlude_29684;
        mem_30481[0] = postlude_29685;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_31307) + segmap_group_sizze_27689 *
              sext_i32_i64(group_tid_31308), m_20968)) {
        ((__global int32_t *) mem_30483)[sext_i32_i64(local_tid_31307) +
                                         segmap_group_sizze_27689 *
                                         sext_i32_i64(group_tid_31308)] =
            mem_30477[0];
    }
    if (slt64(sext_i32_i64(local_tid_31307) + segmap_group_sizze_27689 *
              sext_i32_i64(group_tid_31308), m_20968)) {
        ((__global int32_t *) mem_30485)[sext_i32_i64(local_tid_31307) +
                                         segmap_group_sizze_27689 *
                                         sext_i32_i64(group_tid_31308)] =
            mem_30479[0];
    }
    if (slt64(sext_i32_i64(local_tid_31307) + segmap_group_sizze_27689 *
              sext_i32_i64(group_tid_31308), m_20968)) {
        ((__global float *) mem_30487)[sext_i32_i64(local_tid_31307) +
                                       segmap_group_sizze_27689 *
                                       sext_i32_i64(group_tid_31308)] =
            mem_30481[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_27689
}
__kernel void mainzisegmap_intragroup_29709(__global int *global_failure,
                                            __local volatile
                                            int64_t *mem_30548_backing_aligned_0,
                                            __local volatile
                                            int64_t *mem_30535_backing_aligned_1,
                                            int64_t N_20967, int64_t m_20968,
                                            int64_t res_21329,
                                            int64_t num_whole_tiles_29729,
                                            int64_t residual_input_29828,
                                            unsigned char cond_29829, __global
                                            unsigned char *res_mem_30432,
                                            __global
                                            unsigned char *res_mem_30511,
                                            __global
                                            unsigned char *res_mem_30512,
                                            __global unsigned char *mem_30558)
{
    #define segmap_group_sizze_27926 (mainzisegmap_group_sizze_27907)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30548_backing_5 = (__local volatile
                                                           char *) mem_30548_backing_aligned_0;
    __local volatile char *restrict mem_30535_backing_0 = (__local volatile
                                                           char *) mem_30535_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31492;
    int32_t local_tid_31493;
    int64_t group_sizze_31496;
    int32_t wave_sizze_31495;
    int32_t group_tid_31494;
    
    global_tid_31492 = get_global_id(0);
    local_tid_31493 = get_local_id(0);
    group_sizze_31496 = get_local_size(0);
    wave_sizze_31495 = LOCKSTEP_WIDTH;
    group_tid_31494 = get_group_id(0);
    
    int32_t gid_flat_29709;
    
    gid_flat_29709 = group_tid_31494;
    
    int32_t ltid_pre_31497;
    
    ltid_pre_31497 = local_tid_31493;
    
    int64_t gid_29708;
    
    gid_29708 = sext_i32_i64(group_tid_31494);
    
    int64_t binop_x_29718;
    
    binop_x_29718 = segmap_group_sizze_27926 * gid_29708;
    
    int32_t mem_30520[1];
    int32_t mem_30522[1];
    int64_t ltid_29710 = sext_i32_i64(ltid_pre_31497);
    int32_t ltid_flat_29711 = local_tid_31493;
    
    if (slt64(ltid_29710, segmap_group_sizze_27926)) {
        int64_t gtid_29719 = ltid_29710 + binop_x_29718;
        bool cond_29720 = slt64(gtid_29719, m_20968);
        int32_t pre_29721;
        int32_t pre_29722;
        
        if (cond_29720) {
            int32_t x_29723 = ((__global int32_t *) res_mem_30512)[gtid_29719];
            int32_t x_29724 = ((__global int32_t *) res_mem_30511)[gtid_29719];
            
            pre_29721 = x_29723;
            pre_29722 = x_29724;
        } else {
            pre_29721 = 0;
            pre_29722 = 0;
        }
        mem_30520[0] = pre_29721;
        mem_30522[0] = pre_29722;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_30525[1];
    int64_t ltid_29730 = sext_i32_i64(ltid_pre_31497);
    int32_t ltid_flat_29731 = local_tid_31493;
    
    if (slt64(ltid_29730, segmap_group_sizze_27926)) {
        mem_30525[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30535;
    
    mem_30535 = (__local char *) mem_30535_backing_0;
    
    float accs_mem_30545[1];
    float mem_param_30530[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_30530[i_1] = mem_30525[i_1];
    for (int64_t tile_id_29737 = 0; tile_id_29737 < num_whole_tiles_29729;
         tile_id_29737++) {
        int64_t binop_x_29786 = segmap_group_sizze_27926 * tile_id_29737;
        int64_t ltid_29738 = sext_i32_i64(ltid_pre_31497);
        int32_t ltid_flat_29739 = local_tid_31493;
        
        if (slt64(ltid_29738, segmap_group_sizze_27926)) {
            int64_t j_29787 = ltid_29738 + binop_x_29786;
            bool cond_29792 = slt64(j_29787, res_21329);
            int32_t pre_29793;
            
            if (cond_29792) {
                int32_t index_primexp_29890 = sext_i64_i32(j_29787);
                
                pre_29793 = index_primexp_29890;
            } else {
                pre_29793 = 0;
            }
            ((__local int32_t *) mem_30535)[ltid_29738] = pre_29793;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30538[1];
        int64_t ltid_29758 = sext_i32_i64(ltid_pre_31497);
        int32_t ltid_flat_29759 = local_tid_31493;
        
        if (slt64(ltid_29758, segmap_group_sizze_27926)) {
            int64_t gtid_29798 = binop_x_29718 + ltid_29758;
            float acc_29801 = mem_param_30530[0];
            bool cond_29802 = slt64(gtid_29798, m_20968);
            float acc_29803;
            
            if (cond_29802) {
                int32_t x_29799 = mem_30520[0];
                int32_t x_29800 = mem_30522[0];
                float x_29804;
                float redout_29948 = acc_29801;
                
                for (int64_t i_29949 = 0; i_29949 < segmap_group_sizze_27926;
                     i_29949++) {
                    int32_t x_29808 = ((__local int32_t *) mem_30535)[i_29949];
                    bool cond_29809 = slt32(x_29808, x_29800);
                    float res_29810;
                    
                    if (cond_29809) {
                        int32_t x_29811 = add32(x_29799, x_29808);
                        int32_t x_29812 = sub32(x_29811, x_29800);
                        int32_t i_29813 = add32(1, x_29812);
                        int64_t i_29814 = sext_i32_i64(i_29813);
                        float res_29815 = ((__global
                                            float *) res_mem_30432)[gtid_29798 *
                                                                    N_20967 +
                                                                    i_29814];
                        
                        res_29810 = res_29815;
                    } else {
                        res_29810 = 0.0F;
                    }
                    
                    float res_29807 = res_29810 + redout_29948;
                    float redout_tmp_31500 = res_29807;
                    
                    redout_29948 = redout_tmp_31500;
                }
                x_29804 = redout_29948;
                acc_29803 = x_29804;
            } else {
                acc_29803 = acc_29801;
            }
            mem_30538[0] = acc_29803;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31498[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_31498[i_2] = mem_30538[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_30530[i_3] = mem_param_tmp_31498[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_30545[i_4] = mem_param_30530[i_4];
    
    __local char *mem_30548;
    
    mem_30548 = (__local char *) mem_30548_backing_5;
    
    float mem_30551[1];
    float mem_30666[1];
    
    if (cond_29829) {
        mem_30666[0] = accs_mem_30545[0];
    } else {
        int64_t binop_x_29839 = segmap_group_sizze_27926 *
                num_whole_tiles_29729;
        int64_t ltid_29830 = sext_i32_i64(ltid_pre_31497);
        int32_t ltid_flat_29831 = local_tid_31493;
        
        if (slt64(ltid_29830, segmap_group_sizze_27926)) {
            int64_t j_29840 = ltid_29830 + binop_x_29839;
            bool cond_29845 = slt64(j_29840, res_21329);
            int32_t pre_29846;
            
            if (cond_29845) {
                int32_t index_primexp_29891 = sext_i64_i32(j_29840);
                
                pre_29846 = index_primexp_29891;
            } else {
                pre_29846 = 0;
            }
            ((__local int32_t *) mem_30548)[ltid_29830] = pre_29846;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_29851 = sext_i32_i64(ltid_pre_31497);
        int32_t ltid_flat_29852 = local_tid_31493;
        
        if (slt64(ltid_29851, segmap_group_sizze_27926)) {
            int64_t gtid_29859 = binop_x_29718 + ltid_29851;
            float acc_29862 = accs_mem_30545[0];
            bool cond_29863 = slt64(gtid_29859, m_20968);
            float acc_29864;
            
            if (cond_29863) {
                int32_t x_29860 = mem_30520[0];
                int32_t x_29861 = mem_30522[0];
                float x_29865;
                float redout_29950 = acc_29862;
                
                for (int64_t i_29951 = 0; i_29951 < residual_input_29828;
                     i_29951++) {
                    int32_t x_29869 = ((__local int32_t *) mem_30548)[i_29951];
                    bool cond_29870 = slt32(x_29869, x_29861);
                    float res_29871;
                    
                    if (cond_29870) {
                        int32_t x_29872 = add32(x_29860, x_29869);
                        int32_t x_29873 = sub32(x_29872, x_29861);
                        int32_t i_29874 = add32(1, x_29873);
                        int64_t i_29875 = sext_i32_i64(i_29874);
                        float res_29876 = ((__global
                                            float *) res_mem_30432)[gtid_29859 *
                                                                    N_20967 +
                                                                    i_29875];
                        
                        res_29871 = res_29876;
                    } else {
                        res_29871 = 0.0F;
                    }
                    
                    float res_29868 = res_29871 + redout_29950;
                    float redout_tmp_31501 = res_29868;
                    
                    redout_29950 = redout_tmp_31501;
                }
                x_29865 = redout_29950;
                acc_29864 = x_29865;
            } else {
                acc_29864 = acc_29862;
            }
            mem_30551[0] = acc_29864;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30666[0] = mem_30551[0];
    }
    if (slt64(sext_i32_i64(local_tid_31493) + segmap_group_sizze_27926 *
              sext_i32_i64(group_tid_31494), m_20968)) {
        ((__global float *) mem_30558)[sext_i32_i64(local_tid_31493) +
                                       segmap_group_sizze_27926 *
                                       sext_i32_i64(group_tid_31494)] =
            mem_30666[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_27926
}
__kernel void mainzisegred_large_25775(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_30853_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_30851_backing_aligned_1,
                                       int64_t N_20967, int64_t N_20969,
                                       int64_t res_20981, int64_t res_20987,
                                       int64_t num_groups_25914, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *binop_p_mem_29982,
                                       __global unsigned char *mem_30065,
                                       __global unsigned char *mem_30070,
                                       int64_t groups_per_segment_30837,
                                       int64_t elements_per_thread_30838,
                                       int64_t virt_num_groups_30839,
                                       int64_t threads_per_segment_30841,
                                       __global
                                       unsigned char *group_res_arr_mem_30842,
                                       __global
                                       unsigned char *mainzicounter_mem_30844)
{
    #define segred_group_sizze_25913 (mainzisegred_group_sizze_25769)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_30853_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_30853_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_30851_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30851_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30846;
    int32_t local_tid_30847;
    int64_t group_sizze_30850;
    int32_t wave_sizze_30849;
    int32_t group_tid_30848;
    
    global_tid_30846 = get_global_id(0);
    local_tid_30847 = get_local_id(0);
    group_sizze_30850 = get_local_size(0);
    wave_sizze_30849 = LOCKSTEP_WIDTH;
    group_tid_30848 = get_group_id(0);
    
    int32_t phys_tid_25775;
    
    phys_tid_25775 = global_tid_30846;
    
    __local char *red_arr_mem_30851;
    
    red_arr_mem_30851 = (__local char *) red_arr_mem_30851_backing_0;
    
    __local char *sync_arr_mem_30853;
    
    sync_arr_mem_30853 = (__local char *) sync_arr_mem_30853_backing_1;
    
    int32_t phys_group_id_30855;
    
    phys_group_id_30855 = get_group_id(0);
    for (int32_t i_30856 = 0; i_30856 <
         sdiv_up32(sext_i64_i32(virt_num_groups_30839) - phys_group_id_30855,
                   sext_i64_i32(num_groups_25914)); i_30856++) {
        int32_t virt_group_id_30857 = phys_group_id_30855 + i_30856 *
                sext_i64_i32(num_groups_25914);
        int32_t flat_segment_id_30858 = squot32(virt_group_id_30857,
                                                sext_i64_i32(groups_per_segment_30837));
        int64_t global_tid_30859 = srem64(sext_i32_i64(virt_group_id_30857) *
                                          segred_group_sizze_25913 +
                                          sext_i32_i64(local_tid_30847),
                                          segred_group_sizze_25913 *
                                          groups_per_segment_30837);
        int64_t gtid_25762 = squot64(sext_i32_i64(flat_segment_id_30858),
                                     res_20987 * res_20987);
        int64_t gtid_25763 = squot64(sext_i32_i64(flat_segment_id_30858) -
                                     squot64(sext_i32_i64(flat_segment_id_30858),
                                             res_20987 * res_20987) *
                                     (res_20987 * res_20987), res_20987);
        int64_t gtid_25764 = sext_i32_i64(flat_segment_id_30858) -
                squot64(sext_i32_i64(flat_segment_id_30858), res_20987 *
                        res_20987) * (res_20987 * res_20987) -
                squot64(sext_i32_i64(flat_segment_id_30858) -
                        squot64(sext_i32_i64(flat_segment_id_30858), res_20987 *
                                res_20987) * (res_20987 * res_20987),
                        res_20987) * res_20987;
        int64_t gtid_25774;
        float x_acc_30860;
        int64_t chunk_sizze_30861;
        
        chunk_sizze_30861 = smin64(elements_per_thread_30838,
                                   sdiv_up64(res_20981 -
                                             sext_i32_i64(sext_i64_i32(global_tid_30859)),
                                             threads_per_segment_30841));
        
        float x_25917;
        float x_25918;
        
        // neutral-initialise the accumulators
        {
            x_acc_30860 = 0.0F;
        }
        for (int64_t i_30865 = 0; i_30865 < chunk_sizze_30861; i_30865++) {
            gtid_25774 = sext_i32_i64(sext_i64_i32(global_tid_30859)) +
                threads_per_segment_30841 * i_30865;
            // apply map function
            {
                float x_25923 = ((__global
                                  float *) images_mem_29973)[gtid_25762 *
                                                             N_20969 +
                                                             gtid_25774];
                float x_25924 = ((__global
                                  float *) binop_p_mem_29982)[gtid_25763 *
                                                              N_20967 +
                                                              gtid_25774];
                float x_25925 = ((__global float *) mem_30065)[gtid_25764 *
                                                               N_20967 +
                                                               gtid_25774];
                float x_25926 = x_25924 * x_25925;
                bool res_25927;
                
                res_25927 = futrts_isnan32(x_25923);
                
                float y_25928;
                
                if (res_25927) {
                    y_25928 = 0.0F;
                } else {
                    y_25928 = 1.0F;
                }
                
                float res_25929 = x_25926 * y_25928;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_25917 = x_acc_30860;
                }
                // load new values
                {
                    x_25918 = res_25929;
                }
                // apply reduction operator
                {
                    float res_25919 = x_25917 + x_25918;
                    
                    // store in accumulator
                    {
                        x_acc_30860 = res_25919;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_25917 = x_acc_30860;
            ((__local
              float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                x_25917;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_30866;
        int32_t skip_waves_30867;
        
        skip_waves_30867 = 1;
        
        float x_30862;
        float x_30863;
        
        offset_30866 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_30847,
                      sext_i64_i32(segred_group_sizze_25913))) {
                x_30862 = ((__local
                            float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                        offset_30866)];
            }
        }
        offset_30866 = 1;
        while (slt32(offset_30866, wave_sizze_30849)) {
            if (slt32(local_tid_30847 + offset_30866,
                      sext_i64_i32(segred_group_sizze_25913)) &&
                ((local_tid_30847 - squot32(local_tid_30847, wave_sizze_30849) *
                  wave_sizze_30849) & (2 * offset_30866 - 1)) == 0) {
                // read array element
                {
                    x_30863 = ((volatile __local
                                float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                            offset_30866)];
                }
                // apply reduction operation
                {
                    float res_30864 = x_30862 + x_30863;
                    
                    x_30862 = res_30864;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                        x_30862;
                }
            }
            offset_30866 *= 2;
        }
        while (slt32(skip_waves_30867,
                     squot32(sext_i64_i32(segred_group_sizze_25913) +
                             wave_sizze_30849 - 1, wave_sizze_30849))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_30866 = skip_waves_30867 * wave_sizze_30849;
            if (slt32(local_tid_30847 + offset_30866,
                      sext_i64_i32(segred_group_sizze_25913)) &&
                ((local_tid_30847 - squot32(local_tid_30847, wave_sizze_30849) *
                  wave_sizze_30849) == 0 && (squot32(local_tid_30847,
                                                     wave_sizze_30849) & (2 *
                                                                          skip_waves_30867 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_30863 = ((__local
                                float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                            offset_30866)];
                }
                // apply reduction operation
                {
                    float res_30864 = x_30862 + x_30863;
                    
                    x_30862 = res_30864;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                        x_30862;
                }
            }
            skip_waves_30867 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_30847) == 0) {
                x_acc_30860 = x_30862;
            }
        }
        if (groups_per_segment_30837 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_30847 == 0) {
                    ((__global float *) mem_30070)[gtid_25762 * (res_20987 *
                                                                 res_20987) +
                                                   gtid_25763 * res_20987 +
                                                   gtid_25764] = x_acc_30860;
                }
            }
        } else {
            int32_t old_counter_30868;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_30847 == 0) {
                    ((__global
                      float *) group_res_arr_mem_30842)[sext_i32_i64(virt_group_id_30857) *
                                                        segred_group_sizze_25913] =
                        x_acc_30860;
                    mem_fence_global();
                    old_counter_30868 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_30844)[sext_i32_i64(srem32(flat_segment_id_30858,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_30853)[0] =
                        old_counter_30868 == groups_per_segment_30837 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_30869;
            
            is_last_group_30869 = ((__local bool *) sync_arr_mem_30853)[0];
            if (is_last_group_30869) {
                if (local_tid_30847 == 0) {
                    old_counter_30868 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_30844)[sext_i32_i64(srem32(flat_segment_id_30858,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_30837));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_30870 =
                            sdiv_up64(groups_per_segment_30837,
                                      segred_group_sizze_25913);
                    
                    x_25917 = 0.0F;
                    for (int64_t i_30871 = 0; i_30871 < read_per_thread_30870;
                         i_30871++) {
                        int64_t group_res_id_30872 =
                                sext_i32_i64(local_tid_30847) *
                                read_per_thread_30870 + i_30871;
                        int64_t index_of_group_res_30873 =
                                sext_i32_i64(flat_segment_id_30858) *
                                groups_per_segment_30837 + group_res_id_30872;
                        
                        if (slt64(group_res_id_30872,
                                  groups_per_segment_30837)) {
                            x_25918 = ((__global
                                        float *) group_res_arr_mem_30842)[index_of_group_res_30873 *
                                                                          segred_group_sizze_25913];
                            
                            float res_25919;
                            
                            res_25919 = x_25917 + x_25918;
                            x_25917 = res_25919;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                    x_25917;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_30874;
                    int32_t skip_waves_30875;
                    
                    skip_waves_30875 = 1;
                    
                    float x_30862;
                    float x_30863;
                    
                    offset_30874 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_30847,
                                  sext_i64_i32(segred_group_sizze_25913))) {
                            x_30862 = ((__local
                                        float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                                    offset_30874)];
                        }
                    }
                    offset_30874 = 1;
                    while (slt32(offset_30874, wave_sizze_30849)) {
                        if (slt32(local_tid_30847 + offset_30874,
                                  sext_i64_i32(segred_group_sizze_25913)) &&
                            ((local_tid_30847 - squot32(local_tid_30847,
                                                        wave_sizze_30849) *
                              wave_sizze_30849) & (2 * offset_30874 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_30863 = ((volatile __local
                                            float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                                        offset_30874)];
                            }
                            // apply reduction operation
                            {
                                float res_30864 = x_30862 + x_30863;
                                
                                x_30862 = res_30864;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                                    x_30862;
                            }
                        }
                        offset_30874 *= 2;
                    }
                    while (slt32(skip_waves_30875,
                                 squot32(sext_i64_i32(segred_group_sizze_25913) +
                                         wave_sizze_30849 - 1,
                                         wave_sizze_30849))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_30874 = skip_waves_30875 * wave_sizze_30849;
                        if (slt32(local_tid_30847 + offset_30874,
                                  sext_i64_i32(segred_group_sizze_25913)) &&
                            ((local_tid_30847 - squot32(local_tid_30847,
                                                        wave_sizze_30849) *
                              wave_sizze_30849) == 0 &&
                             (squot32(local_tid_30847, wave_sizze_30849) & (2 *
                                                                            skip_waves_30875 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_30863 = ((__local
                                            float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847 +
                                                                        offset_30874)];
                            }
                            // apply reduction operation
                            {
                                float res_30864 = x_30862 + x_30863;
                                
                                x_30862 = res_30864;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_30851)[sext_i32_i64(local_tid_30847)] =
                                    x_30862;
                            }
                        }
                        skip_waves_30875 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_30847 == 0) {
                            ((__global float *) mem_30070)[gtid_25762 *
                                                           (res_20987 *
                                                            res_20987) +
                                                           gtid_25763 *
                                                           res_20987 +
                                                           gtid_25764] =
                                x_30862;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_25913
}
__kernel void mainzisegred_large_26948(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31007_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31005_backing_aligned_1,
                                       int64_t N_20967, int64_t N_20969,
                                       int64_t res_20981, int64_t res_20987,
                                       int64_t num_groups_27001, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *binop_p_mem_29982,
                                       __global unsigned char *mem_30251,
                                       int64_t groups_per_segment_30991,
                                       int64_t elements_per_thread_30992,
                                       int64_t virt_num_groups_30993,
                                       int64_t threads_per_segment_30995,
                                       __global
                                       unsigned char *group_res_arr_mem_30996,
                                       __global
                                       unsigned char *mainzicounter_mem_30998)
{
    #define segred_group_sizze_27000 (mainzisegred_group_sizze_26942)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31007_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31007_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31005_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31005_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31000;
    int32_t local_tid_31001;
    int64_t group_sizze_31004;
    int32_t wave_sizze_31003;
    int32_t group_tid_31002;
    
    global_tid_31000 = get_global_id(0);
    local_tid_31001 = get_local_id(0);
    group_sizze_31004 = get_local_size(0);
    wave_sizze_31003 = LOCKSTEP_WIDTH;
    group_tid_31002 = get_group_id(0);
    
    int32_t phys_tid_26948;
    
    phys_tid_26948 = global_tid_31000;
    
    __local char *red_arr_mem_31005;
    
    red_arr_mem_31005 = (__local char *) red_arr_mem_31005_backing_0;
    
    __local char *sync_arr_mem_31007;
    
    sync_arr_mem_31007 = (__local char *) sync_arr_mem_31007_backing_1;
    
    int32_t phys_group_id_31009;
    
    phys_group_id_31009 = get_group_id(0);
    for (int32_t i_31010 = 0; i_31010 <
         sdiv_up32(sext_i64_i32(virt_num_groups_30993) - phys_group_id_31009,
                   sext_i64_i32(num_groups_27001)); i_31010++) {
        int32_t virt_group_id_31011 = phys_group_id_31009 + i_31010 *
                sext_i64_i32(num_groups_27001);
        int32_t flat_segment_id_31012 = squot32(virt_group_id_31011,
                                                sext_i64_i32(groups_per_segment_30991));
        int64_t global_tid_31013 = srem64(sext_i32_i64(virt_group_id_31011) *
                                          segred_group_sizze_27000 +
                                          sext_i32_i64(local_tid_31001),
                                          segred_group_sizze_27000 *
                                          groups_per_segment_30991);
        int64_t gtid_26937 = squot64(sext_i32_i64(flat_segment_id_31012),
                                     res_20987);
        int64_t gtid_26938 = sext_i32_i64(flat_segment_id_31012) -
                squot64(sext_i32_i64(flat_segment_id_31012), res_20987) *
                res_20987;
        int64_t gtid_26947;
        float x_acc_31014;
        int64_t chunk_sizze_31015;
        
        chunk_sizze_31015 = smin64(elements_per_thread_30992,
                                   sdiv_up64(res_20981 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31013)),
                                             threads_per_segment_30995));
        
        float x_27004;
        float x_27005;
        
        // neutral-initialise the accumulators
        {
            x_acc_31014 = 0.0F;
        }
        for (int64_t i_31019 = 0; i_31019 < chunk_sizze_31015; i_31019++) {
            gtid_26947 = sext_i32_i64(sext_i64_i32(global_tid_31013)) +
                threads_per_segment_30995 * i_31019;
            // apply map function
            {
                float x_27010 = ((__global
                                  float *) images_mem_29973)[gtid_26937 *
                                                             N_20969 +
                                                             gtid_26947];
                bool res_27011;
                
                res_27011 = futrts_isnan32(x_27010);
                
                float res_27012;
                
                if (res_27011) {
                    res_27012 = 0.0F;
                } else {
                    float x_27009 = ((__global
                                      float *) binop_p_mem_29982)[gtid_26938 *
                                                                  N_20967 +
                                                                  gtid_26947];
                    float res_27013 = x_27009 * x_27010;
                    
                    res_27012 = res_27013;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_27004 = x_acc_31014;
                }
                // load new values
                {
                    x_27005 = res_27012;
                }
                // apply reduction operator
                {
                    float res_27006 = x_27004 + x_27005;
                    
                    // store in accumulator
                    {
                        x_acc_31014 = res_27006;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27004 = x_acc_31014;
            ((__local
              float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                x_27004;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31020;
        int32_t skip_waves_31021;
        
        skip_waves_31021 = 1;
        
        float x_31016;
        float x_31017;
        
        offset_31020 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31001,
                      sext_i64_i32(segred_group_sizze_27000))) {
                x_31016 = ((__local
                            float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                        offset_31020)];
            }
        }
        offset_31020 = 1;
        while (slt32(offset_31020, wave_sizze_31003)) {
            if (slt32(local_tid_31001 + offset_31020,
                      sext_i64_i32(segred_group_sizze_27000)) &&
                ((local_tid_31001 - squot32(local_tid_31001, wave_sizze_31003) *
                  wave_sizze_31003) & (2 * offset_31020 - 1)) == 0) {
                // read array element
                {
                    x_31017 = ((volatile __local
                                float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                            offset_31020)];
                }
                // apply reduction operation
                {
                    float res_31018 = x_31016 + x_31017;
                    
                    x_31016 = res_31018;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                        x_31016;
                }
            }
            offset_31020 *= 2;
        }
        while (slt32(skip_waves_31021,
                     squot32(sext_i64_i32(segred_group_sizze_27000) +
                             wave_sizze_31003 - 1, wave_sizze_31003))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31020 = skip_waves_31021 * wave_sizze_31003;
            if (slt32(local_tid_31001 + offset_31020,
                      sext_i64_i32(segred_group_sizze_27000)) &&
                ((local_tid_31001 - squot32(local_tid_31001, wave_sizze_31003) *
                  wave_sizze_31003) == 0 && (squot32(local_tid_31001,
                                                     wave_sizze_31003) & (2 *
                                                                          skip_waves_31021 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31017 = ((__local
                                float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                            offset_31020)];
                }
                // apply reduction operation
                {
                    float res_31018 = x_31016 + x_31017;
                    
                    x_31016 = res_31018;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                        x_31016;
                }
            }
            skip_waves_31021 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31001) == 0) {
                x_acc_31014 = x_31016;
            }
        }
        if (groups_per_segment_30991 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31001 == 0) {
                    ((__global float *) mem_30251)[gtid_26937 * res_20987 +
                                                   gtid_26938] = x_acc_31014;
                }
            }
        } else {
            int32_t old_counter_31022;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31001 == 0) {
                    ((__global
                      float *) group_res_arr_mem_30996)[sext_i32_i64(virt_group_id_31011) *
                                                        segred_group_sizze_27000] =
                        x_acc_31014;
                    mem_fence_global();
                    old_counter_31022 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_30998)[sext_i32_i64(srem32(flat_segment_id_31012,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31007)[0] =
                        old_counter_31022 == groups_per_segment_30991 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31023;
            
            is_last_group_31023 = ((__local bool *) sync_arr_mem_31007)[0];
            if (is_last_group_31023) {
                if (local_tid_31001 == 0) {
                    old_counter_31022 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_30998)[sext_i32_i64(srem32(flat_segment_id_31012,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_30991));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31024 =
                            sdiv_up64(groups_per_segment_30991,
                                      segred_group_sizze_27000);
                    
                    x_27004 = 0.0F;
                    for (int64_t i_31025 = 0; i_31025 < read_per_thread_31024;
                         i_31025++) {
                        int64_t group_res_id_31026 =
                                sext_i32_i64(local_tid_31001) *
                                read_per_thread_31024 + i_31025;
                        int64_t index_of_group_res_31027 =
                                sext_i32_i64(flat_segment_id_31012) *
                                groups_per_segment_30991 + group_res_id_31026;
                        
                        if (slt64(group_res_id_31026,
                                  groups_per_segment_30991)) {
                            x_27005 = ((__global
                                        float *) group_res_arr_mem_30996)[index_of_group_res_31027 *
                                                                          segred_group_sizze_27000];
                            
                            float res_27006;
                            
                            res_27006 = x_27004 + x_27005;
                            x_27004 = res_27006;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                    x_27004;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31028;
                    int32_t skip_waves_31029;
                    
                    skip_waves_31029 = 1;
                    
                    float x_31016;
                    float x_31017;
                    
                    offset_31028 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31001,
                                  sext_i64_i32(segred_group_sizze_27000))) {
                            x_31016 = ((__local
                                        float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                                    offset_31028)];
                        }
                    }
                    offset_31028 = 1;
                    while (slt32(offset_31028, wave_sizze_31003)) {
                        if (slt32(local_tid_31001 + offset_31028,
                                  sext_i64_i32(segred_group_sizze_27000)) &&
                            ((local_tid_31001 - squot32(local_tid_31001,
                                                        wave_sizze_31003) *
                              wave_sizze_31003) & (2 * offset_31028 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31017 = ((volatile __local
                                            float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                                        offset_31028)];
                            }
                            // apply reduction operation
                            {
                                float res_31018 = x_31016 + x_31017;
                                
                                x_31016 = res_31018;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                                    x_31016;
                            }
                        }
                        offset_31028 *= 2;
                    }
                    while (slt32(skip_waves_31029,
                                 squot32(sext_i64_i32(segred_group_sizze_27000) +
                                         wave_sizze_31003 - 1,
                                         wave_sizze_31003))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31028 = skip_waves_31029 * wave_sizze_31003;
                        if (slt32(local_tid_31001 + offset_31028,
                                  sext_i64_i32(segred_group_sizze_27000)) &&
                            ((local_tid_31001 - squot32(local_tid_31001,
                                                        wave_sizze_31003) *
                              wave_sizze_31003) == 0 &&
                             (squot32(local_tid_31001, wave_sizze_31003) & (2 *
                                                                            skip_waves_31029 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31017 = ((__local
                                            float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001 +
                                                                        offset_31028)];
                            }
                            // apply reduction operation
                            {
                                float res_31018 = x_31016 + x_31017;
                                
                                x_31016 = res_31018;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31005)[sext_i32_i64(local_tid_31001)] =
                                    x_31016;
                            }
                        }
                        skip_waves_31029 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31001 == 0) {
                            ((__global float *) mem_30251)[gtid_26937 *
                                                           res_20987 +
                                                           gtid_26938] =
                                x_31016;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27000
}
__kernel void mainzisegred_large_27085(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31088_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31086_backing_aligned_1,
                                       int64_t res_20987,
                                       int64_t num_groups_27134, __global
                                       unsigned char *res_mem_30166, __global
                                       unsigned char *res_mem_30257, __global
                                       unsigned char *mem_30294,
                                       int64_t groups_per_segment_31072,
                                       int64_t elements_per_thread_31073,
                                       int64_t virt_num_groups_31074,
                                       int64_t threads_per_segment_31076,
                                       __global
                                       unsigned char *group_res_arr_mem_31077,
                                       __global
                                       unsigned char *mainzicounter_mem_31079)
{
    #define segred_group_sizze_27133 (mainzisegred_group_sizze_27079)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31088_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31088_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31086_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31086_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31081;
    int32_t local_tid_31082;
    int64_t group_sizze_31085;
    int32_t wave_sizze_31084;
    int32_t group_tid_31083;
    
    global_tid_31081 = get_global_id(0);
    local_tid_31082 = get_local_id(0);
    group_sizze_31085 = get_local_size(0);
    wave_sizze_31084 = LOCKSTEP_WIDTH;
    group_tid_31083 = get_group_id(0);
    
    int32_t phys_tid_27085;
    
    phys_tid_27085 = global_tid_31081;
    
    __local char *red_arr_mem_31086;
    
    red_arr_mem_31086 = (__local char *) red_arr_mem_31086_backing_0;
    
    __local char *sync_arr_mem_31088;
    
    sync_arr_mem_31088 = (__local char *) sync_arr_mem_31088_backing_1;
    
    int32_t phys_group_id_31090;
    
    phys_group_id_31090 = get_group_id(0);
    for (int32_t i_31091 = 0; i_31091 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31074) - phys_group_id_31090,
                   sext_i64_i32(num_groups_27134)); i_31091++) {
        int32_t virt_group_id_31092 = phys_group_id_31090 + i_31091 *
                sext_i64_i32(num_groups_27134);
        int32_t flat_segment_id_31093 = squot32(virt_group_id_31092,
                                                sext_i64_i32(groups_per_segment_31072));
        int64_t global_tid_31094 = srem64(sext_i32_i64(virt_group_id_31092) *
                                          segred_group_sizze_27133 +
                                          sext_i32_i64(local_tid_31082),
                                          segred_group_sizze_27133 *
                                          groups_per_segment_31072);
        int64_t gtid_27074 = squot64(sext_i32_i64(flat_segment_id_31093),
                                     res_20987);
        int64_t gtid_27075 = sext_i32_i64(flat_segment_id_31093) -
                squot64(sext_i32_i64(flat_segment_id_31093), res_20987) *
                res_20987;
        int64_t gtid_27084;
        float x_acc_31095;
        int64_t chunk_sizze_31096;
        
        chunk_sizze_31096 = smin64(elements_per_thread_31073,
                                   sdiv_up64(res_20987 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31094)),
                                             threads_per_segment_31076));
        
        float x_27137;
        float x_27138;
        
        // neutral-initialise the accumulators
        {
            x_acc_31095 = 0.0F;
        }
        for (int64_t i_31100 = 0; i_31100 < chunk_sizze_31096; i_31100++) {
            gtid_27084 = sext_i32_i64(sext_i64_i32(global_tid_31094)) +
                threads_per_segment_31076 * i_31100;
            // apply map function
            {
                float x_27143 = ((__global float *) res_mem_30257)[gtid_27074 *
                                                                   res_20987 +
                                                                   gtid_27084];
                float x_27144 = ((__global float *) res_mem_30166)[gtid_27074 *
                                                                   (res_20987 *
                                                                    res_20987) +
                                                                   gtid_27075 *
                                                                   res_20987 +
                                                                   gtid_27084];
                float res_27145 = x_27143 * x_27144;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27137 = x_acc_31095;
                }
                // load new values
                {
                    x_27138 = res_27145;
                }
                // apply reduction operator
                {
                    float res_27139 = x_27137 + x_27138;
                    
                    // store in accumulator
                    {
                        x_acc_31095 = res_27139;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27137 = x_acc_31095;
            ((__local
              float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                x_27137;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31101;
        int32_t skip_waves_31102;
        
        skip_waves_31102 = 1;
        
        float x_31097;
        float x_31098;
        
        offset_31101 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31082,
                      sext_i64_i32(segred_group_sizze_27133))) {
                x_31097 = ((__local
                            float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                        offset_31101)];
            }
        }
        offset_31101 = 1;
        while (slt32(offset_31101, wave_sizze_31084)) {
            if (slt32(local_tid_31082 + offset_31101,
                      sext_i64_i32(segred_group_sizze_27133)) &&
                ((local_tid_31082 - squot32(local_tid_31082, wave_sizze_31084) *
                  wave_sizze_31084) & (2 * offset_31101 - 1)) == 0) {
                // read array element
                {
                    x_31098 = ((volatile __local
                                float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                            offset_31101)];
                }
                // apply reduction operation
                {
                    float res_31099 = x_31097 + x_31098;
                    
                    x_31097 = res_31099;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                        x_31097;
                }
            }
            offset_31101 *= 2;
        }
        while (slt32(skip_waves_31102,
                     squot32(sext_i64_i32(segred_group_sizze_27133) +
                             wave_sizze_31084 - 1, wave_sizze_31084))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31101 = skip_waves_31102 * wave_sizze_31084;
            if (slt32(local_tid_31082 + offset_31101,
                      sext_i64_i32(segred_group_sizze_27133)) &&
                ((local_tid_31082 - squot32(local_tid_31082, wave_sizze_31084) *
                  wave_sizze_31084) == 0 && (squot32(local_tid_31082,
                                                     wave_sizze_31084) & (2 *
                                                                          skip_waves_31102 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31098 = ((__local
                                float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                            offset_31101)];
                }
                // apply reduction operation
                {
                    float res_31099 = x_31097 + x_31098;
                    
                    x_31097 = res_31099;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                        x_31097;
                }
            }
            skip_waves_31102 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31082) == 0) {
                x_acc_31095 = x_31097;
            }
        }
        if (groups_per_segment_31072 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31082 == 0) {
                    ((__global float *) mem_30294)[gtid_27074 * res_20987 +
                                                   gtid_27075] = x_acc_31095;
                }
            }
        } else {
            int32_t old_counter_31103;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31082 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31077)[sext_i32_i64(virt_group_id_31092) *
                                                        segred_group_sizze_27133] =
                        x_acc_31095;
                    mem_fence_global();
                    old_counter_31103 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31079)[sext_i32_i64(srem32(flat_segment_id_31093,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31088)[0] =
                        old_counter_31103 == groups_per_segment_31072 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31104;
            
            is_last_group_31104 = ((__local bool *) sync_arr_mem_31088)[0];
            if (is_last_group_31104) {
                if (local_tid_31082 == 0) {
                    old_counter_31103 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31079)[sext_i32_i64(srem32(flat_segment_id_31093,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31072));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31105 =
                            sdiv_up64(groups_per_segment_31072,
                                      segred_group_sizze_27133);
                    
                    x_27137 = 0.0F;
                    for (int64_t i_31106 = 0; i_31106 < read_per_thread_31105;
                         i_31106++) {
                        int64_t group_res_id_31107 =
                                sext_i32_i64(local_tid_31082) *
                                read_per_thread_31105 + i_31106;
                        int64_t index_of_group_res_31108 =
                                sext_i32_i64(flat_segment_id_31093) *
                                groups_per_segment_31072 + group_res_id_31107;
                        
                        if (slt64(group_res_id_31107,
                                  groups_per_segment_31072)) {
                            x_27138 = ((__global
                                        float *) group_res_arr_mem_31077)[index_of_group_res_31108 *
                                                                          segred_group_sizze_27133];
                            
                            float res_27139;
                            
                            res_27139 = x_27137 + x_27138;
                            x_27137 = res_27139;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                    x_27137;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31109;
                    int32_t skip_waves_31110;
                    
                    skip_waves_31110 = 1;
                    
                    float x_31097;
                    float x_31098;
                    
                    offset_31109 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31082,
                                  sext_i64_i32(segred_group_sizze_27133))) {
                            x_31097 = ((__local
                                        float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                                    offset_31109)];
                        }
                    }
                    offset_31109 = 1;
                    while (slt32(offset_31109, wave_sizze_31084)) {
                        if (slt32(local_tid_31082 + offset_31109,
                                  sext_i64_i32(segred_group_sizze_27133)) &&
                            ((local_tid_31082 - squot32(local_tid_31082,
                                                        wave_sizze_31084) *
                              wave_sizze_31084) & (2 * offset_31109 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31098 = ((volatile __local
                                            float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                                        offset_31109)];
                            }
                            // apply reduction operation
                            {
                                float res_31099 = x_31097 + x_31098;
                                
                                x_31097 = res_31099;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                                    x_31097;
                            }
                        }
                        offset_31109 *= 2;
                    }
                    while (slt32(skip_waves_31110,
                                 squot32(sext_i64_i32(segred_group_sizze_27133) +
                                         wave_sizze_31084 - 1,
                                         wave_sizze_31084))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31109 = skip_waves_31110 * wave_sizze_31084;
                        if (slt32(local_tid_31082 + offset_31109,
                                  sext_i64_i32(segred_group_sizze_27133)) &&
                            ((local_tid_31082 - squot32(local_tid_31082,
                                                        wave_sizze_31084) *
                              wave_sizze_31084) == 0 &&
                             (squot32(local_tid_31082, wave_sizze_31084) & (2 *
                                                                            skip_waves_31110 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31098 = ((__local
                                            float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082 +
                                                                        offset_31109)];
                            }
                            // apply reduction operation
                            {
                                float res_31099 = x_31097 + x_31098;
                                
                                x_31097 = res_31099;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31086)[sext_i32_i64(local_tid_31082)] =
                                    x_31097;
                            }
                        }
                        skip_waves_31110 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31082 == 0) {
                            ((__global float *) mem_30294)[gtid_27074 *
                                                           res_20987 +
                                                           gtid_27075] =
                                x_31097;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27133
}
__kernel void mainzisegred_large_27215(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31176_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31174_backing_aligned_1,
                                       int64_t N_20967, int64_t res_20987,
                                       int64_t num_groups_27262, __global
                                       unsigned char *mem_29989, __global
                                       unsigned char *res_mem_30300, __global
                                       unsigned char *mem_30388,
                                       int64_t groups_per_segment_31160,
                                       int64_t elements_per_thread_31161,
                                       int64_t virt_num_groups_31162,
                                       int64_t threads_per_segment_31164,
                                       __global
                                       unsigned char *group_res_arr_mem_31165,
                                       __global
                                       unsigned char *mainzicounter_mem_31167)
{
    #define segred_group_sizze_27261 (mainzisegred_group_sizze_27209)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31176_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31176_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31174_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31174_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31169;
    int32_t local_tid_31170;
    int64_t group_sizze_31173;
    int32_t wave_sizze_31172;
    int32_t group_tid_31171;
    
    global_tid_31169 = get_global_id(0);
    local_tid_31170 = get_local_id(0);
    group_sizze_31173 = get_local_size(0);
    wave_sizze_31172 = LOCKSTEP_WIDTH;
    group_tid_31171 = get_group_id(0);
    
    int32_t phys_tid_27215;
    
    phys_tid_27215 = global_tid_31169;
    
    __local char *red_arr_mem_31174;
    
    red_arr_mem_31174 = (__local char *) red_arr_mem_31174_backing_0;
    
    __local char *sync_arr_mem_31176;
    
    sync_arr_mem_31176 = (__local char *) sync_arr_mem_31176_backing_1;
    
    int32_t phys_group_id_31178;
    
    phys_group_id_31178 = get_group_id(0);
    for (int32_t i_31179 = 0; i_31179 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31162) - phys_group_id_31178,
                   sext_i64_i32(num_groups_27262)); i_31179++) {
        int32_t virt_group_id_31180 = phys_group_id_31178 + i_31179 *
                sext_i64_i32(num_groups_27262);
        int32_t flat_segment_id_31181 = squot32(virt_group_id_31180,
                                                sext_i64_i32(groups_per_segment_31160));
        int64_t global_tid_31182 = srem64(sext_i32_i64(virt_group_id_31180) *
                                          segred_group_sizze_27261 +
                                          sext_i32_i64(local_tid_31170),
                                          segred_group_sizze_27261 *
                                          groups_per_segment_31160);
        int64_t gtid_27204 = squot64(sext_i32_i64(flat_segment_id_31181),
                                     N_20967);
        int64_t gtid_27205 = sext_i32_i64(flat_segment_id_31181) -
                squot64(sext_i32_i64(flat_segment_id_31181), N_20967) * N_20967;
        int64_t gtid_27214;
        float x_acc_31183;
        int64_t chunk_sizze_31184;
        
        chunk_sizze_31184 = smin64(elements_per_thread_31161,
                                   sdiv_up64(res_20987 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31182)),
                                             threads_per_segment_31164));
        
        float x_27265;
        float x_27266;
        
        // neutral-initialise the accumulators
        {
            x_acc_31183 = 0.0F;
        }
        for (int64_t i_31188 = 0; i_31188 < chunk_sizze_31184; i_31188++) {
            gtid_27214 = sext_i32_i64(sext_i64_i32(global_tid_31182)) +
                threads_per_segment_31164 * i_31188;
            // apply map function
            {
                float x_27270 = ((__global float *) res_mem_30300)[gtid_27204 *
                                                                   res_20987 +
                                                                   gtid_27214];
                float x_27271 = ((__global float *) mem_29989)[gtid_27205 *
                                                               res_20987 +
                                                               gtid_27214];
                float res_27272 = x_27270 * x_27271;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27265 = x_acc_31183;
                }
                // load new values
                {
                    x_27266 = res_27272;
                }
                // apply reduction operator
                {
                    float res_27267 = x_27265 + x_27266;
                    
                    // store in accumulator
                    {
                        x_acc_31183 = res_27267;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27265 = x_acc_31183;
            ((__local
              float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                x_27265;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31189;
        int32_t skip_waves_31190;
        
        skip_waves_31190 = 1;
        
        float x_31185;
        float x_31186;
        
        offset_31189 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31170,
                      sext_i64_i32(segred_group_sizze_27261))) {
                x_31185 = ((__local
                            float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                        offset_31189)];
            }
        }
        offset_31189 = 1;
        while (slt32(offset_31189, wave_sizze_31172)) {
            if (slt32(local_tid_31170 + offset_31189,
                      sext_i64_i32(segred_group_sizze_27261)) &&
                ((local_tid_31170 - squot32(local_tid_31170, wave_sizze_31172) *
                  wave_sizze_31172) & (2 * offset_31189 - 1)) == 0) {
                // read array element
                {
                    x_31186 = ((volatile __local
                                float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                            offset_31189)];
                }
                // apply reduction operation
                {
                    float res_31187 = x_31185 + x_31186;
                    
                    x_31185 = res_31187;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                        x_31185;
                }
            }
            offset_31189 *= 2;
        }
        while (slt32(skip_waves_31190,
                     squot32(sext_i64_i32(segred_group_sizze_27261) +
                             wave_sizze_31172 - 1, wave_sizze_31172))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31189 = skip_waves_31190 * wave_sizze_31172;
            if (slt32(local_tid_31170 + offset_31189,
                      sext_i64_i32(segred_group_sizze_27261)) &&
                ((local_tid_31170 - squot32(local_tid_31170, wave_sizze_31172) *
                  wave_sizze_31172) == 0 && (squot32(local_tid_31170,
                                                     wave_sizze_31172) & (2 *
                                                                          skip_waves_31190 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31186 = ((__local
                                float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                            offset_31189)];
                }
                // apply reduction operation
                {
                    float res_31187 = x_31185 + x_31186;
                    
                    x_31185 = res_31187;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                        x_31185;
                }
            }
            skip_waves_31190 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31170) == 0) {
                x_acc_31183 = x_31185;
            }
        }
        if (groups_per_segment_31160 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31170 == 0) {
                    ((__global float *) mem_30388)[gtid_27204 * N_20967 +
                                                   gtid_27205] = x_acc_31183;
                }
            }
        } else {
            int32_t old_counter_31191;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31170 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31165)[sext_i32_i64(virt_group_id_31180) *
                                                        segred_group_sizze_27261] =
                        x_acc_31183;
                    mem_fence_global();
                    old_counter_31191 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31167)[sext_i32_i64(srem32(flat_segment_id_31181,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31176)[0] =
                        old_counter_31191 == groups_per_segment_31160 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31192;
            
            is_last_group_31192 = ((__local bool *) sync_arr_mem_31176)[0];
            if (is_last_group_31192) {
                if (local_tid_31170 == 0) {
                    old_counter_31191 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31167)[sext_i32_i64(srem32(flat_segment_id_31181,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31160));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31193 =
                            sdiv_up64(groups_per_segment_31160,
                                      segred_group_sizze_27261);
                    
                    x_27265 = 0.0F;
                    for (int64_t i_31194 = 0; i_31194 < read_per_thread_31193;
                         i_31194++) {
                        int64_t group_res_id_31195 =
                                sext_i32_i64(local_tid_31170) *
                                read_per_thread_31193 + i_31194;
                        int64_t index_of_group_res_31196 =
                                sext_i32_i64(flat_segment_id_31181) *
                                groups_per_segment_31160 + group_res_id_31195;
                        
                        if (slt64(group_res_id_31195,
                                  groups_per_segment_31160)) {
                            x_27266 = ((__global
                                        float *) group_res_arr_mem_31165)[index_of_group_res_31196 *
                                                                          segred_group_sizze_27261];
                            
                            float res_27267;
                            
                            res_27267 = x_27265 + x_27266;
                            x_27265 = res_27267;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                    x_27265;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31197;
                    int32_t skip_waves_31198;
                    
                    skip_waves_31198 = 1;
                    
                    float x_31185;
                    float x_31186;
                    
                    offset_31197 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31170,
                                  sext_i64_i32(segred_group_sizze_27261))) {
                            x_31185 = ((__local
                                        float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                                    offset_31197)];
                        }
                    }
                    offset_31197 = 1;
                    while (slt32(offset_31197, wave_sizze_31172)) {
                        if (slt32(local_tid_31170 + offset_31197,
                                  sext_i64_i32(segred_group_sizze_27261)) &&
                            ((local_tid_31170 - squot32(local_tid_31170,
                                                        wave_sizze_31172) *
                              wave_sizze_31172) & (2 * offset_31197 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31186 = ((volatile __local
                                            float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                                        offset_31197)];
                            }
                            // apply reduction operation
                            {
                                float res_31187 = x_31185 + x_31186;
                                
                                x_31185 = res_31187;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                                    x_31185;
                            }
                        }
                        offset_31197 *= 2;
                    }
                    while (slt32(skip_waves_31198,
                                 squot32(sext_i64_i32(segred_group_sizze_27261) +
                                         wave_sizze_31172 - 1,
                                         wave_sizze_31172))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31197 = skip_waves_31198 * wave_sizze_31172;
                        if (slt32(local_tid_31170 + offset_31197,
                                  sext_i64_i32(segred_group_sizze_27261)) &&
                            ((local_tid_31170 - squot32(local_tid_31170,
                                                        wave_sizze_31172) *
                              wave_sizze_31172) == 0 &&
                             (squot32(local_tid_31170, wave_sizze_31172) & (2 *
                                                                            skip_waves_31198 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31186 = ((__local
                                            float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170 +
                                                                        offset_31197)];
                            }
                            // apply reduction operation
                            {
                                float res_31187 = x_31185 + x_31186;
                                
                                x_31185 = res_31187;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31174)[sext_i32_i64(local_tid_31170)] =
                                    x_31185;
                            }
                        }
                        skip_waves_31198 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31170 == 0) {
                            ((__global float *) mem_30388)[gtid_27204 *
                                                           N_20967 +
                                                           gtid_27205] =
                                x_31185;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27261
}
__kernel void mainzisegred_large_27781(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31430_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31428_backing_aligned_1,
                                       int64_t N_20967, int64_t res_20981,
                                       int64_t num_groups_27828, __global
                                       unsigned char *res_mem_30432, __global
                                       unsigned char *mem_30499, __global
                                       unsigned char *mem_30502,
                                       int64_t groups_per_segment_31414,
                                       int64_t elements_per_thread_31415,
                                       int64_t virt_num_groups_31416,
                                       int64_t threads_per_segment_31418,
                                       __global
                                       unsigned char *group_res_arr_mem_31419,
                                       __global
                                       unsigned char *mainzicounter_mem_31421)
{
    #define segred_group_sizze_27827 (mainzisegred_group_sizze_27775)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31430_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31430_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31428_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31428_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31423;
    int32_t local_tid_31424;
    int64_t group_sizze_31427;
    int32_t wave_sizze_31426;
    int32_t group_tid_31425;
    
    global_tid_31423 = get_global_id(0);
    local_tid_31424 = get_local_id(0);
    group_sizze_31427 = get_local_size(0);
    wave_sizze_31426 = LOCKSTEP_WIDTH;
    group_tid_31425 = get_group_id(0);
    
    int32_t phys_tid_27781;
    
    phys_tid_27781 = global_tid_31423;
    
    __local char *red_arr_mem_31428;
    
    red_arr_mem_31428 = (__local char *) red_arr_mem_31428_backing_0;
    
    __local char *sync_arr_mem_31430;
    
    sync_arr_mem_31430 = (__local char *) sync_arr_mem_31430_backing_1;
    
    int32_t phys_group_id_31432;
    
    phys_group_id_31432 = get_group_id(0);
    for (int32_t i_31433 = 0; i_31433 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31416) - phys_group_id_31432,
                   sext_i64_i32(num_groups_27828)); i_31433++) {
        int32_t virt_group_id_31434 = phys_group_id_31432 + i_31433 *
                sext_i64_i32(num_groups_27828);
        int32_t flat_segment_id_31435 = squot32(virt_group_id_31434,
                                                sext_i64_i32(groups_per_segment_31414));
        int64_t global_tid_31436 = srem64(sext_i32_i64(virt_group_id_31434) *
                                          segred_group_sizze_27827 +
                                          sext_i32_i64(local_tid_31424),
                                          segred_group_sizze_27827 *
                                          groups_per_segment_31414);
        int64_t gtid_27772 = sext_i32_i64(flat_segment_id_31435);
        int64_t gtid_27780;
        float x_acc_31437;
        int64_t chunk_sizze_31438;
        
        chunk_sizze_31438 = smin64(elements_per_thread_31415,
                                   sdiv_up64(res_20981 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31436)),
                                             threads_per_segment_31418));
        
        float x_27831;
        float x_27832;
        
        // neutral-initialise the accumulators
        {
            x_acc_31437 = 0.0F;
        }
        for (int64_t i_31442 = 0; i_31442 < chunk_sizze_31438; i_31442++) {
            gtid_27780 = sext_i32_i64(sext_i64_i32(global_tid_31436)) +
                threads_per_segment_31418 * i_31442;
            // apply map function
            {
                int32_t res_27835 = ((__global
                                      int32_t *) mem_30499)[gtid_27772];
                int32_t index_primexp_28754 = sext_i64_i32(gtid_27780);
                bool cond_27837 = slt32(index_primexp_28754, res_27835);
                float res_27838;
                
                if (cond_27837) {
                    int64_t i_27839 = sext_i32_i64(index_primexp_28754);
                    float res_27840 = ((__global
                                        float *) res_mem_30432)[gtid_27772 *
                                                                N_20967 +
                                                                i_27839];
                    
                    res_27838 = res_27840;
                } else {
                    res_27838 = 0.0F;
                }
                
                float res_27841 = res_27838 * res_27838;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27831 = x_acc_31437;
                }
                // load new values
                {
                    x_27832 = res_27841;
                }
                // apply reduction operator
                {
                    float res_27833 = x_27831 + x_27832;
                    
                    // store in accumulator
                    {
                        x_acc_31437 = res_27833;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27831 = x_acc_31437;
            ((__local
              float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                x_27831;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31443;
        int32_t skip_waves_31444;
        
        skip_waves_31444 = 1;
        
        float x_31439;
        float x_31440;
        
        offset_31443 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31424,
                      sext_i64_i32(segred_group_sizze_27827))) {
                x_31439 = ((__local
                            float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                        offset_31443)];
            }
        }
        offset_31443 = 1;
        while (slt32(offset_31443, wave_sizze_31426)) {
            if (slt32(local_tid_31424 + offset_31443,
                      sext_i64_i32(segred_group_sizze_27827)) &&
                ((local_tid_31424 - squot32(local_tid_31424, wave_sizze_31426) *
                  wave_sizze_31426) & (2 * offset_31443 - 1)) == 0) {
                // read array element
                {
                    x_31440 = ((volatile __local
                                float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                            offset_31443)];
                }
                // apply reduction operation
                {
                    float res_31441 = x_31439 + x_31440;
                    
                    x_31439 = res_31441;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                        x_31439;
                }
            }
            offset_31443 *= 2;
        }
        while (slt32(skip_waves_31444,
                     squot32(sext_i64_i32(segred_group_sizze_27827) +
                             wave_sizze_31426 - 1, wave_sizze_31426))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31443 = skip_waves_31444 * wave_sizze_31426;
            if (slt32(local_tid_31424 + offset_31443,
                      sext_i64_i32(segred_group_sizze_27827)) &&
                ((local_tid_31424 - squot32(local_tid_31424, wave_sizze_31426) *
                  wave_sizze_31426) == 0 && (squot32(local_tid_31424,
                                                     wave_sizze_31426) & (2 *
                                                                          skip_waves_31444 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31440 = ((__local
                                float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                            offset_31443)];
                }
                // apply reduction operation
                {
                    float res_31441 = x_31439 + x_31440;
                    
                    x_31439 = res_31441;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                        x_31439;
                }
            }
            skip_waves_31444 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31424) == 0) {
                x_acc_31437 = x_31439;
            }
        }
        if (groups_per_segment_31414 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31424 == 0) {
                    ((__global float *) mem_30502)[gtid_27772] = x_acc_31437;
                }
            }
        } else {
            int32_t old_counter_31445;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31424 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31419)[sext_i32_i64(virt_group_id_31434) *
                                                        segred_group_sizze_27827] =
                        x_acc_31437;
                    mem_fence_global();
                    old_counter_31445 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31421)[sext_i32_i64(srem32(flat_segment_id_31435,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31430)[0] =
                        old_counter_31445 == groups_per_segment_31414 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31446;
            
            is_last_group_31446 = ((__local bool *) sync_arr_mem_31430)[0];
            if (is_last_group_31446) {
                if (local_tid_31424 == 0) {
                    old_counter_31445 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31421)[sext_i32_i64(srem32(flat_segment_id_31435,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31414));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31447 =
                            sdiv_up64(groups_per_segment_31414,
                                      segred_group_sizze_27827);
                    
                    x_27831 = 0.0F;
                    for (int64_t i_31448 = 0; i_31448 < read_per_thread_31447;
                         i_31448++) {
                        int64_t group_res_id_31449 =
                                sext_i32_i64(local_tid_31424) *
                                read_per_thread_31447 + i_31448;
                        int64_t index_of_group_res_31450 =
                                sext_i32_i64(flat_segment_id_31435) *
                                groups_per_segment_31414 + group_res_id_31449;
                        
                        if (slt64(group_res_id_31449,
                                  groups_per_segment_31414)) {
                            x_27832 = ((__global
                                        float *) group_res_arr_mem_31419)[index_of_group_res_31450 *
                                                                          segred_group_sizze_27827];
                            
                            float res_27833;
                            
                            res_27833 = x_27831 + x_27832;
                            x_27831 = res_27833;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                    x_27831;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31451;
                    int32_t skip_waves_31452;
                    
                    skip_waves_31452 = 1;
                    
                    float x_31439;
                    float x_31440;
                    
                    offset_31451 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31424,
                                  sext_i64_i32(segred_group_sizze_27827))) {
                            x_31439 = ((__local
                                        float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                                    offset_31451)];
                        }
                    }
                    offset_31451 = 1;
                    while (slt32(offset_31451, wave_sizze_31426)) {
                        if (slt32(local_tid_31424 + offset_31451,
                                  sext_i64_i32(segred_group_sizze_27827)) &&
                            ((local_tid_31424 - squot32(local_tid_31424,
                                                        wave_sizze_31426) *
                              wave_sizze_31426) & (2 * offset_31451 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31440 = ((volatile __local
                                            float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                                        offset_31451)];
                            }
                            // apply reduction operation
                            {
                                float res_31441 = x_31439 + x_31440;
                                
                                x_31439 = res_31441;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                                    x_31439;
                            }
                        }
                        offset_31451 *= 2;
                    }
                    while (slt32(skip_waves_31452,
                                 squot32(sext_i64_i32(segred_group_sizze_27827) +
                                         wave_sizze_31426 - 1,
                                         wave_sizze_31426))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31451 = skip_waves_31452 * wave_sizze_31426;
                        if (slt32(local_tid_31424 + offset_31451,
                                  sext_i64_i32(segred_group_sizze_27827)) &&
                            ((local_tid_31424 - squot32(local_tid_31424,
                                                        wave_sizze_31426) *
                              wave_sizze_31426) == 0 &&
                             (squot32(local_tid_31424, wave_sizze_31426) & (2 *
                                                                            skip_waves_31452 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31440 = ((__local
                                            float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424 +
                                                                        offset_31451)];
                            }
                            // apply reduction operation
                            {
                                float res_31441 = x_31439 + x_31440;
                                
                                x_31439 = res_31441;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31428)[sext_i32_i64(local_tid_31424)] =
                                    x_31439;
                            }
                        }
                        skip_waves_31452 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31424 == 0) {
                            ((__global float *) mem_30502)[gtid_27772] =
                                x_31439;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27827
}
__kernel void mainzisegred_large_27802(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31370_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31368_backing_aligned_1,
                                       int64_t N_20969, int64_t res_20981,
                                       int64_t num_groups_27814, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *mem_30499,
                                       int64_t groups_per_segment_31354,
                                       int64_t elements_per_thread_31355,
                                       int64_t virt_num_groups_31356,
                                       int64_t threads_per_segment_31358,
                                       __global
                                       unsigned char *group_res_arr_mem_31359,
                                       __global
                                       unsigned char *mainzicounter_mem_31361)
{
    #define segred_group_sizze_27813 (mainzisegred_group_sizze_27796)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31370_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31370_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31368_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31368_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31363;
    int32_t local_tid_31364;
    int64_t group_sizze_31367;
    int32_t wave_sizze_31366;
    int32_t group_tid_31365;
    
    global_tid_31363 = get_global_id(0);
    local_tid_31364 = get_local_id(0);
    group_sizze_31367 = get_local_size(0);
    wave_sizze_31366 = LOCKSTEP_WIDTH;
    group_tid_31365 = get_group_id(0);
    
    int32_t phys_tid_27802;
    
    phys_tid_27802 = global_tid_31363;
    
    __local char *red_arr_mem_31368;
    
    red_arr_mem_31368 = (__local char *) red_arr_mem_31368_backing_0;
    
    __local char *sync_arr_mem_31370;
    
    sync_arr_mem_31370 = (__local char *) sync_arr_mem_31370_backing_1;
    
    int32_t phys_group_id_31372;
    
    phys_group_id_31372 = get_group_id(0);
    for (int32_t i_31373 = 0; i_31373 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31356) - phys_group_id_31372,
                   sext_i64_i32(num_groups_27814)); i_31373++) {
        int32_t virt_group_id_31374 = phys_group_id_31372 + i_31373 *
                sext_i64_i32(num_groups_27814);
        int32_t flat_segment_id_31375 = squot32(virt_group_id_31374,
                                                sext_i64_i32(groups_per_segment_31354));
        int64_t global_tid_31376 = srem64(sext_i32_i64(virt_group_id_31374) *
                                          segred_group_sizze_27813 +
                                          sext_i32_i64(local_tid_31364),
                                          segred_group_sizze_27813 *
                                          groups_per_segment_31354);
        int64_t gtid_27793 = sext_i32_i64(flat_segment_id_31375);
        int64_t gtid_27801;
        int32_t x_acc_31377;
        int64_t chunk_sizze_31378;
        
        chunk_sizze_31378 = smin64(elements_per_thread_31355,
                                   sdiv_up64(res_20981 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31376)),
                                             threads_per_segment_31358));
        
        int32_t x_27817;
        int32_t x_27818;
        
        // neutral-initialise the accumulators
        {
            x_acc_31377 = 0;
        }
        for (int64_t i_31382 = 0; i_31382 < chunk_sizze_31378; i_31382++) {
            gtid_27801 = sext_i32_i64(sext_i64_i32(global_tid_31376)) +
                threads_per_segment_31358 * i_31382;
            // apply map function
            {
                float x_27821 = ((__global
                                  float *) images_mem_29973)[gtid_27793 *
                                                             N_20969 +
                                                             gtid_27801];
                bool res_27822;
                
                res_27822 = futrts_isnan32(x_27821);
                
                bool cond_27823 = !res_27822;
                int32_t res_27824 = btoi_bool_i32(cond_27823);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_27817 = x_acc_31377;
                }
                // load new values
                {
                    x_27818 = res_27824;
                }
                // apply reduction operator
                {
                    int32_t res_27819 = add32(x_27817, x_27818);
                    
                    // store in accumulator
                    {
                        x_acc_31377 = res_27819;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27817 = x_acc_31377;
            ((__local
              int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                x_27817;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31383;
        int32_t skip_waves_31384;
        
        skip_waves_31384 = 1;
        
        int32_t x_31379;
        int32_t x_31380;
        
        offset_31383 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31364,
                      sext_i64_i32(segred_group_sizze_27813))) {
                x_31379 = ((__local
                            int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                          offset_31383)];
            }
        }
        offset_31383 = 1;
        while (slt32(offset_31383, wave_sizze_31366)) {
            if (slt32(local_tid_31364 + offset_31383,
                      sext_i64_i32(segred_group_sizze_27813)) &&
                ((local_tid_31364 - squot32(local_tid_31364, wave_sizze_31366) *
                  wave_sizze_31366) & (2 * offset_31383 - 1)) == 0) {
                // read array element
                {
                    x_31380 = ((volatile __local
                                int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                              offset_31383)];
                }
                // apply reduction operation
                {
                    int32_t res_31381 = add32(x_31379, x_31380);
                    
                    x_31379 = res_31381;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                        x_31379;
                }
            }
            offset_31383 *= 2;
        }
        while (slt32(skip_waves_31384,
                     squot32(sext_i64_i32(segred_group_sizze_27813) +
                             wave_sizze_31366 - 1, wave_sizze_31366))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31383 = skip_waves_31384 * wave_sizze_31366;
            if (slt32(local_tid_31364 + offset_31383,
                      sext_i64_i32(segred_group_sizze_27813)) &&
                ((local_tid_31364 - squot32(local_tid_31364, wave_sizze_31366) *
                  wave_sizze_31366) == 0 && (squot32(local_tid_31364,
                                                     wave_sizze_31366) & (2 *
                                                                          skip_waves_31384 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31380 = ((__local
                                int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                              offset_31383)];
                }
                // apply reduction operation
                {
                    int32_t res_31381 = add32(x_31379, x_31380);
                    
                    x_31379 = res_31381;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                        x_31379;
                }
            }
            skip_waves_31384 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31364) == 0) {
                x_acc_31377 = x_31379;
            }
        }
        if (groups_per_segment_31354 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31364 == 0) {
                    ((__global int32_t *) mem_30499)[gtid_27793] = x_acc_31377;
                }
            }
        } else {
            int32_t old_counter_31385;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31364 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_31359)[sext_i32_i64(virt_group_id_31374) *
                                                          segred_group_sizze_27813] =
                        x_acc_31377;
                    mem_fence_global();
                    old_counter_31385 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31361)[sext_i32_i64(srem32(flat_segment_id_31375,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31370)[0] =
                        old_counter_31385 == groups_per_segment_31354 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31386;
            
            is_last_group_31386 = ((__local bool *) sync_arr_mem_31370)[0];
            if (is_last_group_31386) {
                if (local_tid_31364 == 0) {
                    old_counter_31385 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31361)[sext_i32_i64(srem32(flat_segment_id_31375,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31354));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31387 =
                            sdiv_up64(groups_per_segment_31354,
                                      segred_group_sizze_27813);
                    
                    x_27817 = 0;
                    for (int64_t i_31388 = 0; i_31388 < read_per_thread_31387;
                         i_31388++) {
                        int64_t group_res_id_31389 =
                                sext_i32_i64(local_tid_31364) *
                                read_per_thread_31387 + i_31388;
                        int64_t index_of_group_res_31390 =
                                sext_i32_i64(flat_segment_id_31375) *
                                groups_per_segment_31354 + group_res_id_31389;
                        
                        if (slt64(group_res_id_31389,
                                  groups_per_segment_31354)) {
                            x_27818 = ((__global
                                        int32_t *) group_res_arr_mem_31359)[index_of_group_res_31390 *
                                                                            segred_group_sizze_27813];
                            
                            int32_t res_27819;
                            
                            res_27819 = add32(x_27817, x_27818);
                            x_27817 = res_27819;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                    x_27817;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31391;
                    int32_t skip_waves_31392;
                    
                    skip_waves_31392 = 1;
                    
                    int32_t x_31379;
                    int32_t x_31380;
                    
                    offset_31391 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31364,
                                  sext_i64_i32(segred_group_sizze_27813))) {
                            x_31379 = ((__local
                                        int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                                      offset_31391)];
                        }
                    }
                    offset_31391 = 1;
                    while (slt32(offset_31391, wave_sizze_31366)) {
                        if (slt32(local_tid_31364 + offset_31391,
                                  sext_i64_i32(segred_group_sizze_27813)) &&
                            ((local_tid_31364 - squot32(local_tid_31364,
                                                        wave_sizze_31366) *
                              wave_sizze_31366) & (2 * offset_31391 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31380 = ((volatile __local
                                            int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                                          offset_31391)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_31381 = add32(x_31379, x_31380);
                                
                                x_31379 = res_31381;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                                    x_31379;
                            }
                        }
                        offset_31391 *= 2;
                    }
                    while (slt32(skip_waves_31392,
                                 squot32(sext_i64_i32(segred_group_sizze_27813) +
                                         wave_sizze_31366 - 1,
                                         wave_sizze_31366))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31391 = skip_waves_31392 * wave_sizze_31366;
                        if (slt32(local_tid_31364 + offset_31391,
                                  sext_i64_i32(segred_group_sizze_27813)) &&
                            ((local_tid_31364 - squot32(local_tid_31364,
                                                        wave_sizze_31366) *
                              wave_sizze_31366) == 0 &&
                             (squot32(local_tid_31364, wave_sizze_31366) & (2 *
                                                                            skip_waves_31392 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31380 = ((__local
                                            int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364 +
                                                                          offset_31391)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_31381 = add32(x_31379, x_31380);
                                
                                x_31379 = res_31381;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_31368)[sext_i32_i64(local_tid_31364)] =
                                    x_31379;
                            }
                        }
                        skip_waves_31392 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31364 == 0) {
                            ((__global int32_t *) mem_30499)[gtid_27793] =
                                x_31379;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27813
}
__kernel void mainzisegred_large_27953(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31539_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31537_backing_aligned_1,
                                       int64_t N_20967, int64_t res_21329,
                                       int64_t num_groups_27971, __global
                                       unsigned char *res_mem_30432, __global
                                       unsigned char *res_mem_30511, __global
                                       unsigned char *res_mem_30512, __global
                                       unsigned char *mem_30561,
                                       int64_t groups_per_segment_31523,
                                       int64_t elements_per_thread_31524,
                                       int64_t virt_num_groups_31525,
                                       int64_t threads_per_segment_31527,
                                       __global
                                       unsigned char *group_res_arr_mem_31528,
                                       __global
                                       unsigned char *mainzicounter_mem_31530)
{
    #define segred_group_sizze_27970 (mainzisegred_group_sizze_27947)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31539_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31539_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31537_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31537_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31532;
    int32_t local_tid_31533;
    int64_t group_sizze_31536;
    int32_t wave_sizze_31535;
    int32_t group_tid_31534;
    
    global_tid_31532 = get_global_id(0);
    local_tid_31533 = get_local_id(0);
    group_sizze_31536 = get_local_size(0);
    wave_sizze_31535 = LOCKSTEP_WIDTH;
    group_tid_31534 = get_group_id(0);
    
    int32_t phys_tid_27953;
    
    phys_tid_27953 = global_tid_31532;
    
    __local char *red_arr_mem_31537;
    
    red_arr_mem_31537 = (__local char *) red_arr_mem_31537_backing_0;
    
    __local char *sync_arr_mem_31539;
    
    sync_arr_mem_31539 = (__local char *) sync_arr_mem_31539_backing_1;
    
    int32_t phys_group_id_31541;
    
    phys_group_id_31541 = get_group_id(0);
    for (int32_t i_31542 = 0; i_31542 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31525) - phys_group_id_31541,
                   sext_i64_i32(num_groups_27971)); i_31542++) {
        int32_t virt_group_id_31543 = phys_group_id_31541 + i_31542 *
                sext_i64_i32(num_groups_27971);
        int32_t flat_segment_id_31544 = squot32(virt_group_id_31543,
                                                sext_i64_i32(groups_per_segment_31523));
        int64_t global_tid_31545 = srem64(sext_i32_i64(virt_group_id_31543) *
                                          segred_group_sizze_27970 +
                                          sext_i32_i64(local_tid_31533),
                                          segred_group_sizze_27970 *
                                          groups_per_segment_31523);
        int64_t gtid_27944 = sext_i32_i64(flat_segment_id_31544);
        int64_t gtid_27952;
        float x_acc_31546;
        int64_t chunk_sizze_31547;
        
        chunk_sizze_31547 = smin64(elements_per_thread_31524,
                                   sdiv_up64(res_21329 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31545)),
                                             threads_per_segment_31527));
        
        float x_27974;
        float x_27975;
        
        // neutral-initialise the accumulators
        {
            x_acc_31546 = 0.0F;
        }
        for (int64_t i_31551 = 0; i_31551 < chunk_sizze_31547; i_31551++) {
            gtid_27952 = sext_i32_i64(sext_i64_i32(global_tid_31545)) +
                threads_per_segment_31527 * i_31551;
            // apply map function
            {
                int32_t x_27979 = ((__global
                                    int32_t *) res_mem_30511)[gtid_27944];
                int32_t index_primexp_28759 = sext_i64_i32(gtid_27952);
                bool cond_27981 = slt32(index_primexp_28759, x_27979);
                float res_27982;
                
                if (cond_27981) {
                    int32_t x_27978 = ((__global
                                        int32_t *) res_mem_30512)[gtid_27944];
                    int32_t x_27983 = add32(x_27978, index_primexp_28759);
                    int32_t x_27984 = sub32(x_27983, x_27979);
                    int32_t i_27985 = add32(1, x_27984);
                    int64_t i_27986 = sext_i32_i64(i_27985);
                    float res_27987 = ((__global
                                        float *) res_mem_30432)[gtid_27944 *
                                                                N_20967 +
                                                                i_27986];
                    
                    res_27982 = res_27987;
                } else {
                    res_27982 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_27974 = x_acc_31546;
                }
                // load new values
                {
                    x_27975 = res_27982;
                }
                // apply reduction operator
                {
                    float res_27976 = x_27974 + x_27975;
                    
                    // store in accumulator
                    {
                        x_acc_31546 = res_27976;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_27974 = x_acc_31546;
            ((__local
              float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                x_27974;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31552;
        int32_t skip_waves_31553;
        
        skip_waves_31553 = 1;
        
        float x_31548;
        float x_31549;
        
        offset_31552 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31533,
                      sext_i64_i32(segred_group_sizze_27970))) {
                x_31548 = ((__local
                            float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                        offset_31552)];
            }
        }
        offset_31552 = 1;
        while (slt32(offset_31552, wave_sizze_31535)) {
            if (slt32(local_tid_31533 + offset_31552,
                      sext_i64_i32(segred_group_sizze_27970)) &&
                ((local_tid_31533 - squot32(local_tid_31533, wave_sizze_31535) *
                  wave_sizze_31535) & (2 * offset_31552 - 1)) == 0) {
                // read array element
                {
                    x_31549 = ((volatile __local
                                float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                            offset_31552)];
                }
                // apply reduction operation
                {
                    float res_31550 = x_31548 + x_31549;
                    
                    x_31548 = res_31550;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                        x_31548;
                }
            }
            offset_31552 *= 2;
        }
        while (slt32(skip_waves_31553,
                     squot32(sext_i64_i32(segred_group_sizze_27970) +
                             wave_sizze_31535 - 1, wave_sizze_31535))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31552 = skip_waves_31553 * wave_sizze_31535;
            if (slt32(local_tid_31533 + offset_31552,
                      sext_i64_i32(segred_group_sizze_27970)) &&
                ((local_tid_31533 - squot32(local_tid_31533, wave_sizze_31535) *
                  wave_sizze_31535) == 0 && (squot32(local_tid_31533,
                                                     wave_sizze_31535) & (2 *
                                                                          skip_waves_31553 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31549 = ((__local
                                float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                            offset_31552)];
                }
                // apply reduction operation
                {
                    float res_31550 = x_31548 + x_31549;
                    
                    x_31548 = res_31550;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                        x_31548;
                }
            }
            skip_waves_31553 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31533) == 0) {
                x_acc_31546 = x_31548;
            }
        }
        if (groups_per_segment_31523 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31533 == 0) {
                    ((__global float *) mem_30561)[gtid_27944] = x_acc_31546;
                }
            }
        } else {
            int32_t old_counter_31554;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31533 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31528)[sext_i32_i64(virt_group_id_31543) *
                                                        segred_group_sizze_27970] =
                        x_acc_31546;
                    mem_fence_global();
                    old_counter_31554 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31530)[sext_i32_i64(srem32(flat_segment_id_31544,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31539)[0] =
                        old_counter_31554 == groups_per_segment_31523 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31555;
            
            is_last_group_31555 = ((__local bool *) sync_arr_mem_31539)[0];
            if (is_last_group_31555) {
                if (local_tid_31533 == 0) {
                    old_counter_31554 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31530)[sext_i32_i64(srem32(flat_segment_id_31544,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31523));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31556 =
                            sdiv_up64(groups_per_segment_31523,
                                      segred_group_sizze_27970);
                    
                    x_27974 = 0.0F;
                    for (int64_t i_31557 = 0; i_31557 < read_per_thread_31556;
                         i_31557++) {
                        int64_t group_res_id_31558 =
                                sext_i32_i64(local_tid_31533) *
                                read_per_thread_31556 + i_31557;
                        int64_t index_of_group_res_31559 =
                                sext_i32_i64(flat_segment_id_31544) *
                                groups_per_segment_31523 + group_res_id_31558;
                        
                        if (slt64(group_res_id_31558,
                                  groups_per_segment_31523)) {
                            x_27975 = ((__global
                                        float *) group_res_arr_mem_31528)[index_of_group_res_31559 *
                                                                          segred_group_sizze_27970];
                            
                            float res_27976;
                            
                            res_27976 = x_27974 + x_27975;
                            x_27974 = res_27976;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                    x_27974;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31560;
                    int32_t skip_waves_31561;
                    
                    skip_waves_31561 = 1;
                    
                    float x_31548;
                    float x_31549;
                    
                    offset_31560 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31533,
                                  sext_i64_i32(segred_group_sizze_27970))) {
                            x_31548 = ((__local
                                        float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                                    offset_31560)];
                        }
                    }
                    offset_31560 = 1;
                    while (slt32(offset_31560, wave_sizze_31535)) {
                        if (slt32(local_tid_31533 + offset_31560,
                                  sext_i64_i32(segred_group_sizze_27970)) &&
                            ((local_tid_31533 - squot32(local_tid_31533,
                                                        wave_sizze_31535) *
                              wave_sizze_31535) & (2 * offset_31560 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31549 = ((volatile __local
                                            float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                                        offset_31560)];
                            }
                            // apply reduction operation
                            {
                                float res_31550 = x_31548 + x_31549;
                                
                                x_31548 = res_31550;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                                    x_31548;
                            }
                        }
                        offset_31560 *= 2;
                    }
                    while (slt32(skip_waves_31561,
                                 squot32(sext_i64_i32(segred_group_sizze_27970) +
                                         wave_sizze_31535 - 1,
                                         wave_sizze_31535))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31560 = skip_waves_31561 * wave_sizze_31535;
                        if (slt32(local_tid_31533 + offset_31560,
                                  sext_i64_i32(segred_group_sizze_27970)) &&
                            ((local_tid_31533 - squot32(local_tid_31533,
                                                        wave_sizze_31535) *
                              wave_sizze_31535) == 0 &&
                             (squot32(local_tid_31533, wave_sizze_31535) & (2 *
                                                                            skip_waves_31561 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31549 = ((__local
                                            float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533 +
                                                                        offset_31560)];
                            }
                            // apply reduction operation
                            {
                                float res_31550 = x_31548 + x_31549;
                                
                                x_31548 = res_31550;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31537)[sext_i32_i64(local_tid_31533)] =
                                    x_31548;
                            }
                        }
                        skip_waves_31561 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31533 == 0) {
                            ((__global float *) mem_30561)[gtid_27944] =
                                x_31548;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27970
}
__kernel void mainzisegred_large_28441(__global int *global_failure,
                                       __local volatile
                                       int64_t *sync_arr_mem_31720_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31718_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_31716_backing_aligned_2,
                                       __local volatile
                                       int64_t *red_arr_mem_31714_backing_aligned_3,
                                       int64_t iota32_arg_21351,
                                       int64_t num_groups_28614, __global
                                       unsigned char *mem_30567, __global
                                       unsigned char *mem_30579, __global
                                       unsigned char *mem_30581, __global
                                       unsigned char *mem_30585, __global
                                       unsigned char *mem_30588, __global
                                       unsigned char *mem_30590, __global
                                       unsigned char *mem_30592,
                                       int64_t groups_per_segment_31696,
                                       int64_t elements_per_thread_31697,
                                       int64_t virt_num_groups_31698, __global
                                       unsigned char *group_res_arr_mem_31701,
                                       __global
                                       unsigned char *group_res_arr_mem_31703,
                                       __global
                                       unsigned char *group_res_arr_mem_31705,
                                       __global
                                       unsigned char *mainzicounter_mem_31707)
{
    #define segred_group_sizze_28613 (mainzisegred_group_sizze_28435)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31720_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_31720_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31718_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31718_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31716_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31716_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_31714_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31714_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31709;
    int32_t local_tid_31710;
    int64_t group_sizze_31713;
    int32_t wave_sizze_31712;
    int32_t group_tid_31711;
    
    global_tid_31709 = get_global_id(0);
    local_tid_31710 = get_local_id(0);
    group_sizze_31713 = get_local_size(0);
    wave_sizze_31712 = LOCKSTEP_WIDTH;
    group_tid_31711 = get_group_id(0);
    
    int32_t phys_tid_28441;
    
    phys_tid_28441 = global_tid_31709;
    
    __local char *red_arr_mem_31714;
    
    red_arr_mem_31714 = (__local char *) red_arr_mem_31714_backing_0;
    
    __local char *red_arr_mem_31716;
    
    red_arr_mem_31716 = (__local char *) red_arr_mem_31716_backing_1;
    
    __local char *red_arr_mem_31718;
    
    red_arr_mem_31718 = (__local char *) red_arr_mem_31718_backing_2;
    
    __local char *sync_arr_mem_31720;
    
    sync_arr_mem_31720 = (__local char *) sync_arr_mem_31720_backing_3;
    
    int32_t phys_group_id_31722;
    
    phys_group_id_31722 = get_group_id(0);
    for (int32_t i_31723 = 0; i_31723 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31698) - phys_group_id_31722,
                   sext_i64_i32(num_groups_28614)); i_31723++) {
        int32_t virt_group_id_31724 = phys_group_id_31722 + i_31723 *
                sext_i64_i32(num_groups_28614);
        int32_t flat_segment_id_31725 = squot32(virt_group_id_31724,
                                                sext_i64_i32(groups_per_segment_31696));
        int64_t global_tid_31726 = srem64(sext_i32_i64(virt_group_id_31724) *
                                          segred_group_sizze_28613 +
                                          sext_i32_i64(local_tid_31710),
                                          segred_group_sizze_28613 *
                                          groups_per_segment_31696);
        int64_t gtid_28432 = sext_i32_i64(flat_segment_id_31725);
        int64_t gtid_28440;
        bool x_acc_31727;
        int32_t x_acc_31728;
        float x_acc_31729;
        int64_t chunk_sizze_31730;
        int64_t starting_point_31731;
        
        starting_point_31731 = sext_i32_i64(sext_i64_i32(global_tid_31726)) *
            elements_per_thread_31697;
        
        int64_t remaining_elements_31732;
        
        remaining_elements_31732 = iota32_arg_21351 - starting_point_31731;
        if (sle64(remaining_elements_31732, 0) || sle64(iota32_arg_21351,
                                                        starting_point_31731)) {
            chunk_sizze_31730 = 0;
        } else {
            if (slt64(iota32_arg_21351,
                      (sext_i32_i64(sext_i64_i32(global_tid_31726)) + 1) *
                      elements_per_thread_31697)) {
                chunk_sizze_31730 = iota32_arg_21351 -
                    sext_i32_i64(sext_i64_i32(global_tid_31726)) *
                    elements_per_thread_31697;
            } else {
                chunk_sizze_31730 = elements_per_thread_31697;
            }
        }
        
        bool x_28619;
        int32_t x_28620;
        float x_28621;
        bool x_28622;
        int32_t x_28623;
        float x_28624;
        
        // neutral-initialise the accumulators
        {
            x_acc_31727 = 0;
            x_acc_31728 = -1;
            x_acc_31729 = 0.0F;
        }
        for (int64_t i_31747 = 0; i_31747 < elements_per_thread_31697;
             i_31747++) {
            gtid_28440 = sext_i32_i64(local_tid_31710) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_31726),
                                      sext_i64_i32(segred_group_sizze_28613))) *
                 elements_per_thread_31697 + i_31747) *
                segred_group_sizze_28613;
            if (slt64(gtid_28440, iota32_arg_21351)) {
                // apply map function
                {
                    int32_t y_28633 = ((__global
                                        int32_t *) mem_30581)[gtid_28432];
                    float y_28634 = ((__global float *) mem_30579)[gtid_28432];
                    float x_28638 = ((__global float *) mem_30585)[gtid_28432 *
                                                                   iota32_arg_21351 +
                                                                   gtid_28440];
                    float x_28639 = ((__global float *) mem_30567)[gtid_28440];
                    int32_t index_primexp_28773 = sext_i64_i32(gtid_28440);
                    float res_28642 = x_28638 / y_28634;
                    bool cond_28643 = slt32(index_primexp_28773, y_28633);
                    bool res_28644;
                    
                    res_28644 = futrts_isnan32(res_28642);
                    
                    bool res_28645 = !res_28644;
                    bool x_28646 = cond_28643 && res_28645;
                    float res_28647 = (float) fabs(res_28642);
                    bool res_28648 = x_28639 < res_28647;
                    bool x_28649 = x_28646 && res_28648;
                    float res_28650;
                    
                    if (cond_28643) {
                        res_28650 = res_28642;
                    } else {
                        res_28650 = 0.0F;
                    }
                    // save map-out results
                    { }
                    // load accumulator
                    {
                        x_28619 = x_acc_31727;
                        x_28620 = x_acc_31728;
                        x_28621 = x_acc_31729;
                    }
                    // load new values
                    {
                        x_28622 = x_28649;
                        x_28623 = index_primexp_28773;
                        x_28624 = res_28650;
                    }
                    // apply reduction operator
                    {
                        bool res_28625;
                        int32_t res_28626;
                        
                        if (x_28619) {
                            res_28625 = x_28619;
                            res_28626 = x_28620;
                        } else {
                            bool x_28627 = x_28622 && x_28622;
                            bool x_28628 = !x_28622;
                            bool y_28629 = x_28619 && x_28628;
                            bool res_28630 = x_28627 || y_28629;
                            int32_t res_28631;
                            
                            if (x_28622) {
                                res_28631 = x_28623;
                            } else {
                                res_28631 = x_28620;
                            }
                            res_28625 = res_28630;
                            res_28626 = res_28631;
                        }
                        
                        float res_28632 = x_28621 + x_28624;
                        
                        // store in accumulator
                        {
                            x_acc_31727 = res_28625;
                            x_acc_31728 = res_28626;
                            x_acc_31729 = res_28632;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_28619 = x_acc_31727;
                x_28620 = x_acc_31728;
                x_28621 = x_acc_31729;
                ((__local
                  bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                    x_28619;
                ((__local
                  int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                    x_28620;
                ((__local
                  float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                    x_28621;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_31748;
            int32_t skip_waves_31749;
            
            skip_waves_31749 = 1;
            
            bool x_31733;
            int32_t x_31734;
            float x_31735;
            bool x_31736;
            int32_t x_31737;
            float x_31738;
            
            offset_31748 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31710,
                          sext_i64_i32(segred_group_sizze_28613))) {
                    x_31733 = ((__local
                                bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                           offset_31748)];
                    x_31734 = ((__local
                                int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                              offset_31748)];
                    x_31735 = ((__local
                                float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                            offset_31748)];
                }
            }
            offset_31748 = 1;
            while (slt32(offset_31748, wave_sizze_31712)) {
                if (slt32(local_tid_31710 + offset_31748,
                          sext_i64_i32(segred_group_sizze_28613)) &&
                    ((local_tid_31710 - squot32(local_tid_31710,
                                                wave_sizze_31712) *
                      wave_sizze_31712) & (2 * offset_31748 - 1)) == 0) {
                    // read array element
                    {
                        x_31736 = ((volatile __local
                                    bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                               offset_31748)];
                        x_31737 = ((volatile __local
                                    int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                                  offset_31748)];
                        x_31738 = ((volatile __local
                                    float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                                offset_31748)];
                    }
                    // apply reduction operation
                    {
                        bool res_31739;
                        int32_t res_31740;
                        
                        if (x_31733) {
                            res_31739 = x_31733;
                            res_31740 = x_31734;
                        } else {
                            bool x_31741 = x_31736 && x_31736;
                            bool x_31742 = !x_31736;
                            bool y_31743 = x_31733 && x_31742;
                            bool res_31744 = x_31741 || y_31743;
                            int32_t res_31745;
                            
                            if (x_31736) {
                                res_31745 = x_31737;
                            } else {
                                res_31745 = x_31734;
                            }
                            res_31739 = res_31744;
                            res_31740 = res_31745;
                        }
                        
                        float res_31746 = x_31735 + x_31738;
                        
                        x_31733 = res_31739;
                        x_31734 = res_31740;
                        x_31735 = res_31746;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                            x_31733;
                        ((volatile __local
                          int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                            x_31734;
                        ((volatile __local
                          float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                            x_31735;
                    }
                }
                offset_31748 *= 2;
            }
            while (slt32(skip_waves_31749,
                         squot32(sext_i64_i32(segred_group_sizze_28613) +
                                 wave_sizze_31712 - 1, wave_sizze_31712))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_31748 = skip_waves_31749 * wave_sizze_31712;
                if (slt32(local_tid_31710 + offset_31748,
                          sext_i64_i32(segred_group_sizze_28613)) &&
                    ((local_tid_31710 - squot32(local_tid_31710,
                                                wave_sizze_31712) *
                      wave_sizze_31712) == 0 && (squot32(local_tid_31710,
                                                         wave_sizze_31712) &
                                                 (2 * skip_waves_31749 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_31736 = ((__local
                                    bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                               offset_31748)];
                        x_31737 = ((__local
                                    int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                                  offset_31748)];
                        x_31738 = ((__local
                                    float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                                offset_31748)];
                    }
                    // apply reduction operation
                    {
                        bool res_31739;
                        int32_t res_31740;
                        
                        if (x_31733) {
                            res_31739 = x_31733;
                            res_31740 = x_31734;
                        } else {
                            bool x_31741 = x_31736 && x_31736;
                            bool x_31742 = !x_31736;
                            bool y_31743 = x_31733 && x_31742;
                            bool res_31744 = x_31741 || y_31743;
                            int32_t res_31745;
                            
                            if (x_31736) {
                                res_31745 = x_31737;
                            } else {
                                res_31745 = x_31734;
                            }
                            res_31739 = res_31744;
                            res_31740 = res_31745;
                        }
                        
                        float res_31746 = x_31735 + x_31738;
                        
                        x_31733 = res_31739;
                        x_31734 = res_31740;
                        x_31735 = res_31746;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                            x_31733;
                        ((__local
                          int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                            x_31734;
                        ((__local
                          float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                            x_31735;
                    }
                }
                skip_waves_31749 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_31710) == 0) {
                    x_acc_31727 = x_31733;
                    x_acc_31728 = x_31734;
                    x_acc_31729 = x_31735;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_31710) == 0)) {
                    x_acc_31727 = 0;
                    x_acc_31728 = -1;
                    x_acc_31729 = 0.0F;
                }
            }
        }
        x_28619 = x_acc_31727;
        x_28620 = x_acc_31728;
        x_28621 = x_acc_31729;
        if (groups_per_segment_31696 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31710 == 0) {
                    ((__global bool *) mem_30588)[gtid_28432] = x_acc_31727;
                    ((__global int32_t *) mem_30590)[gtid_28432] = x_acc_31728;
                    ((__global float *) mem_30592)[gtid_28432] = x_acc_31729;
                }
            }
        } else {
            int32_t old_counter_31750;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31710 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_31701)[sext_i32_i64(virt_group_id_31724) *
                                                       segred_group_sizze_28613] =
                        x_acc_31727;
                    ((__global
                      int32_t *) group_res_arr_mem_31703)[sext_i32_i64(virt_group_id_31724) *
                                                          segred_group_sizze_28613] =
                        x_acc_31728;
                    ((__global
                      float *) group_res_arr_mem_31705)[sext_i32_i64(virt_group_id_31724) *
                                                        segred_group_sizze_28613] =
                        x_acc_31729;
                    mem_fence_global();
                    old_counter_31750 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31707)[sext_i32_i64(srem32(flat_segment_id_31725,
                                                                                                     10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31720)[0] =
                        old_counter_31750 == groups_per_segment_31696 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31751;
            
            is_last_group_31751 = ((__local bool *) sync_arr_mem_31720)[0];
            if (is_last_group_31751) {
                if (local_tid_31710 == 0) {
                    old_counter_31750 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainzicounter_mem_31707)[sext_i32_i64(srem32(flat_segment_id_31725,
                                                                                                     10240))],
                                              (int) (0 -
                                                     groups_per_segment_31696));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31752 =
                            sdiv_up64(groups_per_segment_31696,
                                      segred_group_sizze_28613);
                    
                    x_28619 = 0;
                    x_28620 = -1;
                    x_28621 = 0.0F;
                    for (int64_t i_31753 = 0; i_31753 < read_per_thread_31752;
                         i_31753++) {
                        int64_t group_res_id_31754 =
                                sext_i32_i64(local_tid_31710) *
                                read_per_thread_31752 + i_31753;
                        int64_t index_of_group_res_31755 =
                                sext_i32_i64(flat_segment_id_31725) *
                                groups_per_segment_31696 + group_res_id_31754;
                        
                        if (slt64(group_res_id_31754,
                                  groups_per_segment_31696)) {
                            x_28622 = ((__global
                                        bool *) group_res_arr_mem_31701)[index_of_group_res_31755 *
                                                                         segred_group_sizze_28613];
                            x_28623 = ((__global
                                        int32_t *) group_res_arr_mem_31703)[index_of_group_res_31755 *
                                                                            segred_group_sizze_28613];
                            x_28624 = ((__global
                                        float *) group_res_arr_mem_31705)[index_of_group_res_31755 *
                                                                          segred_group_sizze_28613];
                            
                            bool res_28625;
                            int32_t res_28626;
                            
                            if (x_28619) {
                                res_28625 = x_28619;
                                res_28626 = x_28620;
                            } else {
                                bool x_28627 = x_28622 && x_28622;
                                bool x_28628 = !x_28622;
                                bool y_28629 = x_28619 && x_28628;
                                bool res_28630 = x_28627 || y_28629;
                                int32_t res_28631;
                                
                                if (x_28622) {
                                    res_28631 = x_28623;
                                } else {
                                    res_28631 = x_28620;
                                }
                                res_28625 = res_28630;
                                res_28626 = res_28631;
                            }
                            
                            float res_28632 = x_28621 + x_28624;
                            
                            x_28619 = res_28625;
                            x_28620 = res_28626;
                            x_28621 = res_28632;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                    x_28619;
                ((__local
                  int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                    x_28620;
                ((__local
                  float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                    x_28621;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31756;
                    int32_t skip_waves_31757;
                    
                    skip_waves_31757 = 1;
                    
                    bool x_31733;
                    int32_t x_31734;
                    float x_31735;
                    bool x_31736;
                    int32_t x_31737;
                    float x_31738;
                    
                    offset_31756 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31710,
                                  sext_i64_i32(segred_group_sizze_28613))) {
                            x_31733 = ((__local
                                        bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                                   offset_31756)];
                            x_31734 = ((__local
                                        int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                                      offset_31756)];
                            x_31735 = ((__local
                                        float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                                    offset_31756)];
                        }
                    }
                    offset_31756 = 1;
                    while (slt32(offset_31756, wave_sizze_31712)) {
                        if (slt32(local_tid_31710 + offset_31756,
                                  sext_i64_i32(segred_group_sizze_28613)) &&
                            ((local_tid_31710 - squot32(local_tid_31710,
                                                        wave_sizze_31712) *
                              wave_sizze_31712) & (2 * offset_31756 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31736 = ((volatile __local
                                            bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                                       offset_31756)];
                                x_31737 = ((volatile __local
                                            int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                                          offset_31756)];
                                x_31738 = ((volatile __local
                                            float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                                        offset_31756)];
                            }
                            // apply reduction operation
                            {
                                bool res_31739;
                                int32_t res_31740;
                                
                                if (x_31733) {
                                    res_31739 = x_31733;
                                    res_31740 = x_31734;
                                } else {
                                    bool x_31741 = x_31736 && x_31736;
                                    bool x_31742 = !x_31736;
                                    bool y_31743 = x_31733 && x_31742;
                                    bool res_31744 = x_31741 || y_31743;
                                    int32_t res_31745;
                                    
                                    if (x_31736) {
                                        res_31745 = x_31737;
                                    } else {
                                        res_31745 = x_31734;
                                    }
                                    res_31739 = res_31744;
                                    res_31740 = res_31745;
                                }
                                
                                float res_31746 = x_31735 + x_31738;
                                
                                x_31733 = res_31739;
                                x_31734 = res_31740;
                                x_31735 = res_31746;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                                    x_31733;
                                ((volatile __local
                                  int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                                    x_31734;
                                ((volatile __local
                                  float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                                    x_31735;
                            }
                        }
                        offset_31756 *= 2;
                    }
                    while (slt32(skip_waves_31757,
                                 squot32(sext_i64_i32(segred_group_sizze_28613) +
                                         wave_sizze_31712 - 1,
                                         wave_sizze_31712))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31756 = skip_waves_31757 * wave_sizze_31712;
                        if (slt32(local_tid_31710 + offset_31756,
                                  sext_i64_i32(segred_group_sizze_28613)) &&
                            ((local_tid_31710 - squot32(local_tid_31710,
                                                        wave_sizze_31712) *
                              wave_sizze_31712) == 0 &&
                             (squot32(local_tid_31710, wave_sizze_31712) & (2 *
                                                                            skip_waves_31757 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31736 = ((__local
                                            bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710 +
                                                                       offset_31756)];
                                x_31737 = ((__local
                                            int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710 +
                                                                          offset_31756)];
                                x_31738 = ((__local
                                            float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710 +
                                                                        offset_31756)];
                            }
                            // apply reduction operation
                            {
                                bool res_31739;
                                int32_t res_31740;
                                
                                if (x_31733) {
                                    res_31739 = x_31733;
                                    res_31740 = x_31734;
                                } else {
                                    bool x_31741 = x_31736 && x_31736;
                                    bool x_31742 = !x_31736;
                                    bool y_31743 = x_31733 && x_31742;
                                    bool res_31744 = x_31741 || y_31743;
                                    int32_t res_31745;
                                    
                                    if (x_31736) {
                                        res_31745 = x_31737;
                                    } else {
                                        res_31745 = x_31734;
                                    }
                                    res_31739 = res_31744;
                                    res_31740 = res_31745;
                                }
                                
                                float res_31746 = x_31735 + x_31738;
                                
                                x_31733 = res_31739;
                                x_31734 = res_31740;
                                x_31735 = res_31746;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_31714)[sext_i32_i64(local_tid_31710)] =
                                    x_31733;
                                ((__local
                                  int32_t *) red_arr_mem_31716)[sext_i32_i64(local_tid_31710)] =
                                    x_31734;
                                ((__local
                                  float *) red_arr_mem_31718)[sext_i32_i64(local_tid_31710)] =
                                    x_31735;
                            }
                        }
                        skip_waves_31757 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31710 == 0) {
                            ((__global bool *) mem_30588)[gtid_28432] = x_31733;
                            ((__global int32_t *) mem_30590)[gtid_28432] =
                                x_31734;
                            ((__global float *) mem_30592)[gtid_28432] =
                                x_31735;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28613
}
__kernel void mainzisegred_nonseg_27871(__global int *global_failure,
                                        __local volatile
                                        int64_t *red_arr_mem_31473_backing_aligned_0,
                                        __local volatile
                                        int64_t *sync_arr_mem_31471_backing_aligned_1,
                                        int64_t m_20968,
                                        int64_t num_groups_27866, __global
                                        unsigned char *res_mem_30511, __global
                                        unsigned char *mem_30516, __global
                                        unsigned char *mainzicounter_mem_31461,
                                        __global
                                        unsigned char *group_res_arr_mem_31463,
                                        int64_t num_threads_31465)
{
    #define segred_group_sizze_27864 (mainzisegred_group_sizze_27863)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31473_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31473_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_31471_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_31471_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31466;
    int32_t local_tid_31467;
    int64_t group_sizze_31470;
    int32_t wave_sizze_31469;
    int32_t group_tid_31468;
    
    global_tid_31466 = get_global_id(0);
    local_tid_31467 = get_local_id(0);
    group_sizze_31470 = get_local_size(0);
    wave_sizze_31469 = LOCKSTEP_WIDTH;
    group_tid_31468 = get_group_id(0);
    
    int32_t phys_tid_27871;
    
    phys_tid_27871 = global_tid_31466;
    
    __local char *sync_arr_mem_31471;
    
    sync_arr_mem_31471 = (__local char *) sync_arr_mem_31471_backing_0;
    
    __local char *red_arr_mem_31473;
    
    red_arr_mem_31473 = (__local char *) red_arr_mem_31473_backing_1;
    
    int64_t dummy_27869;
    
    dummy_27869 = 0;
    
    int64_t gtid_27870;
    
    gtid_27870 = 0;
    
    int32_t x_acc_31475;
    int64_t chunk_sizze_31476;
    
    chunk_sizze_31476 = smin64(sdiv_up64(m_20968,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_27864 *
                                         num_groups_27866))),
                               sdiv_up64(m_20968 - sext_i32_i64(phys_tid_27871),
                                         num_threads_31465));
    
    int32_t x_21325;
    int32_t x_21326;
    
    // neutral-initialise the accumulators
    {
        x_acc_31475 = 0;
    }
    for (int64_t i_31480 = 0; i_31480 < chunk_sizze_31476; i_31480++) {
        gtid_27870 = sext_i32_i64(phys_tid_27871) + num_threads_31465 * i_31480;
        // apply map function
        {
            int32_t x_21328 = ((__global int32_t *) res_mem_30511)[gtid_27870];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_21325 = x_acc_31475;
            }
            // load new values
            {
                x_21326 = x_21328;
            }
            // apply reduction operator
            {
                int32_t res_21327 = smax32(x_21325, x_21326);
                
                // store in accumulator
                {
                    x_acc_31475 = res_21327;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_21325 = x_acc_31475;
        ((__local int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
            x_21325;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31481;
    int32_t skip_waves_31482;
    
    skip_waves_31482 = 1;
    
    int32_t x_31477;
    int32_t x_31478;
    
    offset_31481 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31467, sext_i64_i32(segred_group_sizze_27864))) {
            x_31477 = ((__local
                        int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                      offset_31481)];
        }
    }
    offset_31481 = 1;
    while (slt32(offset_31481, wave_sizze_31469)) {
        if (slt32(local_tid_31467 + offset_31481,
                  sext_i64_i32(segred_group_sizze_27864)) && ((local_tid_31467 -
                                                               squot32(local_tid_31467,
                                                                       wave_sizze_31469) *
                                                               wave_sizze_31469) &
                                                              (2 *
                                                               offset_31481 -
                                                               1)) == 0) {
            // read array element
            {
                x_31478 = ((volatile __local
                            int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                          offset_31481)];
            }
            // apply reduction operation
            {
                int32_t res_31479 = smax32(x_31477, x_31478);
                
                x_31477 = res_31479;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
                    x_31477;
            }
        }
        offset_31481 *= 2;
    }
    while (slt32(skip_waves_31482,
                 squot32(sext_i64_i32(segred_group_sizze_27864) +
                         wave_sizze_31469 - 1, wave_sizze_31469))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31481 = skip_waves_31482 * wave_sizze_31469;
        if (slt32(local_tid_31467 + offset_31481,
                  sext_i64_i32(segred_group_sizze_27864)) && ((local_tid_31467 -
                                                               squot32(local_tid_31467,
                                                                       wave_sizze_31469) *
                                                               wave_sizze_31469) ==
                                                              0 &&
                                                              (squot32(local_tid_31467,
                                                                       wave_sizze_31469) &
                                                               (2 *
                                                                skip_waves_31482 -
                                                                1)) == 0)) {
            // read array element
            {
                x_31478 = ((__local
                            int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                          offset_31481)];
            }
            // apply reduction operation
            {
                int32_t res_31479 = smax32(x_31477, x_31478);
                
                x_31477 = res_31479;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
                    x_31477;
            }
        }
        skip_waves_31482 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_31467) == 0) {
            x_acc_31475 = x_31477;
        }
    }
    
    int32_t old_counter_31483;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_31467 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_31463)[sext_i32_i64(group_tid_31468) *
                                                  segred_group_sizze_27864] =
                x_acc_31475;
            mem_fence_global();
            old_counter_31483 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_31461)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_31471)[0] = old_counter_31483 ==
                num_groups_27866 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_31484;
    
    is_last_group_31484 = ((__local bool *) sync_arr_mem_31471)[0];
    if (is_last_group_31484) {
        if (local_tid_31467 == 0) {
            old_counter_31483 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainzicounter_mem_31461)[0],
                                                      (int) (0 -
                                                             num_groups_27866));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_31485 = sdiv_up64(num_groups_27866,
                                                      segred_group_sizze_27864);
            
            x_21325 = 0;
            for (int64_t i_31486 = 0; i_31486 < read_per_thread_31485;
                 i_31486++) {
                int64_t group_res_id_31487 = sext_i32_i64(local_tid_31467) *
                        read_per_thread_31485 + i_31486;
                int64_t index_of_group_res_31488 = group_res_id_31487;
                
                if (slt64(group_res_id_31487, num_groups_27866)) {
                    x_21326 = ((__global
                                int32_t *) group_res_arr_mem_31463)[index_of_group_res_31488 *
                                                                    segred_group_sizze_27864];
                    
                    int32_t res_21327;
                    
                    res_21327 = smax32(x_21325, x_21326);
                    x_21325 = res_21327;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
            x_21325;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_31489;
            int32_t skip_waves_31490;
            
            skip_waves_31490 = 1;
            
            int32_t x_31477;
            int32_t x_31478;
            
            offset_31489 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31467,
                          sext_i64_i32(segred_group_sizze_27864))) {
                    x_31477 = ((__local
                                int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                              offset_31489)];
                }
            }
            offset_31489 = 1;
            while (slt32(offset_31489, wave_sizze_31469)) {
                if (slt32(local_tid_31467 + offset_31489,
                          sext_i64_i32(segred_group_sizze_27864)) &&
                    ((local_tid_31467 - squot32(local_tid_31467,
                                                wave_sizze_31469) *
                      wave_sizze_31469) & (2 * offset_31489 - 1)) == 0) {
                    // read array element
                    {
                        x_31478 = ((volatile __local
                                    int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                                  offset_31489)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_31479 = smax32(x_31477, x_31478);
                        
                        x_31477 = res_31479;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
                            x_31477;
                    }
                }
                offset_31489 *= 2;
            }
            while (slt32(skip_waves_31490,
                         squot32(sext_i64_i32(segred_group_sizze_27864) +
                                 wave_sizze_31469 - 1, wave_sizze_31469))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_31489 = skip_waves_31490 * wave_sizze_31469;
                if (slt32(local_tid_31467 + offset_31489,
                          sext_i64_i32(segred_group_sizze_27864)) &&
                    ((local_tid_31467 - squot32(local_tid_31467,
                                                wave_sizze_31469) *
                      wave_sizze_31469) == 0 && (squot32(local_tid_31467,
                                                         wave_sizze_31469) &
                                                 (2 * skip_waves_31490 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_31478 = ((__local
                                    int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467 +
                                                                  offset_31489)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_31479 = smax32(x_31477, x_31478);
                        
                        x_31477 = res_31479;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_31473)[sext_i32_i64(local_tid_31467)] =
                            x_31477;
                    }
                }
                skip_waves_31490 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_31467 == 0) {
                    ((__global int32_t *) mem_30516)[0] = x_31477;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27864
}
__kernel void mainzisegred_small_25775(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_30823_backing_aligned_0,
                                       int64_t N_20967, int64_t m_20968,
                                       int64_t N_20969, int64_t res_20981,
                                       int64_t res_20987,
                                       int64_t num_groups_25914, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *binop_p_mem_29982,
                                       __global unsigned char *mem_30065,
                                       __global unsigned char *mem_30070,
                                       int64_t segment_sizze_nonzzero_30816)
{
    #define segred_group_sizze_25913 (mainzisegred_group_sizze_25769)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_30823_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30823_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30818;
    int32_t local_tid_30819;
    int64_t group_sizze_30822;
    int32_t wave_sizze_30821;
    int32_t group_tid_30820;
    
    global_tid_30818 = get_global_id(0);
    local_tid_30819 = get_local_id(0);
    group_sizze_30822 = get_local_size(0);
    wave_sizze_30821 = LOCKSTEP_WIDTH;
    group_tid_30820 = get_group_id(0);
    
    int32_t phys_tid_25775;
    
    phys_tid_25775 = global_tid_30818;
    
    __local char *red_arr_mem_30823;
    
    red_arr_mem_30823 = (__local char *) red_arr_mem_30823_backing_0;
    
    int32_t phys_group_id_30825;
    
    phys_group_id_30825 = get_group_id(0);
    for (int32_t i_30826 = 0; i_30826 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968 * res_20987 * res_20987,
                                          squot64(segred_group_sizze_25913,
                                                  segment_sizze_nonzzero_30816))) -
                   phys_group_id_30825, sext_i64_i32(num_groups_25914));
         i_30826++) {
        int32_t virt_group_id_30827 = phys_group_id_30825 + i_30826 *
                sext_i64_i32(num_groups_25914);
        int64_t gtid_25762 = squot64(squot64(sext_i32_i64(local_tid_30819),
                                             segment_sizze_nonzzero_30816) +
                                     sext_i32_i64(virt_group_id_30827) *
                                     squot64(segred_group_sizze_25913,
                                             segment_sizze_nonzzero_30816),
                                     res_20987 * res_20987);
        int64_t gtid_25763 = squot64(squot64(sext_i32_i64(local_tid_30819),
                                             segment_sizze_nonzzero_30816) +
                                     sext_i32_i64(virt_group_id_30827) *
                                     squot64(segred_group_sizze_25913,
                                             segment_sizze_nonzzero_30816) -
                                     squot64(squot64(sext_i32_i64(local_tid_30819),
                                                     segment_sizze_nonzzero_30816) +
                                             sext_i32_i64(virt_group_id_30827) *
                                             squot64(segred_group_sizze_25913,
                                                     segment_sizze_nonzzero_30816),
                                             res_20987 * res_20987) *
                                     (res_20987 * res_20987), res_20987);
        int64_t gtid_25764 = squot64(sext_i32_i64(local_tid_30819),
                                     segment_sizze_nonzzero_30816) +
                sext_i32_i64(virt_group_id_30827) *
                squot64(segred_group_sizze_25913,
                        segment_sizze_nonzzero_30816) -
                squot64(squot64(sext_i32_i64(local_tid_30819),
                                segment_sizze_nonzzero_30816) +
                        sext_i32_i64(virt_group_id_30827) *
                        squot64(segred_group_sizze_25913,
                                segment_sizze_nonzzero_30816), res_20987 *
                        res_20987) * (res_20987 * res_20987) -
                squot64(squot64(sext_i32_i64(local_tid_30819),
                                segment_sizze_nonzzero_30816) +
                        sext_i32_i64(virt_group_id_30827) *
                        squot64(segred_group_sizze_25913,
                                segment_sizze_nonzzero_30816) -
                        squot64(squot64(sext_i32_i64(local_tid_30819),
                                        segment_sizze_nonzzero_30816) +
                                sext_i32_i64(virt_group_id_30827) *
                                squot64(segred_group_sizze_25913,
                                        segment_sizze_nonzzero_30816),
                                res_20987 * res_20987) * (res_20987 *
                                                          res_20987),
                        res_20987) * res_20987;
        int64_t gtid_25774 = srem64(sext_i32_i64(local_tid_30819), res_20981);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20981) && (((slt64(gtid_25762, m_20968) &&
                                          slt64(gtid_25763, res_20987)) &&
                                         slt64(gtid_25764, res_20987)) &&
                                        slt64(sext_i32_i64(local_tid_30819),
                                              res_20981 *
                                              squot64(segred_group_sizze_25913,
                                                      segment_sizze_nonzzero_30816)))) {
                float x_25923 = ((__global
                                  float *) images_mem_29973)[gtid_25762 *
                                                             N_20969 +
                                                             gtid_25774];
                float x_25924 = ((__global
                                  float *) binop_p_mem_29982)[gtid_25763 *
                                                              N_20967 +
                                                              gtid_25774];
                float x_25925 = ((__global float *) mem_30065)[gtid_25764 *
                                                               N_20967 +
                                                               gtid_25774];
                float x_25926 = x_25924 * x_25925;
                bool res_25927;
                
                res_25927 = futrts_isnan32(x_25923);
                
                float y_25928;
                
                if (res_25927) {
                    y_25928 = 0.0F;
                } else {
                    y_25928 = 1.0F;
                }
                
                float res_25929 = x_25926 * y_25928;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                        res_25929;
                }
            } else {
                ((__local
                  float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20981)) {
            // perform segmented scan to imitate reduction
            {
                float x_25917;
                float x_25918;
                float x_30828;
                float x_30829;
                bool ltid_in_bounds_30831;
                
                ltid_in_bounds_30831 = slt64(sext_i32_i64(local_tid_30819),
                                             res_20981 *
                                             squot64(segred_group_sizze_25913,
                                                     segment_sizze_nonzzero_30816));
                
                int32_t skip_threads_30832;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_30831) {
                        x_25918 = ((volatile __local
                                    float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)];
                        if ((local_tid_30819 - squot32(local_tid_30819, 32) *
                             32) == 0) {
                            x_25917 = x_25918;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_30832 = 1;
                    while (slt32(skip_threads_30832, 32)) {
                        if (sle32(skip_threads_30832, local_tid_30819 -
                                  squot32(local_tid_30819, 32) * 32) &&
                            ltid_in_bounds_30831) {
                            // read operands
                            {
                                x_25917 = ((volatile __local
                                            float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819) -
                                                                        sext_i32_i64(skip_threads_30832)];
                            }
                            // perform operation
                            {
                                bool inactive_30833 =
                                     slt64(srem64(sext_i32_i64(local_tid_30819),
                                                  res_20981),
                                           sext_i32_i64(local_tid_30819) -
                                           sext_i32_i64(local_tid_30819 -
                                           skip_threads_30832));
                                
                                if (inactive_30833) {
                                    x_25917 = x_25918;
                                }
                                if (!inactive_30833) {
                                    float res_25919 = x_25917 + x_25918;
                                    
                                    x_25917 = res_25919;
                                }
                            }
                        }
                        if (sle32(wave_sizze_30821, skip_threads_30832)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_30832, local_tid_30819 -
                                  squot32(local_tid_30819, 32) * 32) &&
                            ltid_in_bounds_30831) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                                    x_25917;
                                x_25918 = x_25917;
                            }
                        }
                        if (sle32(wave_sizze_30821, skip_threads_30832)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_30832 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_30819 - squot32(local_tid_30819, 32) * 32) ==
                        31 && ltid_in_bounds_30831) {
                        ((volatile __local
                          float *) red_arr_mem_30823)[sext_i32_i64(squot32(local_tid_30819,
                                                                           32))] =
                            x_25917;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_30834;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_30819, 32) == 0 &&
                            ltid_in_bounds_30831) {
                            x_30829 = ((volatile __local
                                        float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)];
                            if ((local_tid_30819 - squot32(local_tid_30819,
                                                           32) * 32) == 0) {
                                x_30828 = x_30829;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_30834 = 1;
                        while (slt32(skip_threads_30834, 32)) {
                            if (sle32(skip_threads_30834, local_tid_30819 -
                                      squot32(local_tid_30819, 32) * 32) &&
                                (squot32(local_tid_30819, 32) == 0 &&
                                 ltid_in_bounds_30831)) {
                                // read operands
                                {
                                    x_30828 = ((volatile __local
                                                float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819) -
                                                                            sext_i32_i64(skip_threads_30834)];
                                }
                                // perform operation
                                {
                                    bool inactive_30835 =
                                         slt64(srem64(sext_i32_i64(local_tid_30819 *
                                                      32 + 32 - 1), res_20981),
                                               sext_i32_i64(local_tid_30819 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_30819 -
                                                             skip_threads_30834) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_30835) {
                                        x_30828 = x_30829;
                                    }
                                    if (!inactive_30835) {
                                        float res_30830 = x_30828 + x_30829;
                                        
                                        x_30828 = res_30830;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_30821, skip_threads_30834)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_30834, local_tid_30819 -
                                      squot32(local_tid_30819, 32) * 32) &&
                                (squot32(local_tid_30819, 32) == 0 &&
                                 ltid_in_bounds_30831)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                                        x_30828;
                                    x_30829 = x_30828;
                                }
                            }
                            if (sle32(wave_sizze_30821, skip_threads_30834)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_30834 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_30819, 32) == 0 ||
                          !ltid_in_bounds_30831)) {
                        // read operands
                        {
                            x_25918 = x_25917;
                            x_25917 = ((__local
                                        float *) red_arr_mem_30823)[sext_i32_i64(squot32(local_tid_30819,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_30836 =
                                 slt64(srem64(sext_i32_i64(local_tid_30819),
                                              res_20981),
                                       sext_i32_i64(local_tid_30819) -
                                       sext_i32_i64(squot32(local_tid_30819,
                                                            32) * 32 - 1));
                            
                            if (inactive_30836) {
                                x_25917 = x_25918;
                            }
                            if (!inactive_30836) {
                                float res_25919 = x_25917 + x_25918;
                                
                                x_25917 = res_25919;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                                x_25917;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_30819, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_30823)[sext_i32_i64(local_tid_30819)] =
                            x_25918;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_30827) *
                      squot64(segred_group_sizze_25913,
                              segment_sizze_nonzzero_30816) +
                      sext_i32_i64(local_tid_30819), m_20968 * res_20987 *
                      res_20987) && slt64(sext_i32_i64(local_tid_30819),
                                          squot64(segred_group_sizze_25913,
                                                  segment_sizze_nonzzero_30816))) {
                ((__global
                  float *) mem_30070)[squot64(sext_i32_i64(virt_group_id_30827) *
                                              squot64(segred_group_sizze_25913,
                                                      segment_sizze_nonzzero_30816) +
                                              sext_i32_i64(local_tid_30819),
                                              res_20987 * res_20987) *
                                      (res_20987 * res_20987) +
                                      squot64(sext_i32_i64(virt_group_id_30827) *
                                              squot64(segred_group_sizze_25913,
                                                      segment_sizze_nonzzero_30816) +
                                              sext_i32_i64(local_tid_30819) -
                                              squot64(sext_i32_i64(virt_group_id_30827) *
                                                      squot64(segred_group_sizze_25913,
                                                              segment_sizze_nonzzero_30816) +
                                                      sext_i32_i64(local_tid_30819),
                                                      res_20987 * res_20987) *
                                              (res_20987 * res_20987),
                                              res_20987) * res_20987 +
                                      (sext_i32_i64(virt_group_id_30827) *
                                       squot64(segred_group_sizze_25913,
                                               segment_sizze_nonzzero_30816) +
                                       sext_i32_i64(local_tid_30819) -
                                       squot64(sext_i32_i64(virt_group_id_30827) *
                                               squot64(segred_group_sizze_25913,
                                                       segment_sizze_nonzzero_30816) +
                                               sext_i32_i64(local_tid_30819),
                                               res_20987 * res_20987) *
                                       (res_20987 * res_20987) -
                                       squot64(sext_i32_i64(virt_group_id_30827) *
                                               squot64(segred_group_sizze_25913,
                                                       segment_sizze_nonzzero_30816) +
                                               sext_i32_i64(local_tid_30819) -
                                               squot64(sext_i32_i64(virt_group_id_30827) *
                                                       squot64(segred_group_sizze_25913,
                                                               segment_sizze_nonzzero_30816) +
                                                       sext_i32_i64(local_tid_30819),
                                                       res_20987 * res_20987) *
                                               (res_20987 * res_20987),
                                               res_20987) * res_20987)] =
                    ((__local
                      float *) red_arr_mem_30823)[(sext_i32_i64(local_tid_30819) +
                                                   1) *
                                                  segment_sizze_nonzzero_30816 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_25913
}
__kernel void mainzisegred_small_26948(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_30977_backing_aligned_0,
                                       int64_t N_20967, int64_t m_20968,
                                       int64_t N_20969, int64_t res_20981,
                                       int64_t res_20987,
                                       int64_t num_groups_27001, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *binop_p_mem_29982,
                                       __global unsigned char *mem_30251,
                                       int64_t segment_sizze_nonzzero_30970)
{
    #define segred_group_sizze_27000 (mainzisegred_group_sizze_26942)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_30977_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30977_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30972;
    int32_t local_tid_30973;
    int64_t group_sizze_30976;
    int32_t wave_sizze_30975;
    int32_t group_tid_30974;
    
    global_tid_30972 = get_global_id(0);
    local_tid_30973 = get_local_id(0);
    group_sizze_30976 = get_local_size(0);
    wave_sizze_30975 = LOCKSTEP_WIDTH;
    group_tid_30974 = get_group_id(0);
    
    int32_t phys_tid_26948;
    
    phys_tid_26948 = global_tid_30972;
    
    __local char *red_arr_mem_30977;
    
    red_arr_mem_30977 = (__local char *) red_arr_mem_30977_backing_0;
    
    int32_t phys_group_id_30979;
    
    phys_group_id_30979 = get_group_id(0);
    for (int32_t i_30980 = 0; i_30980 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968 * res_20987,
                                          squot64(segred_group_sizze_27000,
                                                  segment_sizze_nonzzero_30970))) -
                   phys_group_id_30979, sext_i64_i32(num_groups_27001));
         i_30980++) {
        int32_t virt_group_id_30981 = phys_group_id_30979 + i_30980 *
                sext_i64_i32(num_groups_27001);
        int64_t gtid_26937 = squot64(squot64(sext_i32_i64(local_tid_30973),
                                             segment_sizze_nonzzero_30970) +
                                     sext_i32_i64(virt_group_id_30981) *
                                     squot64(segred_group_sizze_27000,
                                             segment_sizze_nonzzero_30970),
                                     res_20987);
        int64_t gtid_26938 = squot64(sext_i32_i64(local_tid_30973),
                                     segment_sizze_nonzzero_30970) +
                sext_i32_i64(virt_group_id_30981) *
                squot64(segred_group_sizze_27000,
                        segment_sizze_nonzzero_30970) -
                squot64(squot64(sext_i32_i64(local_tid_30973),
                                segment_sizze_nonzzero_30970) +
                        sext_i32_i64(virt_group_id_30981) *
                        squot64(segred_group_sizze_27000,
                                segment_sizze_nonzzero_30970), res_20987) *
                res_20987;
        int64_t gtid_26947 = srem64(sext_i32_i64(local_tid_30973), res_20981);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20981) && ((slt64(gtid_26937, m_20968) &&
                                         slt64(gtid_26938, res_20987)) &&
                                        slt64(sext_i32_i64(local_tid_30973),
                                              res_20981 *
                                              squot64(segred_group_sizze_27000,
                                                      segment_sizze_nonzzero_30970)))) {
                float x_27010 = ((__global
                                  float *) images_mem_29973)[gtid_26937 *
                                                             N_20969 +
                                                             gtid_26947];
                bool res_27011;
                
                res_27011 = futrts_isnan32(x_27010);
                
                float res_27012;
                
                if (res_27011) {
                    res_27012 = 0.0F;
                } else {
                    float x_27009 = ((__global
                                      float *) binop_p_mem_29982)[gtid_26938 *
                                                                  N_20967 +
                                                                  gtid_26947];
                    float res_27013 = x_27009 * x_27010;
                    
                    res_27012 = res_27013;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                        res_27012;
                }
            } else {
                ((__local
                  float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20981)) {
            // perform segmented scan to imitate reduction
            {
                float x_27004;
                float x_27005;
                float x_30982;
                float x_30983;
                bool ltid_in_bounds_30985;
                
                ltid_in_bounds_30985 = slt64(sext_i32_i64(local_tid_30973),
                                             res_20981 *
                                             squot64(segred_group_sizze_27000,
                                                     segment_sizze_nonzzero_30970));
                
                int32_t skip_threads_30986;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_30985) {
                        x_27005 = ((volatile __local
                                    float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)];
                        if ((local_tid_30973 - squot32(local_tid_30973, 32) *
                             32) == 0) {
                            x_27004 = x_27005;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_30986 = 1;
                    while (slt32(skip_threads_30986, 32)) {
                        if (sle32(skip_threads_30986, local_tid_30973 -
                                  squot32(local_tid_30973, 32) * 32) &&
                            ltid_in_bounds_30985) {
                            // read operands
                            {
                                x_27004 = ((volatile __local
                                            float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973) -
                                                                        sext_i32_i64(skip_threads_30986)];
                            }
                            // perform operation
                            {
                                bool inactive_30987 =
                                     slt64(srem64(sext_i32_i64(local_tid_30973),
                                                  res_20981),
                                           sext_i32_i64(local_tid_30973) -
                                           sext_i32_i64(local_tid_30973 -
                                           skip_threads_30986));
                                
                                if (inactive_30987) {
                                    x_27004 = x_27005;
                                }
                                if (!inactive_30987) {
                                    float res_27006 = x_27004 + x_27005;
                                    
                                    x_27004 = res_27006;
                                }
                            }
                        }
                        if (sle32(wave_sizze_30975, skip_threads_30986)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_30986, local_tid_30973 -
                                  squot32(local_tid_30973, 32) * 32) &&
                            ltid_in_bounds_30985) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                                    x_27004;
                                x_27005 = x_27004;
                            }
                        }
                        if (sle32(wave_sizze_30975, skip_threads_30986)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_30986 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_30973 - squot32(local_tid_30973, 32) * 32) ==
                        31 && ltid_in_bounds_30985) {
                        ((volatile __local
                          float *) red_arr_mem_30977)[sext_i32_i64(squot32(local_tid_30973,
                                                                           32))] =
                            x_27004;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_30988;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_30973, 32) == 0 &&
                            ltid_in_bounds_30985) {
                            x_30983 = ((volatile __local
                                        float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)];
                            if ((local_tid_30973 - squot32(local_tid_30973,
                                                           32) * 32) == 0) {
                                x_30982 = x_30983;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_30988 = 1;
                        while (slt32(skip_threads_30988, 32)) {
                            if (sle32(skip_threads_30988, local_tid_30973 -
                                      squot32(local_tid_30973, 32) * 32) &&
                                (squot32(local_tid_30973, 32) == 0 &&
                                 ltid_in_bounds_30985)) {
                                // read operands
                                {
                                    x_30982 = ((volatile __local
                                                float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973) -
                                                                            sext_i32_i64(skip_threads_30988)];
                                }
                                // perform operation
                                {
                                    bool inactive_30989 =
                                         slt64(srem64(sext_i32_i64(local_tid_30973 *
                                                      32 + 32 - 1), res_20981),
                                               sext_i32_i64(local_tid_30973 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_30973 -
                                                             skip_threads_30988) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_30989) {
                                        x_30982 = x_30983;
                                    }
                                    if (!inactive_30989) {
                                        float res_30984 = x_30982 + x_30983;
                                        
                                        x_30982 = res_30984;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_30975, skip_threads_30988)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_30988, local_tid_30973 -
                                      squot32(local_tid_30973, 32) * 32) &&
                                (squot32(local_tid_30973, 32) == 0 &&
                                 ltid_in_bounds_30985)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                                        x_30982;
                                    x_30983 = x_30982;
                                }
                            }
                            if (sle32(wave_sizze_30975, skip_threads_30988)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_30988 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_30973, 32) == 0 ||
                          !ltid_in_bounds_30985)) {
                        // read operands
                        {
                            x_27005 = x_27004;
                            x_27004 = ((__local
                                        float *) red_arr_mem_30977)[sext_i32_i64(squot32(local_tid_30973,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_30990 =
                                 slt64(srem64(sext_i32_i64(local_tid_30973),
                                              res_20981),
                                       sext_i32_i64(local_tid_30973) -
                                       sext_i32_i64(squot32(local_tid_30973,
                                                            32) * 32 - 1));
                            
                            if (inactive_30990) {
                                x_27004 = x_27005;
                            }
                            if (!inactive_30990) {
                                float res_27006 = x_27004 + x_27005;
                                
                                x_27004 = res_27006;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                                x_27004;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_30973, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_30977)[sext_i32_i64(local_tid_30973)] =
                            x_27005;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_30981) *
                      squot64(segred_group_sizze_27000,
                              segment_sizze_nonzzero_30970) +
                      sext_i32_i64(local_tid_30973), m_20968 * res_20987) &&
                slt64(sext_i32_i64(local_tid_30973),
                      squot64(segred_group_sizze_27000,
                              segment_sizze_nonzzero_30970))) {
                ((__global
                  float *) mem_30251)[squot64(sext_i32_i64(virt_group_id_30981) *
                                              squot64(segred_group_sizze_27000,
                                                      segment_sizze_nonzzero_30970) +
                                              sext_i32_i64(local_tid_30973),
                                              res_20987) * res_20987 +
                                      (sext_i32_i64(virt_group_id_30981) *
                                       squot64(segred_group_sizze_27000,
                                               segment_sizze_nonzzero_30970) +
                                       sext_i32_i64(local_tid_30973) -
                                       squot64(sext_i32_i64(virt_group_id_30981) *
                                               squot64(segred_group_sizze_27000,
                                                       segment_sizze_nonzzero_30970) +
                                               sext_i32_i64(local_tid_30973),
                                               res_20987) * res_20987)] =
                    ((__local
                      float *) red_arr_mem_30977)[(sext_i32_i64(local_tid_30973) +
                                                   1) *
                                                  segment_sizze_nonzzero_30970 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27000
}
__kernel void mainzisegred_small_27085(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31058_backing_aligned_0,
                                       int64_t m_20968, int64_t res_20987,
                                       int64_t num_groups_27134, __global
                                       unsigned char *res_mem_30166, __global
                                       unsigned char *res_mem_30257, __global
                                       unsigned char *mem_30294,
                                       int64_t segment_sizze_nonzzero_31051)
{
    #define segred_group_sizze_27133 (mainzisegred_group_sizze_27079)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31058_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31058_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31053;
    int32_t local_tid_31054;
    int64_t group_sizze_31057;
    int32_t wave_sizze_31056;
    int32_t group_tid_31055;
    
    global_tid_31053 = get_global_id(0);
    local_tid_31054 = get_local_id(0);
    group_sizze_31057 = get_local_size(0);
    wave_sizze_31056 = LOCKSTEP_WIDTH;
    group_tid_31055 = get_group_id(0);
    
    int32_t phys_tid_27085;
    
    phys_tid_27085 = global_tid_31053;
    
    __local char *red_arr_mem_31058;
    
    red_arr_mem_31058 = (__local char *) red_arr_mem_31058_backing_0;
    
    int32_t phys_group_id_31060;
    
    phys_group_id_31060 = get_group_id(0);
    for (int32_t i_31061 = 0; i_31061 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968 * res_20987,
                                          squot64(segred_group_sizze_27133,
                                                  segment_sizze_nonzzero_31051))) -
                   phys_group_id_31060, sext_i64_i32(num_groups_27134));
         i_31061++) {
        int32_t virt_group_id_31062 = phys_group_id_31060 + i_31061 *
                sext_i64_i32(num_groups_27134);
        int64_t gtid_27074 = squot64(squot64(sext_i32_i64(local_tid_31054),
                                             segment_sizze_nonzzero_31051) +
                                     sext_i32_i64(virt_group_id_31062) *
                                     squot64(segred_group_sizze_27133,
                                             segment_sizze_nonzzero_31051),
                                     res_20987);
        int64_t gtid_27075 = squot64(sext_i32_i64(local_tid_31054),
                                     segment_sizze_nonzzero_31051) +
                sext_i32_i64(virt_group_id_31062) *
                squot64(segred_group_sizze_27133,
                        segment_sizze_nonzzero_31051) -
                squot64(squot64(sext_i32_i64(local_tid_31054),
                                segment_sizze_nonzzero_31051) +
                        sext_i32_i64(virt_group_id_31062) *
                        squot64(segred_group_sizze_27133,
                                segment_sizze_nonzzero_31051), res_20987) *
                res_20987;
        int64_t gtid_27084 = srem64(sext_i32_i64(local_tid_31054), res_20987);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20987) && ((slt64(gtid_27074, m_20968) &&
                                         slt64(gtid_27075, res_20987)) &&
                                        slt64(sext_i32_i64(local_tid_31054),
                                              res_20987 *
                                              squot64(segred_group_sizze_27133,
                                                      segment_sizze_nonzzero_31051)))) {
                float x_27143 = ((__global float *) res_mem_30257)[gtid_27074 *
                                                                   res_20987 +
                                                                   gtid_27084];
                float x_27144 = ((__global float *) res_mem_30166)[gtid_27074 *
                                                                   (res_20987 *
                                                                    res_20987) +
                                                                   gtid_27075 *
                                                                   res_20987 +
                                                                   gtid_27084];
                float res_27145 = x_27143 * x_27144;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                        res_27145;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20987)) {
            // perform segmented scan to imitate reduction
            {
                float x_27137;
                float x_27138;
                float x_31063;
                float x_31064;
                bool ltid_in_bounds_31066;
                
                ltid_in_bounds_31066 = slt64(sext_i32_i64(local_tid_31054),
                                             res_20987 *
                                             squot64(segred_group_sizze_27133,
                                                     segment_sizze_nonzzero_31051));
                
                int32_t skip_threads_31067;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31066) {
                        x_27138 = ((volatile __local
                                    float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)];
                        if ((local_tid_31054 - squot32(local_tid_31054, 32) *
                             32) == 0) {
                            x_27137 = x_27138;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31067 = 1;
                    while (slt32(skip_threads_31067, 32)) {
                        if (sle32(skip_threads_31067, local_tid_31054 -
                                  squot32(local_tid_31054, 32) * 32) &&
                            ltid_in_bounds_31066) {
                            // read operands
                            {
                                x_27137 = ((volatile __local
                                            float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054) -
                                                                        sext_i32_i64(skip_threads_31067)];
                            }
                            // perform operation
                            {
                                bool inactive_31068 =
                                     slt64(srem64(sext_i32_i64(local_tid_31054),
                                                  res_20987),
                                           sext_i32_i64(local_tid_31054) -
                                           sext_i32_i64(local_tid_31054 -
                                           skip_threads_31067));
                                
                                if (inactive_31068) {
                                    x_27137 = x_27138;
                                }
                                if (!inactive_31068) {
                                    float res_27139 = x_27137 + x_27138;
                                    
                                    x_27137 = res_27139;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31056, skip_threads_31067)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31067, local_tid_31054 -
                                  squot32(local_tid_31054, 32) * 32) &&
                            ltid_in_bounds_31066) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                                    x_27137;
                                x_27138 = x_27137;
                            }
                        }
                        if (sle32(wave_sizze_31056, skip_threads_31067)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31067 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31054 - squot32(local_tid_31054, 32) * 32) ==
                        31 && ltid_in_bounds_31066) {
                        ((volatile __local
                          float *) red_arr_mem_31058)[sext_i32_i64(squot32(local_tid_31054,
                                                                           32))] =
                            x_27137;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31069;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31054, 32) == 0 &&
                            ltid_in_bounds_31066) {
                            x_31064 = ((volatile __local
                                        float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)];
                            if ((local_tid_31054 - squot32(local_tid_31054,
                                                           32) * 32) == 0) {
                                x_31063 = x_31064;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31069 = 1;
                        while (slt32(skip_threads_31069, 32)) {
                            if (sle32(skip_threads_31069, local_tid_31054 -
                                      squot32(local_tid_31054, 32) * 32) &&
                                (squot32(local_tid_31054, 32) == 0 &&
                                 ltid_in_bounds_31066)) {
                                // read operands
                                {
                                    x_31063 = ((volatile __local
                                                float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054) -
                                                                            sext_i32_i64(skip_threads_31069)];
                                }
                                // perform operation
                                {
                                    bool inactive_31070 =
                                         slt64(srem64(sext_i32_i64(local_tid_31054 *
                                                      32 + 32 - 1), res_20987),
                                               sext_i32_i64(local_tid_31054 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31054 -
                                                             skip_threads_31069) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31070) {
                                        x_31063 = x_31064;
                                    }
                                    if (!inactive_31070) {
                                        float res_31065 = x_31063 + x_31064;
                                        
                                        x_31063 = res_31065;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31056, skip_threads_31069)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31069, local_tid_31054 -
                                      squot32(local_tid_31054, 32) * 32) &&
                                (squot32(local_tid_31054, 32) == 0 &&
                                 ltid_in_bounds_31066)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                                        x_31063;
                                    x_31064 = x_31063;
                                }
                            }
                            if (sle32(wave_sizze_31056, skip_threads_31069)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31069 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31054, 32) == 0 ||
                          !ltid_in_bounds_31066)) {
                        // read operands
                        {
                            x_27138 = x_27137;
                            x_27137 = ((__local
                                        float *) red_arr_mem_31058)[sext_i32_i64(squot32(local_tid_31054,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31071 =
                                 slt64(srem64(sext_i32_i64(local_tid_31054),
                                              res_20987),
                                       sext_i32_i64(local_tid_31054) -
                                       sext_i32_i64(squot32(local_tid_31054,
                                                            32) * 32 - 1));
                            
                            if (inactive_31071) {
                                x_27137 = x_27138;
                            }
                            if (!inactive_31071) {
                                float res_27139 = x_27137 + x_27138;
                                
                                x_27137 = res_27139;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                                x_27137;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31054, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31058)[sext_i32_i64(local_tid_31054)] =
                            x_27138;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31062) *
                      squot64(segred_group_sizze_27133,
                              segment_sizze_nonzzero_31051) +
                      sext_i32_i64(local_tid_31054), m_20968 * res_20987) &&
                slt64(sext_i32_i64(local_tid_31054),
                      squot64(segred_group_sizze_27133,
                              segment_sizze_nonzzero_31051))) {
                ((__global
                  float *) mem_30294)[squot64(sext_i32_i64(virt_group_id_31062) *
                                              squot64(segred_group_sizze_27133,
                                                      segment_sizze_nonzzero_31051) +
                                              sext_i32_i64(local_tid_31054),
                                              res_20987) * res_20987 +
                                      (sext_i32_i64(virt_group_id_31062) *
                                       squot64(segred_group_sizze_27133,
                                               segment_sizze_nonzzero_31051) +
                                       sext_i32_i64(local_tid_31054) -
                                       squot64(sext_i32_i64(virt_group_id_31062) *
                                               squot64(segred_group_sizze_27133,
                                                       segment_sizze_nonzzero_31051) +
                                               sext_i32_i64(local_tid_31054),
                                               res_20987) * res_20987)] =
                    ((__local
                      float *) red_arr_mem_31058)[(sext_i32_i64(local_tid_31054) +
                                                   1) *
                                                  segment_sizze_nonzzero_31051 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27133
}
__kernel void mainzisegred_small_27215(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31146_backing_aligned_0,
                                       int64_t N_20967, int64_t m_20968,
                                       int64_t res_20987,
                                       int64_t num_groups_27262, __global
                                       unsigned char *mem_29989, __global
                                       unsigned char *res_mem_30300, __global
                                       unsigned char *mem_30388,
                                       int64_t segment_sizze_nonzzero_31139)
{
    #define segred_group_sizze_27261 (mainzisegred_group_sizze_27209)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31146_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31146_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31141;
    int32_t local_tid_31142;
    int64_t group_sizze_31145;
    int32_t wave_sizze_31144;
    int32_t group_tid_31143;
    
    global_tid_31141 = get_global_id(0);
    local_tid_31142 = get_local_id(0);
    group_sizze_31145 = get_local_size(0);
    wave_sizze_31144 = LOCKSTEP_WIDTH;
    group_tid_31143 = get_group_id(0);
    
    int32_t phys_tid_27215;
    
    phys_tid_27215 = global_tid_31141;
    
    __local char *red_arr_mem_31146;
    
    red_arr_mem_31146 = (__local char *) red_arr_mem_31146_backing_0;
    
    int32_t phys_group_id_31148;
    
    phys_group_id_31148 = get_group_id(0);
    for (int32_t i_31149 = 0; i_31149 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968 * N_20967,
                                          squot64(segred_group_sizze_27261,
                                                  segment_sizze_nonzzero_31139))) -
                   phys_group_id_31148, sext_i64_i32(num_groups_27262));
         i_31149++) {
        int32_t virt_group_id_31150 = phys_group_id_31148 + i_31149 *
                sext_i64_i32(num_groups_27262);
        int64_t gtid_27204 = squot64(squot64(sext_i32_i64(local_tid_31142),
                                             segment_sizze_nonzzero_31139) +
                                     sext_i32_i64(virt_group_id_31150) *
                                     squot64(segred_group_sizze_27261,
                                             segment_sizze_nonzzero_31139),
                                     N_20967);
        int64_t gtid_27205 = squot64(sext_i32_i64(local_tid_31142),
                                     segment_sizze_nonzzero_31139) +
                sext_i32_i64(virt_group_id_31150) *
                squot64(segred_group_sizze_27261,
                        segment_sizze_nonzzero_31139) -
                squot64(squot64(sext_i32_i64(local_tid_31142),
                                segment_sizze_nonzzero_31139) +
                        sext_i32_i64(virt_group_id_31150) *
                        squot64(segred_group_sizze_27261,
                                segment_sizze_nonzzero_31139), N_20967) *
                N_20967;
        int64_t gtid_27214 = srem64(sext_i32_i64(local_tid_31142), res_20987);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20987) && ((slt64(gtid_27204, m_20968) &&
                                         slt64(gtid_27205, N_20967)) &&
                                        slt64(sext_i32_i64(local_tid_31142),
                                              res_20987 *
                                              squot64(segred_group_sizze_27261,
                                                      segment_sizze_nonzzero_31139)))) {
                float x_27270 = ((__global float *) res_mem_30300)[gtid_27204 *
                                                                   res_20987 +
                                                                   gtid_27214];
                float x_27271 = ((__global float *) mem_29989)[gtid_27205 *
                                                               res_20987 +
                                                               gtid_27214];
                float res_27272 = x_27270 * x_27271;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                        res_27272;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20987)) {
            // perform segmented scan to imitate reduction
            {
                float x_27265;
                float x_27266;
                float x_31151;
                float x_31152;
                bool ltid_in_bounds_31154;
                
                ltid_in_bounds_31154 = slt64(sext_i32_i64(local_tid_31142),
                                             res_20987 *
                                             squot64(segred_group_sizze_27261,
                                                     segment_sizze_nonzzero_31139));
                
                int32_t skip_threads_31155;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31154) {
                        x_27266 = ((volatile __local
                                    float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)];
                        if ((local_tid_31142 - squot32(local_tid_31142, 32) *
                             32) == 0) {
                            x_27265 = x_27266;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31155 = 1;
                    while (slt32(skip_threads_31155, 32)) {
                        if (sle32(skip_threads_31155, local_tid_31142 -
                                  squot32(local_tid_31142, 32) * 32) &&
                            ltid_in_bounds_31154) {
                            // read operands
                            {
                                x_27265 = ((volatile __local
                                            float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142) -
                                                                        sext_i32_i64(skip_threads_31155)];
                            }
                            // perform operation
                            {
                                bool inactive_31156 =
                                     slt64(srem64(sext_i32_i64(local_tid_31142),
                                                  res_20987),
                                           sext_i32_i64(local_tid_31142) -
                                           sext_i32_i64(local_tid_31142 -
                                           skip_threads_31155));
                                
                                if (inactive_31156) {
                                    x_27265 = x_27266;
                                }
                                if (!inactive_31156) {
                                    float res_27267 = x_27265 + x_27266;
                                    
                                    x_27265 = res_27267;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31144, skip_threads_31155)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31155, local_tid_31142 -
                                  squot32(local_tid_31142, 32) * 32) &&
                            ltid_in_bounds_31154) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                                    x_27265;
                                x_27266 = x_27265;
                            }
                        }
                        if (sle32(wave_sizze_31144, skip_threads_31155)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31155 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31142 - squot32(local_tid_31142, 32) * 32) ==
                        31 && ltid_in_bounds_31154) {
                        ((volatile __local
                          float *) red_arr_mem_31146)[sext_i32_i64(squot32(local_tid_31142,
                                                                           32))] =
                            x_27265;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31157;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31142, 32) == 0 &&
                            ltid_in_bounds_31154) {
                            x_31152 = ((volatile __local
                                        float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)];
                            if ((local_tid_31142 - squot32(local_tid_31142,
                                                           32) * 32) == 0) {
                                x_31151 = x_31152;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31157 = 1;
                        while (slt32(skip_threads_31157, 32)) {
                            if (sle32(skip_threads_31157, local_tid_31142 -
                                      squot32(local_tid_31142, 32) * 32) &&
                                (squot32(local_tid_31142, 32) == 0 &&
                                 ltid_in_bounds_31154)) {
                                // read operands
                                {
                                    x_31151 = ((volatile __local
                                                float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142) -
                                                                            sext_i32_i64(skip_threads_31157)];
                                }
                                // perform operation
                                {
                                    bool inactive_31158 =
                                         slt64(srem64(sext_i32_i64(local_tid_31142 *
                                                      32 + 32 - 1), res_20987),
                                               sext_i32_i64(local_tid_31142 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31142 -
                                                             skip_threads_31157) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31158) {
                                        x_31151 = x_31152;
                                    }
                                    if (!inactive_31158) {
                                        float res_31153 = x_31151 + x_31152;
                                        
                                        x_31151 = res_31153;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31144, skip_threads_31157)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31157, local_tid_31142 -
                                      squot32(local_tid_31142, 32) * 32) &&
                                (squot32(local_tid_31142, 32) == 0 &&
                                 ltid_in_bounds_31154)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                                        x_31151;
                                    x_31152 = x_31151;
                                }
                            }
                            if (sle32(wave_sizze_31144, skip_threads_31157)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31157 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31142, 32) == 0 ||
                          !ltid_in_bounds_31154)) {
                        // read operands
                        {
                            x_27266 = x_27265;
                            x_27265 = ((__local
                                        float *) red_arr_mem_31146)[sext_i32_i64(squot32(local_tid_31142,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31159 =
                                 slt64(srem64(sext_i32_i64(local_tid_31142),
                                              res_20987),
                                       sext_i32_i64(local_tid_31142) -
                                       sext_i32_i64(squot32(local_tid_31142,
                                                            32) * 32 - 1));
                            
                            if (inactive_31159) {
                                x_27265 = x_27266;
                            }
                            if (!inactive_31159) {
                                float res_27267 = x_27265 + x_27266;
                                
                                x_27265 = res_27267;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                                x_27265;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31142, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31146)[sext_i32_i64(local_tid_31142)] =
                            x_27266;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31150) *
                      squot64(segred_group_sizze_27261,
                              segment_sizze_nonzzero_31139) +
                      sext_i32_i64(local_tid_31142), m_20968 * N_20967) &&
                slt64(sext_i32_i64(local_tid_31142),
                      squot64(segred_group_sizze_27261,
                              segment_sizze_nonzzero_31139))) {
                ((__global
                  float *) mem_30388)[squot64(sext_i32_i64(virt_group_id_31150) *
                                              squot64(segred_group_sizze_27261,
                                                      segment_sizze_nonzzero_31139) +
                                              sext_i32_i64(local_tid_31142),
                                              N_20967) * N_20967 +
                                      (sext_i32_i64(virt_group_id_31150) *
                                       squot64(segred_group_sizze_27261,
                                               segment_sizze_nonzzero_31139) +
                                       sext_i32_i64(local_tid_31142) -
                                       squot64(sext_i32_i64(virt_group_id_31150) *
                                               squot64(segred_group_sizze_27261,
                                                       segment_sizze_nonzzero_31139) +
                                               sext_i32_i64(local_tid_31142),
                                               N_20967) * N_20967)] = ((__local
                                                                        float *) red_arr_mem_31146)[(sext_i32_i64(local_tid_31142) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_31139 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27261
}
__kernel void mainzisegred_small_27781(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31400_backing_aligned_0,
                                       int64_t N_20967, int64_t m_20968,
                                       int64_t res_20981,
                                       int64_t num_groups_27828, __global
                                       unsigned char *res_mem_30432, __global
                                       unsigned char *mem_30499, __global
                                       unsigned char *mem_30502,
                                       int64_t segment_sizze_nonzzero_31393)
{
    #define segred_group_sizze_27827 (mainzisegred_group_sizze_27775)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31400_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31400_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31395;
    int32_t local_tid_31396;
    int64_t group_sizze_31399;
    int32_t wave_sizze_31398;
    int32_t group_tid_31397;
    
    global_tid_31395 = get_global_id(0);
    local_tid_31396 = get_local_id(0);
    group_sizze_31399 = get_local_size(0);
    wave_sizze_31398 = LOCKSTEP_WIDTH;
    group_tid_31397 = get_group_id(0);
    
    int32_t phys_tid_27781;
    
    phys_tid_27781 = global_tid_31395;
    
    __local char *red_arr_mem_31400;
    
    red_arr_mem_31400 = (__local char *) red_arr_mem_31400_backing_0;
    
    int32_t phys_group_id_31402;
    
    phys_group_id_31402 = get_group_id(0);
    for (int32_t i_31403 = 0; i_31403 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968,
                                          squot64(segred_group_sizze_27827,
                                                  segment_sizze_nonzzero_31393))) -
                   phys_group_id_31402, sext_i64_i32(num_groups_27828));
         i_31403++) {
        int32_t virt_group_id_31404 = phys_group_id_31402 + i_31403 *
                sext_i64_i32(num_groups_27828);
        int64_t gtid_27772 = squot64(sext_i32_i64(local_tid_31396),
                                     segment_sizze_nonzzero_31393) +
                sext_i32_i64(virt_group_id_31404) *
                squot64(segred_group_sizze_27827, segment_sizze_nonzzero_31393);
        int64_t gtid_27780 = srem64(sext_i32_i64(local_tid_31396), res_20981);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20981) && (slt64(gtid_27772, m_20968) &&
                                        slt64(sext_i32_i64(local_tid_31396),
                                              res_20981 *
                                              squot64(segred_group_sizze_27827,
                                                      segment_sizze_nonzzero_31393)))) {
                int32_t res_27835 = ((__global
                                      int32_t *) mem_30499)[gtid_27772];
                int32_t index_primexp_28754 = sext_i64_i32(gtid_27780);
                bool cond_27837 = slt32(index_primexp_28754, res_27835);
                float res_27838;
                
                if (cond_27837) {
                    int64_t i_27839 = sext_i32_i64(index_primexp_28754);
                    float res_27840 = ((__global
                                        float *) res_mem_30432)[gtid_27772 *
                                                                N_20967 +
                                                                i_27839];
                    
                    res_27838 = res_27840;
                } else {
                    res_27838 = 0.0F;
                }
                
                float res_27841 = res_27838 * res_27838;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                        res_27841;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20981)) {
            // perform segmented scan to imitate reduction
            {
                float x_27831;
                float x_27832;
                float x_31405;
                float x_31406;
                bool ltid_in_bounds_31408;
                
                ltid_in_bounds_31408 = slt64(sext_i32_i64(local_tid_31396),
                                             res_20981 *
                                             squot64(segred_group_sizze_27827,
                                                     segment_sizze_nonzzero_31393));
                
                int32_t skip_threads_31409;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31408) {
                        x_27832 = ((volatile __local
                                    float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)];
                        if ((local_tid_31396 - squot32(local_tid_31396, 32) *
                             32) == 0) {
                            x_27831 = x_27832;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31409 = 1;
                    while (slt32(skip_threads_31409, 32)) {
                        if (sle32(skip_threads_31409, local_tid_31396 -
                                  squot32(local_tid_31396, 32) * 32) &&
                            ltid_in_bounds_31408) {
                            // read operands
                            {
                                x_27831 = ((volatile __local
                                            float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396) -
                                                                        sext_i32_i64(skip_threads_31409)];
                            }
                            // perform operation
                            {
                                bool inactive_31410 =
                                     slt64(srem64(sext_i32_i64(local_tid_31396),
                                                  res_20981),
                                           sext_i32_i64(local_tid_31396) -
                                           sext_i32_i64(local_tid_31396 -
                                           skip_threads_31409));
                                
                                if (inactive_31410) {
                                    x_27831 = x_27832;
                                }
                                if (!inactive_31410) {
                                    float res_27833 = x_27831 + x_27832;
                                    
                                    x_27831 = res_27833;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31398, skip_threads_31409)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31409, local_tid_31396 -
                                  squot32(local_tid_31396, 32) * 32) &&
                            ltid_in_bounds_31408) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                                    x_27831;
                                x_27832 = x_27831;
                            }
                        }
                        if (sle32(wave_sizze_31398, skip_threads_31409)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31409 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31396 - squot32(local_tid_31396, 32) * 32) ==
                        31 && ltid_in_bounds_31408) {
                        ((volatile __local
                          float *) red_arr_mem_31400)[sext_i32_i64(squot32(local_tid_31396,
                                                                           32))] =
                            x_27831;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31411;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31396, 32) == 0 &&
                            ltid_in_bounds_31408) {
                            x_31406 = ((volatile __local
                                        float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)];
                            if ((local_tid_31396 - squot32(local_tid_31396,
                                                           32) * 32) == 0) {
                                x_31405 = x_31406;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31411 = 1;
                        while (slt32(skip_threads_31411, 32)) {
                            if (sle32(skip_threads_31411, local_tid_31396 -
                                      squot32(local_tid_31396, 32) * 32) &&
                                (squot32(local_tid_31396, 32) == 0 &&
                                 ltid_in_bounds_31408)) {
                                // read operands
                                {
                                    x_31405 = ((volatile __local
                                                float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396) -
                                                                            sext_i32_i64(skip_threads_31411)];
                                }
                                // perform operation
                                {
                                    bool inactive_31412 =
                                         slt64(srem64(sext_i32_i64(local_tid_31396 *
                                                      32 + 32 - 1), res_20981),
                                               sext_i32_i64(local_tid_31396 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31396 -
                                                             skip_threads_31411) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31412) {
                                        x_31405 = x_31406;
                                    }
                                    if (!inactive_31412) {
                                        float res_31407 = x_31405 + x_31406;
                                        
                                        x_31405 = res_31407;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31398, skip_threads_31411)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31411, local_tid_31396 -
                                      squot32(local_tid_31396, 32) * 32) &&
                                (squot32(local_tid_31396, 32) == 0 &&
                                 ltid_in_bounds_31408)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                                        x_31405;
                                    x_31406 = x_31405;
                                }
                            }
                            if (sle32(wave_sizze_31398, skip_threads_31411)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31411 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31396, 32) == 0 ||
                          !ltid_in_bounds_31408)) {
                        // read operands
                        {
                            x_27832 = x_27831;
                            x_27831 = ((__local
                                        float *) red_arr_mem_31400)[sext_i32_i64(squot32(local_tid_31396,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31413 =
                                 slt64(srem64(sext_i32_i64(local_tid_31396),
                                              res_20981),
                                       sext_i32_i64(local_tid_31396) -
                                       sext_i32_i64(squot32(local_tid_31396,
                                                            32) * 32 - 1));
                            
                            if (inactive_31413) {
                                x_27831 = x_27832;
                            }
                            if (!inactive_31413) {
                                float res_27833 = x_27831 + x_27832;
                                
                                x_27831 = res_27833;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                                x_27831;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31396, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31400)[sext_i32_i64(local_tid_31396)] =
                            x_27832;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31404) *
                      squot64(segred_group_sizze_27827,
                              segment_sizze_nonzzero_31393) +
                      sext_i32_i64(local_tid_31396), m_20968) &&
                slt64(sext_i32_i64(local_tid_31396),
                      squot64(segred_group_sizze_27827,
                              segment_sizze_nonzzero_31393))) {
                ((__global
                  float *) mem_30502)[sext_i32_i64(virt_group_id_31404) *
                                      squot64(segred_group_sizze_27827,
                                              segment_sizze_nonzzero_31393) +
                                      sext_i32_i64(local_tid_31396)] = ((__local
                                                                         float *) red_arr_mem_31400)[(sext_i32_i64(local_tid_31396) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31393 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27827
}
__kernel void mainzisegred_small_27802(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31340_backing_aligned_0,
                                       int64_t m_20968, int64_t N_20969,
                                       int64_t res_20981,
                                       int64_t num_groups_27814, __global
                                       unsigned char *images_mem_29973, __global
                                       unsigned char *mem_30499,
                                       int64_t segment_sizze_nonzzero_31333)
{
    #define segred_group_sizze_27813 (mainzisegred_group_sizze_27796)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31340_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31340_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31335;
    int32_t local_tid_31336;
    int64_t group_sizze_31339;
    int32_t wave_sizze_31338;
    int32_t group_tid_31337;
    
    global_tid_31335 = get_global_id(0);
    local_tid_31336 = get_local_id(0);
    group_sizze_31339 = get_local_size(0);
    wave_sizze_31338 = LOCKSTEP_WIDTH;
    group_tid_31337 = get_group_id(0);
    
    int32_t phys_tid_27802;
    
    phys_tid_27802 = global_tid_31335;
    
    __local char *red_arr_mem_31340;
    
    red_arr_mem_31340 = (__local char *) red_arr_mem_31340_backing_0;
    
    int32_t phys_group_id_31342;
    
    phys_group_id_31342 = get_group_id(0);
    for (int32_t i_31343 = 0; i_31343 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968,
                                          squot64(segred_group_sizze_27813,
                                                  segment_sizze_nonzzero_31333))) -
                   phys_group_id_31342, sext_i64_i32(num_groups_27814));
         i_31343++) {
        int32_t virt_group_id_31344 = phys_group_id_31342 + i_31343 *
                sext_i64_i32(num_groups_27814);
        int64_t gtid_27793 = squot64(sext_i32_i64(local_tid_31336),
                                     segment_sizze_nonzzero_31333) +
                sext_i32_i64(virt_group_id_31344) *
                squot64(segred_group_sizze_27813, segment_sizze_nonzzero_31333);
        int64_t gtid_27801 = srem64(sext_i32_i64(local_tid_31336), res_20981);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20981) && (slt64(gtid_27793, m_20968) &&
                                        slt64(sext_i32_i64(local_tid_31336),
                                              res_20981 *
                                              squot64(segred_group_sizze_27813,
                                                      segment_sizze_nonzzero_31333)))) {
                float x_27821 = ((__global
                                  float *) images_mem_29973)[gtid_27793 *
                                                             N_20969 +
                                                             gtid_27801];
                bool res_27822;
                
                res_27822 = futrts_isnan32(x_27821);
                
                bool cond_27823 = !res_27822;
                int32_t res_27824 = btoi_bool_i32(cond_27823);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                        res_27824;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20981)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_27817;
                int32_t x_27818;
                int32_t x_31345;
                int32_t x_31346;
                bool ltid_in_bounds_31348;
                
                ltid_in_bounds_31348 = slt64(sext_i32_i64(local_tid_31336),
                                             res_20981 *
                                             squot64(segred_group_sizze_27813,
                                                     segment_sizze_nonzzero_31333));
                
                int32_t skip_threads_31349;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31348) {
                        x_27818 = ((volatile __local
                                    int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)];
                        if ((local_tid_31336 - squot32(local_tid_31336, 32) *
                             32) == 0) {
                            x_27817 = x_27818;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31349 = 1;
                    while (slt32(skip_threads_31349, 32)) {
                        if (sle32(skip_threads_31349, local_tid_31336 -
                                  squot32(local_tid_31336, 32) * 32) &&
                            ltid_in_bounds_31348) {
                            // read operands
                            {
                                x_27817 = ((volatile __local
                                            int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336) -
                                                                          sext_i32_i64(skip_threads_31349)];
                            }
                            // perform operation
                            {
                                bool inactive_31350 =
                                     slt64(srem64(sext_i32_i64(local_tid_31336),
                                                  res_20981),
                                           sext_i32_i64(local_tid_31336) -
                                           sext_i32_i64(local_tid_31336 -
                                           skip_threads_31349));
                                
                                if (inactive_31350) {
                                    x_27817 = x_27818;
                                }
                                if (!inactive_31350) {
                                    int32_t res_27819 = add32(x_27817, x_27818);
                                    
                                    x_27817 = res_27819;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31338, skip_threads_31349)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31349, local_tid_31336 -
                                  squot32(local_tid_31336, 32) * 32) &&
                            ltid_in_bounds_31348) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                                    x_27817;
                                x_27818 = x_27817;
                            }
                        }
                        if (sle32(wave_sizze_31338, skip_threads_31349)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31349 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31336 - squot32(local_tid_31336, 32) * 32) ==
                        31 && ltid_in_bounds_31348) {
                        ((volatile __local
                          int32_t *) red_arr_mem_31340)[sext_i32_i64(squot32(local_tid_31336,
                                                                             32))] =
                            x_27817;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31351;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31336, 32) == 0 &&
                            ltid_in_bounds_31348) {
                            x_31346 = ((volatile __local
                                        int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)];
                            if ((local_tid_31336 - squot32(local_tid_31336,
                                                           32) * 32) == 0) {
                                x_31345 = x_31346;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31351 = 1;
                        while (slt32(skip_threads_31351, 32)) {
                            if (sle32(skip_threads_31351, local_tid_31336 -
                                      squot32(local_tid_31336, 32) * 32) &&
                                (squot32(local_tid_31336, 32) == 0 &&
                                 ltid_in_bounds_31348)) {
                                // read operands
                                {
                                    x_31345 = ((volatile __local
                                                int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336) -
                                                                              sext_i32_i64(skip_threads_31351)];
                                }
                                // perform operation
                                {
                                    bool inactive_31352 =
                                         slt64(srem64(sext_i32_i64(local_tid_31336 *
                                                      32 + 32 - 1), res_20981),
                                               sext_i32_i64(local_tid_31336 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31336 -
                                                             skip_threads_31351) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31352) {
                                        x_31345 = x_31346;
                                    }
                                    if (!inactive_31352) {
                                        int32_t res_31347 = add32(x_31345,
                                                                  x_31346);
                                        
                                        x_31345 = res_31347;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31338, skip_threads_31351)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31351, local_tid_31336 -
                                      squot32(local_tid_31336, 32) * 32) &&
                                (squot32(local_tid_31336, 32) == 0 &&
                                 ltid_in_bounds_31348)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                                        x_31345;
                                    x_31346 = x_31345;
                                }
                            }
                            if (sle32(wave_sizze_31338, skip_threads_31351)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31351 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31336, 32) == 0 ||
                          !ltid_in_bounds_31348)) {
                        // read operands
                        {
                            x_27818 = x_27817;
                            x_27817 = ((__local
                                        int32_t *) red_arr_mem_31340)[sext_i32_i64(squot32(local_tid_31336,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_31353 =
                                 slt64(srem64(sext_i32_i64(local_tid_31336),
                                              res_20981),
                                       sext_i32_i64(local_tid_31336) -
                                       sext_i32_i64(squot32(local_tid_31336,
                                                            32) * 32 - 1));
                            
                            if (inactive_31353) {
                                x_27817 = x_27818;
                            }
                            if (!inactive_31353) {
                                int32_t res_27819 = add32(x_27817, x_27818);
                                
                                x_27817 = res_27819;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                                x_27817;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31336, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_31340)[sext_i32_i64(local_tid_31336)] =
                            x_27818;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31344) *
                      squot64(segred_group_sizze_27813,
                              segment_sizze_nonzzero_31333) +
                      sext_i32_i64(local_tid_31336), m_20968) &&
                slt64(sext_i32_i64(local_tid_31336),
                      squot64(segred_group_sizze_27813,
                              segment_sizze_nonzzero_31333))) {
                ((__global
                  int32_t *) mem_30499)[sext_i32_i64(virt_group_id_31344) *
                                        squot64(segred_group_sizze_27813,
                                                segment_sizze_nonzzero_31333) +
                                        sext_i32_i64(local_tid_31336)] =
                    ((__local
                      int32_t *) red_arr_mem_31340)[(sext_i32_i64(local_tid_31336) +
                                                     1) *
                                                    segment_sizze_nonzzero_31333 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27813
}
__kernel void mainzisegred_small_27953(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31509_backing_aligned_0,
                                       int64_t N_20967, int64_t m_20968,
                                       int64_t res_21329,
                                       int64_t num_groups_27971, __global
                                       unsigned char *res_mem_30432, __global
                                       unsigned char *res_mem_30511, __global
                                       unsigned char *res_mem_30512, __global
                                       unsigned char *mem_30561,
                                       int64_t segment_sizze_nonzzero_31502)
{
    #define segred_group_sizze_27970 (mainzisegred_group_sizze_27947)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31509_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31509_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31504;
    int32_t local_tid_31505;
    int64_t group_sizze_31508;
    int32_t wave_sizze_31507;
    int32_t group_tid_31506;
    
    global_tid_31504 = get_global_id(0);
    local_tid_31505 = get_local_id(0);
    group_sizze_31508 = get_local_size(0);
    wave_sizze_31507 = LOCKSTEP_WIDTH;
    group_tid_31506 = get_group_id(0);
    
    int32_t phys_tid_27953;
    
    phys_tid_27953 = global_tid_31504;
    
    __local char *red_arr_mem_31509;
    
    red_arr_mem_31509 = (__local char *) red_arr_mem_31509_backing_0;
    
    int32_t phys_group_id_31511;
    
    phys_group_id_31511 = get_group_id(0);
    for (int32_t i_31512 = 0; i_31512 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968,
                                          squot64(segred_group_sizze_27970,
                                                  segment_sizze_nonzzero_31502))) -
                   phys_group_id_31511, sext_i64_i32(num_groups_27971));
         i_31512++) {
        int32_t virt_group_id_31513 = phys_group_id_31511 + i_31512 *
                sext_i64_i32(num_groups_27971);
        int64_t gtid_27944 = squot64(sext_i32_i64(local_tid_31505),
                                     segment_sizze_nonzzero_31502) +
                sext_i32_i64(virt_group_id_31513) *
                squot64(segred_group_sizze_27970, segment_sizze_nonzzero_31502);
        int64_t gtid_27952 = srem64(sext_i32_i64(local_tid_31505), res_21329);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_21329) && (slt64(gtid_27944, m_20968) &&
                                        slt64(sext_i32_i64(local_tid_31505),
                                              res_21329 *
                                              squot64(segred_group_sizze_27970,
                                                      segment_sizze_nonzzero_31502)))) {
                int32_t x_27979 = ((__global
                                    int32_t *) res_mem_30511)[gtid_27944];
                int32_t index_primexp_28759 = sext_i64_i32(gtid_27952);
                bool cond_27981 = slt32(index_primexp_28759, x_27979);
                float res_27982;
                
                if (cond_27981) {
                    int32_t x_27978 = ((__global
                                        int32_t *) res_mem_30512)[gtid_27944];
                    int32_t x_27983 = add32(x_27978, index_primexp_28759);
                    int32_t x_27984 = sub32(x_27983, x_27979);
                    int32_t i_27985 = add32(1, x_27984);
                    int64_t i_27986 = sext_i32_i64(i_27985);
                    float res_27987 = ((__global
                                        float *) res_mem_30432)[gtid_27944 *
                                                                N_20967 +
                                                                i_27986];
                    
                    res_27982 = res_27987;
                } else {
                    res_27982 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                        res_27982;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_21329)) {
            // perform segmented scan to imitate reduction
            {
                float x_27974;
                float x_27975;
                float x_31514;
                float x_31515;
                bool ltid_in_bounds_31517;
                
                ltid_in_bounds_31517 = slt64(sext_i32_i64(local_tid_31505),
                                             res_21329 *
                                             squot64(segred_group_sizze_27970,
                                                     segment_sizze_nonzzero_31502));
                
                int32_t skip_threads_31518;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31517) {
                        x_27975 = ((volatile __local
                                    float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)];
                        if ((local_tid_31505 - squot32(local_tid_31505, 32) *
                             32) == 0) {
                            x_27974 = x_27975;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31518 = 1;
                    while (slt32(skip_threads_31518, 32)) {
                        if (sle32(skip_threads_31518, local_tid_31505 -
                                  squot32(local_tid_31505, 32) * 32) &&
                            ltid_in_bounds_31517) {
                            // read operands
                            {
                                x_27974 = ((volatile __local
                                            float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505) -
                                                                        sext_i32_i64(skip_threads_31518)];
                            }
                            // perform operation
                            {
                                bool inactive_31519 =
                                     slt64(srem64(sext_i32_i64(local_tid_31505),
                                                  res_21329),
                                           sext_i32_i64(local_tid_31505) -
                                           sext_i32_i64(local_tid_31505 -
                                           skip_threads_31518));
                                
                                if (inactive_31519) {
                                    x_27974 = x_27975;
                                }
                                if (!inactive_31519) {
                                    float res_27976 = x_27974 + x_27975;
                                    
                                    x_27974 = res_27976;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31507, skip_threads_31518)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31518, local_tid_31505 -
                                  squot32(local_tid_31505, 32) * 32) &&
                            ltid_in_bounds_31517) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                                    x_27974;
                                x_27975 = x_27974;
                            }
                        }
                        if (sle32(wave_sizze_31507, skip_threads_31518)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31518 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31505 - squot32(local_tid_31505, 32) * 32) ==
                        31 && ltid_in_bounds_31517) {
                        ((volatile __local
                          float *) red_arr_mem_31509)[sext_i32_i64(squot32(local_tid_31505,
                                                                           32))] =
                            x_27974;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31520;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31505, 32) == 0 &&
                            ltid_in_bounds_31517) {
                            x_31515 = ((volatile __local
                                        float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)];
                            if ((local_tid_31505 - squot32(local_tid_31505,
                                                           32) * 32) == 0) {
                                x_31514 = x_31515;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31520 = 1;
                        while (slt32(skip_threads_31520, 32)) {
                            if (sle32(skip_threads_31520, local_tid_31505 -
                                      squot32(local_tid_31505, 32) * 32) &&
                                (squot32(local_tid_31505, 32) == 0 &&
                                 ltid_in_bounds_31517)) {
                                // read operands
                                {
                                    x_31514 = ((volatile __local
                                                float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505) -
                                                                            sext_i32_i64(skip_threads_31520)];
                                }
                                // perform operation
                                {
                                    bool inactive_31521 =
                                         slt64(srem64(sext_i32_i64(local_tid_31505 *
                                                      32 + 32 - 1), res_21329),
                                               sext_i32_i64(local_tid_31505 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31505 -
                                                             skip_threads_31520) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31521) {
                                        x_31514 = x_31515;
                                    }
                                    if (!inactive_31521) {
                                        float res_31516 = x_31514 + x_31515;
                                        
                                        x_31514 = res_31516;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31507, skip_threads_31520)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31520, local_tid_31505 -
                                      squot32(local_tid_31505, 32) * 32) &&
                                (squot32(local_tid_31505, 32) == 0 &&
                                 ltid_in_bounds_31517)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                                        x_31514;
                                    x_31515 = x_31514;
                                }
                            }
                            if (sle32(wave_sizze_31507, skip_threads_31520)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31520 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31505, 32) == 0 ||
                          !ltid_in_bounds_31517)) {
                        // read operands
                        {
                            x_27975 = x_27974;
                            x_27974 = ((__local
                                        float *) red_arr_mem_31509)[sext_i32_i64(squot32(local_tid_31505,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31522 =
                                 slt64(srem64(sext_i32_i64(local_tid_31505),
                                              res_21329),
                                       sext_i32_i64(local_tid_31505) -
                                       sext_i32_i64(squot32(local_tid_31505,
                                                            32) * 32 - 1));
                            
                            if (inactive_31522) {
                                x_27974 = x_27975;
                            }
                            if (!inactive_31522) {
                                float res_27976 = x_27974 + x_27975;
                                
                                x_27974 = res_27976;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                                x_27974;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31505, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31509)[sext_i32_i64(local_tid_31505)] =
                            x_27975;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31513) *
                      squot64(segred_group_sizze_27970,
                              segment_sizze_nonzzero_31502) +
                      sext_i32_i64(local_tid_31505), m_20968) &&
                slt64(sext_i32_i64(local_tid_31505),
                      squot64(segred_group_sizze_27970,
                              segment_sizze_nonzzero_31502))) {
                ((__global
                  float *) mem_30561)[sext_i32_i64(virt_group_id_31513) *
                                      squot64(segred_group_sizze_27970,
                                              segment_sizze_nonzzero_31502) +
                                      sext_i32_i64(local_tid_31505)] = ((__local
                                                                         float *) red_arr_mem_31509)[(sext_i32_i64(local_tid_31505) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31502 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_27970
}
__kernel void mainzisegred_small_28441(__global int *global_failure,
                                       __local volatile
                                       int64_t *red_arr_mem_31671_backing_aligned_0,
                                       __local volatile
                                       int64_t *red_arr_mem_31669_backing_aligned_1,
                                       __local volatile
                                       int64_t *red_arr_mem_31667_backing_aligned_2,
                                       int64_t m_20968,
                                       int64_t iota32_arg_21351,
                                       int64_t num_groups_28614, __global
                                       unsigned char *mem_30567, __global
                                       unsigned char *mem_30579, __global
                                       unsigned char *mem_30581, __global
                                       unsigned char *mem_30585, __global
                                       unsigned char *mem_30588, __global
                                       unsigned char *mem_30590, __global
                                       unsigned char *mem_30592,
                                       int64_t segment_sizze_nonzzero_31660)
{
    #define segred_group_sizze_28613 (mainzisegred_group_sizze_28435)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31671_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31671_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31669_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31669_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31667_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31667_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31662;
    int32_t local_tid_31663;
    int64_t group_sizze_31666;
    int32_t wave_sizze_31665;
    int32_t group_tid_31664;
    
    global_tid_31662 = get_global_id(0);
    local_tid_31663 = get_local_id(0);
    group_sizze_31666 = get_local_size(0);
    wave_sizze_31665 = LOCKSTEP_WIDTH;
    group_tid_31664 = get_group_id(0);
    
    int32_t phys_tid_28441;
    
    phys_tid_28441 = global_tid_31662;
    
    __local char *red_arr_mem_31667;
    
    red_arr_mem_31667 = (__local char *) red_arr_mem_31667_backing_0;
    
    __local char *red_arr_mem_31669;
    
    red_arr_mem_31669 = (__local char *) red_arr_mem_31669_backing_1;
    
    __local char *red_arr_mem_31671;
    
    red_arr_mem_31671 = (__local char *) red_arr_mem_31671_backing_2;
    
    int32_t phys_group_id_31673;
    
    phys_group_id_31673 = get_group_id(0);
    for (int32_t i_31674 = 0; i_31674 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20968,
                                          squot64(segred_group_sizze_28613,
                                                  segment_sizze_nonzzero_31660))) -
                   phys_group_id_31673, sext_i64_i32(num_groups_28614));
         i_31674++) {
        int32_t virt_group_id_31675 = phys_group_id_31673 + i_31674 *
                sext_i64_i32(num_groups_28614);
        int64_t gtid_28432 = squot64(sext_i32_i64(local_tid_31663),
                                     segment_sizze_nonzzero_31660) +
                sext_i32_i64(virt_group_id_31675) *
                squot64(segred_group_sizze_28613, segment_sizze_nonzzero_31660);
        int64_t gtid_28440 = srem64(sext_i32_i64(local_tid_31663),
                                    iota32_arg_21351);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_21351) && (slt64(gtid_28432, m_20968) &&
                                               slt64(sext_i32_i64(local_tid_31663),
                                                     iota32_arg_21351 *
                                                     squot64(segred_group_sizze_28613,
                                                             segment_sizze_nonzzero_31660)))) {
                int32_t y_28633 = ((__global int32_t *) mem_30581)[gtid_28432];
                float y_28634 = ((__global float *) mem_30579)[gtid_28432];
                float x_28638 = ((__global float *) mem_30585)[gtid_28432 *
                                                               iota32_arg_21351 +
                                                               gtid_28440];
                float x_28639 = ((__global float *) mem_30567)[gtid_28440];
                int32_t index_primexp_28773 = sext_i64_i32(gtid_28440);
                float res_28642 = x_28638 / y_28634;
                bool cond_28643 = slt32(index_primexp_28773, y_28633);
                bool res_28644;
                
                res_28644 = futrts_isnan32(res_28642);
                
                bool res_28645 = !res_28644;
                bool x_28646 = cond_28643 && res_28645;
                float res_28647 = (float) fabs(res_28642);
                bool res_28648 = x_28639 < res_28647;
                bool x_28649 = x_28646 && res_28648;
                float res_28650;
                
                if (cond_28643) {
                    res_28650 = res_28642;
                } else {
                    res_28650 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] =
                        x_28649;
                    ((__local
                      int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                        index_primexp_28773;
                    ((__local
                      float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                        res_28650;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] = 0;
                ((__local
                  int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                    -1;
                ((__local
                  float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_21351)) {
            // perform segmented scan to imitate reduction
            {
                bool x_28619;
                int32_t x_28620;
                float x_28621;
                bool x_28622;
                int32_t x_28623;
                float x_28624;
                bool x_31676;
                int32_t x_31677;
                float x_31678;
                bool x_31679;
                int32_t x_31680;
                float x_31681;
                bool ltid_in_bounds_31690;
                
                ltid_in_bounds_31690 = slt64(sext_i32_i64(local_tid_31663),
                                             iota32_arg_21351 *
                                             squot64(segred_group_sizze_28613,
                                                     segment_sizze_nonzzero_31660));
                
                int32_t skip_threads_31691;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31690) {
                        x_28622 = ((volatile __local
                                    bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)];
                        x_28623 = ((volatile __local
                                    int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)];
                        x_28624 = ((volatile __local
                                    float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)];
                        if ((local_tid_31663 - squot32(local_tid_31663, 32) *
                             32) == 0) {
                            x_28619 = x_28622;
                            x_28620 = x_28623;
                            x_28621 = x_28624;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31691 = 1;
                    while (slt32(skip_threads_31691, 32)) {
                        if (sle32(skip_threads_31691, local_tid_31663 -
                                  squot32(local_tid_31663, 32) * 32) &&
                            ltid_in_bounds_31690) {
                            // read operands
                            {
                                x_28619 = ((volatile __local
                                            bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663) -
                                                                       sext_i32_i64(skip_threads_31691)];
                                x_28620 = ((volatile __local
                                            int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663) -
                                                                          sext_i32_i64(skip_threads_31691)];
                                x_28621 = ((volatile __local
                                            float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663) -
                                                                        sext_i32_i64(skip_threads_31691)];
                            }
                            // perform operation
                            {
                                bool inactive_31692 =
                                     slt64(srem64(sext_i32_i64(local_tid_31663),
                                                  iota32_arg_21351),
                                           sext_i32_i64(local_tid_31663) -
                                           sext_i32_i64(local_tid_31663 -
                                           skip_threads_31691));
                                
                                if (inactive_31692) {
                                    x_28619 = x_28622;
                                    x_28620 = x_28623;
                                    x_28621 = x_28624;
                                }
                                if (!inactive_31692) {
                                    bool res_28625;
                                    int32_t res_28626;
                                    
                                    if (x_28619) {
                                        res_28625 = x_28619;
                                        res_28626 = x_28620;
                                    } else {
                                        bool x_28627 = x_28622 && x_28622;
                                        bool x_28628 = !x_28622;
                                        bool y_28629 = x_28619 && x_28628;
                                        bool res_28630 = x_28627 || y_28629;
                                        int32_t res_28631;
                                        
                                        if (x_28622) {
                                            res_28631 = x_28623;
                                        } else {
                                            res_28631 = x_28620;
                                        }
                                        res_28625 = res_28630;
                                        res_28626 = res_28631;
                                    }
                                    
                                    float res_28632 = x_28621 + x_28624;
                                    
                                    x_28619 = res_28625;
                                    x_28620 = res_28626;
                                    x_28621 = res_28632;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31665, skip_threads_31691)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31691, local_tid_31663 -
                                  squot32(local_tid_31663, 32) * 32) &&
                            ltid_in_bounds_31690) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] =
                                    x_28619;
                                x_28622 = x_28619;
                                ((volatile __local
                                  int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                                    x_28620;
                                x_28623 = x_28620;
                                ((volatile __local
                                  float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                                    x_28621;
                                x_28624 = x_28621;
                            }
                        }
                        if (sle32(wave_sizze_31665, skip_threads_31691)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31691 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31663 - squot32(local_tid_31663, 32) * 32) ==
                        31 && ltid_in_bounds_31690) {
                        ((volatile __local
                          bool *) red_arr_mem_31667)[sext_i32_i64(squot32(local_tid_31663,
                                                                          32))] =
                            x_28619;
                        ((volatile __local
                          int32_t *) red_arr_mem_31669)[sext_i32_i64(squot32(local_tid_31663,
                                                                             32))] =
                            x_28620;
                        ((volatile __local
                          float *) red_arr_mem_31671)[sext_i32_i64(squot32(local_tid_31663,
                                                                           32))] =
                            x_28621;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31693;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31663, 32) == 0 &&
                            ltid_in_bounds_31690) {
                            x_31679 = ((volatile __local
                                        bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)];
                            x_31680 = ((volatile __local
                                        int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)];
                            x_31681 = ((volatile __local
                                        float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)];
                            if ((local_tid_31663 - squot32(local_tid_31663,
                                                           32) * 32) == 0) {
                                x_31676 = x_31679;
                                x_31677 = x_31680;
                                x_31678 = x_31681;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31693 = 1;
                        while (slt32(skip_threads_31693, 32)) {
                            if (sle32(skip_threads_31693, local_tid_31663 -
                                      squot32(local_tid_31663, 32) * 32) &&
                                (squot32(local_tid_31663, 32) == 0 &&
                                 ltid_in_bounds_31690)) {
                                // read operands
                                {
                                    x_31676 = ((volatile __local
                                                bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663) -
                                                                           sext_i32_i64(skip_threads_31693)];
                                    x_31677 = ((volatile __local
                                                int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663) -
                                                                              sext_i32_i64(skip_threads_31693)];
                                    x_31678 = ((volatile __local
                                                float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663) -
                                                                            sext_i32_i64(skip_threads_31693)];
                                }
                                // perform operation
                                {
                                    bool inactive_31694 =
                                         slt64(srem64(sext_i32_i64(local_tid_31663 *
                                                      32 + 32 - 1),
                                                      iota32_arg_21351),
                                               sext_i32_i64(local_tid_31663 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31663 -
                                                             skip_threads_31693) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31694) {
                                        x_31676 = x_31679;
                                        x_31677 = x_31680;
                                        x_31678 = x_31681;
                                    }
                                    if (!inactive_31694) {
                                        bool res_31682;
                                        int32_t res_31683;
                                        
                                        if (x_31676) {
                                            res_31682 = x_31676;
                                            res_31683 = x_31677;
                                        } else {
                                            bool x_31684 = x_31679 && x_31679;
                                            bool x_31685 = !x_31679;
                                            bool y_31686 = x_31676 && x_31685;
                                            bool res_31687 = x_31684 || y_31686;
                                            int32_t res_31688;
                                            
                                            if (x_31679) {
                                                res_31688 = x_31680;
                                            } else {
                                                res_31688 = x_31677;
                                            }
                                            res_31682 = res_31687;
                                            res_31683 = res_31688;
                                        }
                                        
                                        float res_31689 = x_31678 + x_31681;
                                        
                                        x_31676 = res_31682;
                                        x_31677 = res_31683;
                                        x_31678 = res_31689;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31665, skip_threads_31693)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31693, local_tid_31663 -
                                      squot32(local_tid_31663, 32) * 32) &&
                                (squot32(local_tid_31663, 32) == 0 &&
                                 ltid_in_bounds_31690)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] =
                                        x_31676;
                                    x_31679 = x_31676;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                                        x_31677;
                                    x_31680 = x_31677;
                                    ((volatile __local
                                      float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                                        x_31678;
                                    x_31681 = x_31678;
                                }
                            }
                            if (sle32(wave_sizze_31665, skip_threads_31693)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31693 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31663, 32) == 0 ||
                          !ltid_in_bounds_31690)) {
                        // read operands
                        {
                            x_28622 = x_28619;
                            x_28623 = x_28620;
                            x_28624 = x_28621;
                            x_28619 = ((__local
                                        bool *) red_arr_mem_31667)[sext_i32_i64(squot32(local_tid_31663,
                                                                                        32)) -
                                                                   1];
                            x_28620 = ((__local
                                        int32_t *) red_arr_mem_31669)[sext_i32_i64(squot32(local_tid_31663,
                                                                                           32)) -
                                                                      1];
                            x_28621 = ((__local
                                        float *) red_arr_mem_31671)[sext_i32_i64(squot32(local_tid_31663,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31695 =
                                 slt64(srem64(sext_i32_i64(local_tid_31663),
                                              iota32_arg_21351),
                                       sext_i32_i64(local_tid_31663) -
                                       sext_i32_i64(squot32(local_tid_31663,
                                                            32) * 32 - 1));
                            
                            if (inactive_31695) {
                                x_28619 = x_28622;
                                x_28620 = x_28623;
                                x_28621 = x_28624;
                            }
                            if (!inactive_31695) {
                                bool res_28625;
                                int32_t res_28626;
                                
                                if (x_28619) {
                                    res_28625 = x_28619;
                                    res_28626 = x_28620;
                                } else {
                                    bool x_28627 = x_28622 && x_28622;
                                    bool x_28628 = !x_28622;
                                    bool y_28629 = x_28619 && x_28628;
                                    bool res_28630 = x_28627 || y_28629;
                                    int32_t res_28631;
                                    
                                    if (x_28622) {
                                        res_28631 = x_28623;
                                    } else {
                                        res_28631 = x_28620;
                                    }
                                    res_28625 = res_28630;
                                    res_28626 = res_28631;
                                }
                                
                                float res_28632 = x_28621 + x_28624;
                                
                                x_28619 = res_28625;
                                x_28620 = res_28626;
                                x_28621 = res_28632;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] =
                                x_28619;
                            ((__local
                              int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                                x_28620;
                            ((__local
                              float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                                x_28621;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31663, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_31667)[sext_i32_i64(local_tid_31663)] =
                            x_28622;
                        ((__local
                          int32_t *) red_arr_mem_31669)[sext_i32_i64(local_tid_31663)] =
                            x_28623;
                        ((__local
                          float *) red_arr_mem_31671)[sext_i32_i64(local_tid_31663)] =
                            x_28624;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31675) *
                      squot64(segred_group_sizze_28613,
                              segment_sizze_nonzzero_31660) +
                      sext_i32_i64(local_tid_31663), m_20968) &&
                slt64(sext_i32_i64(local_tid_31663),
                      squot64(segred_group_sizze_28613,
                              segment_sizze_nonzzero_31660))) {
                ((__global
                  bool *) mem_30588)[sext_i32_i64(virt_group_id_31675) *
                                     squot64(segred_group_sizze_28613,
                                             segment_sizze_nonzzero_31660) +
                                     sext_i32_i64(local_tid_31663)] = ((__local
                                                                        bool *) red_arr_mem_31667)[(sext_i32_i64(local_tid_31663) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_31660 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_30590)[sext_i32_i64(virt_group_id_31675) *
                                        squot64(segred_group_sizze_28613,
                                                segment_sizze_nonzzero_31660) +
                                        sext_i32_i64(local_tid_31663)] =
                    ((__local
                      int32_t *) red_arr_mem_31669)[(sext_i32_i64(local_tid_31663) +
                                                     1) *
                                                    segment_sizze_nonzzero_31660 -
                                                    1];
                ((__global
                  float *) mem_30592)[sext_i32_i64(virt_group_id_31675) *
                                      squot64(segred_group_sizze_28613,
                                              segment_sizze_nonzzero_31660) +
                                      sext_i32_i64(local_tid_31663)] = ((__local
                                                                         float *) red_arr_mem_31671)[(sext_i32_i64(local_tid_31663) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31660 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_28613
}
__kernel void mainDetailedzicopy_30932(int64_t m_20400, int64_t nm_20551,
                                       int64_t ctx_param_ext_30118,
                                       int64_t ctx_param_ext_30119,
                                       int64_t ctx_param_ext_30121, __global
                                       unsigned char *mem_param_30123, __global
                                       unsigned char *mem_30128)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    int32_t copy_gtid_30932;
    int32_t copy_ltid_30933;
    int32_t copy_gid_30934;
    
    copy_gtid_30932 = get_global_id(0);
    copy_ltid_30933 = get_local_id(0);
    copy_gid_30934 = get_group_id(0);
    if (slt64(sext_i32_i64(copy_gtid_30932), m_20400 * nm_20551)) {
        ((__global float *) mem_30128)[(sext_i32_i64(copy_gtid_30932) -
                                        squot64(sext_i32_i64(copy_gtid_30932),
                                                nm_20551) * nm_20551) *
                                       m_20400 +
                                       squot64(sext_i32_i64(copy_gtid_30932),
                                               nm_20551)] = ((__global
                                                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                                                        (squot64(sext_i32_i64(copy_gtid_30932),
                                                                                                 nm_20551) *
                                                                                         ctx_param_ext_30119 +
                                                                                         (sext_i32_i64(copy_gtid_30932) -
                                                                                          squot64(sext_i32_i64(copy_gtid_30932),
                                                                                                  nm_20551) *
                                                                                          nm_20551) *
                                                                                         ctx_param_ext_30121)];
    }
    
  error_0:
    return;
}
__kernel void mainDetailedziscan_stage1_23910(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_31267_backing_aligned_0,
                                              int64_t N_20399, int64_t m_20400,
                                              int64_t N_20401, __global
                                              unsigned char *images_mem_29973,
                                              __global
                                              unsigned char *res_mem_30394,
                                              __global unsigned char *mem_30423,
                                              __global unsigned char *mem_30426,
                                              int32_t num_threads_31261)
{
    #define segscan_group_sizze_23927 (mainDetailedzisegscan_group_sizze_23904)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31267_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31267_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31262;
    int32_t local_tid_31263;
    int64_t group_sizze_31266;
    int32_t wave_sizze_31265;
    int32_t group_tid_31264;
    
    global_tid_31262 = get_global_id(0);
    local_tid_31263 = get_local_id(0);
    group_sizze_31266 = get_local_size(0);
    wave_sizze_31265 = LOCKSTEP_WIDTH;
    group_tid_31264 = get_group_id(0);
    
    int32_t phys_tid_23910;
    
    phys_tid_23910 = global_tid_31262;
    
    __local char *scan_arr_mem_31267;
    
    scan_arr_mem_31267 = (__local char *) scan_arr_mem_31267_backing_0;
    
    int64_t x_23932;
    int64_t x_23933;
    
    x_23932 = 0;
    for (int64_t j_31269 = 0; j_31269 < sdiv_up64(m_20400 * N_20399,
                                                  sext_i32_i64(num_threads_31261));
         j_31269++) {
        int64_t chunk_offset_31270 = segscan_group_sizze_23927 * j_31269 +
                sext_i32_i64(group_tid_31264) * (segscan_group_sizze_23927 *
                                                 sdiv_up64(m_20400 * N_20399,
                                                           sext_i32_i64(num_threads_31261)));
        int64_t flat_idx_31271 = chunk_offset_31270 +
                sext_i32_i64(local_tid_31263);
        int64_t gtid_23901 = squot64(flat_idx_31271, N_20399);
        int64_t gtid_23909 = flat_idx_31271 - squot64(flat_idx_31271, N_20399) *
                N_20399;
        
        // threads in bounds read input
        {
            if (slt64(gtid_23901, m_20400) && slt64(gtid_23909, N_20399)) {
                float x_23937 = ((__global
                                  float *) images_mem_29973)[gtid_23901 *
                                                             N_20401 +
                                                             gtid_23909];
                bool res_23939;
                
                res_23939 = futrts_isnan32(x_23937);
                
                bool cond_23940 = !res_23939;
                float res_23941;
                
                if (cond_23940) {
                    float x_23938 = ((__global
                                      float *) res_mem_30394)[gtid_23901 *
                                                              N_20399 +
                                                              gtid_23909];
                    float res_23942 = x_23937 - x_23938;
                    
                    res_23941 = res_23942;
                } else {
                    res_23941 = NAN;
                }
                
                bool res_23943;
                
                res_23943 = futrts_isnan32(res_23941);
                
                bool res_23944 = !res_23943;
                int64_t res_23945 = btoi_bool_i64(res_23944);
                
                // write to-scan values to parameters
                {
                    x_23933 = res_23945;
                }
                // write mapped values results to global memory
                {
                    ((__global float *) mem_30426)[gtid_23901 * N_20399 +
                                                   gtid_23909] = res_23941;
                }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_23901, m_20400) && slt64(gtid_23909,
                                                          N_20399))) {
                    x_23933 = 0;
                }
            }
            // combine with carry and write to local memory
            {
                int64_t res_23934 = add64(x_23932, x_23933);
                
                ((__local
                  int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)] =
                    res_23934;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int64_t x_31272;
            int64_t x_31273;
            int64_t x_31275;
            int64_t x_31276;
            bool ltid_in_bounds_31278;
            
            ltid_in_bounds_31278 = slt64(sext_i32_i64(local_tid_31263),
                                         segscan_group_sizze_23927);
            
            int32_t skip_threads_31279;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_31278) {
                    x_31273 = ((volatile __local
                                int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)];
                    if ((local_tid_31263 - squot32(local_tid_31263, 32) * 32) ==
                        0) {
                        x_31272 = x_31273;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31279 = 1;
                while (slt32(skip_threads_31279, 32)) {
                    if (sle32(skip_threads_31279, local_tid_31263 -
                              squot32(local_tid_31263, 32) * 32) &&
                        ltid_in_bounds_31278) {
                        // read operands
                        {
                            x_31272 = ((volatile __local
                                        int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263) -
                                                                       sext_i32_i64(skip_threads_31279)];
                        }
                        // perform operation
                        {
                            bool inactive_31280 =
                                 slt64(srem64(sext_i32_i64(local_tid_31263) +
                                              chunk_offset_31270, N_20399),
                                       sext_i32_i64(local_tid_31263) +
                                       chunk_offset_31270 -
                                       (sext_i32_i64(local_tid_31263 -
                                        skip_threads_31279) +
                                        chunk_offset_31270));
                            
                            if (inactive_31280) {
                                x_31272 = x_31273;
                            }
                            if (!inactive_31280) {
                                int64_t res_31274 = add64(x_31272, x_31273);
                                
                                x_31272 = res_31274;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31265, skip_threads_31279)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_31279, local_tid_31263 -
                              squot32(local_tid_31263, 32) * 32) &&
                        ltid_in_bounds_31278) {
                        // write result
                        {
                            ((volatile __local
                              int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)] =
                                x_31272;
                            x_31273 = x_31272;
                        }
                    }
                    if (sle32(wave_sizze_31265, skip_threads_31279)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31279 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_31263 - squot32(local_tid_31263, 32) * 32) ==
                    31 && ltid_in_bounds_31278) {
                    ((volatile __local
                      int64_t *) scan_arr_mem_31267)[sext_i32_i64(squot32(local_tid_31263,
                                                                          32))] =
                        x_31272;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_31281;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_31263, 32) == 0 &&
                        ltid_in_bounds_31278) {
                        x_31276 = ((volatile __local
                                    int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)];
                        if ((local_tid_31263 - squot32(local_tid_31263, 32) *
                             32) == 0) {
                            x_31275 = x_31276;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31281 = 1;
                    while (slt32(skip_threads_31281, 32)) {
                        if (sle32(skip_threads_31281, local_tid_31263 -
                                  squot32(local_tid_31263, 32) * 32) &&
                            (squot32(local_tid_31263, 32) == 0 &&
                             ltid_in_bounds_31278)) {
                            // read operands
                            {
                                x_31275 = ((volatile __local
                                            int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263) -
                                                                           sext_i32_i64(skip_threads_31281)];
                            }
                            // perform operation
                            {
                                bool inactive_31282 =
                                     slt64(srem64(sext_i32_i64(local_tid_31263 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_31270, N_20399),
                                           sext_i32_i64(local_tid_31263 * 32 +
                                           32 - 1) + chunk_offset_31270 -
                                           (sext_i32_i64((local_tid_31263 -
                                                          skip_threads_31281) *
                                            32 + 32 - 1) + chunk_offset_31270));
                                
                                if (inactive_31282) {
                                    x_31275 = x_31276;
                                }
                                if (!inactive_31282) {
                                    int64_t res_31277 = add64(x_31275, x_31276);
                                    
                                    x_31275 = res_31277;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31265, skip_threads_31281)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31281, local_tid_31263 -
                                  squot32(local_tid_31263, 32) * 32) &&
                            (squot32(local_tid_31263, 32) == 0 &&
                             ltid_in_bounds_31278)) {
                            // write result
                            {
                                ((volatile __local
                                  int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)] =
                                    x_31275;
                                x_31276 = x_31275;
                            }
                        }
                        if (sle32(wave_sizze_31265, skip_threads_31281)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31281 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_31263, 32) == 0 ||
                      !ltid_in_bounds_31278)) {
                    // read operands
                    {
                        x_31273 = x_31272;
                        x_31272 = ((__local
                                    int64_t *) scan_arr_mem_31267)[sext_i32_i64(squot32(local_tid_31263,
                                                                                        32)) -
                                                                   1];
                    }
                    // perform operation
                    {
                        bool inactive_31283 =
                             slt64(srem64(sext_i32_i64(local_tid_31263) +
                                          chunk_offset_31270, N_20399),
                                   sext_i32_i64(local_tid_31263) +
                                   chunk_offset_31270 -
                                   (sext_i32_i64(squot32(local_tid_31263, 32) *
                                    32 - 1) + chunk_offset_31270));
                        
                        if (inactive_31283) {
                            x_31272 = x_31273;
                        }
                        if (!inactive_31283) {
                            int64_t res_31274 = add64(x_31272, x_31273);
                            
                            x_31272 = res_31274;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)] =
                            x_31272;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_31263, 32) == 0) {
                    ((__local
                      int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)] =
                        x_31273;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_23901, m_20400) && slt64(gtid_23909, N_20399)) {
                    ((__global int64_t *) mem_30423)[gtid_23901 * N_20399 +
                                                     gtid_23909] = ((__local
                                                                     int64_t *) scan_arr_mem_31267)[sext_i32_i64(local_tid_31263)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_31284 = slt64(srem64(chunk_offset_31270 +
                                                          segscan_group_sizze_23927,
                                                          N_20399),
                                                   chunk_offset_31270 +
                                                   segscan_group_sizze_23927 -
                                                   (chunk_offset_31270 +
                                                    segscan_group_sizze_23927 -
                                                    1));
                bool should_load_carry_31285 = local_tid_31263 == 0 &&
                     !crosses_segment_31284;
                
                if (should_load_carry_31285) {
                    x_23932 = ((__local
                                int64_t *) scan_arr_mem_31267)[segscan_group_sizze_23927 -
                                                               1];
                }
                if (!should_load_carry_31285) {
                    x_23932 = 0;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_23927
}
__kernel void mainDetailedziscan_stage1_24992(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_31634_backing_aligned_0,
                                              int64_t N_20399, int64_t m_20400,
                                              int64_t iota32_arg_20783, __global
                                              unsigned char *res_mem_30432,
                                              __global
                                              unsigned char *res_mem_30511,
                                              __global
                                              unsigned char *res_mem_30512,
                                              __global
                                              unsigned char *res_mem_30562,
                                              __global unsigned char *mem_30595,
                                              __global unsigned char *mem_30599,
                                              int32_t num_threads_31628)
{
    #define segscan_group_sizze_25071 (mainDetailedzisegscan_group_sizze_24986)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31634_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31634_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31629;
    int32_t local_tid_31630;
    int64_t group_sizze_31633;
    int32_t wave_sizze_31632;
    int32_t group_tid_31631;
    
    global_tid_31629 = get_global_id(0);
    local_tid_31630 = get_local_id(0);
    group_sizze_31633 = get_local_size(0);
    wave_sizze_31632 = LOCKSTEP_WIDTH;
    group_tid_31631 = get_group_id(0);
    
    int32_t phys_tid_24992;
    
    phys_tid_24992 = global_tid_31629;
    
    __local char *scan_arr_mem_31634;
    
    scan_arr_mem_31634 = (__local char *) scan_arr_mem_31634_backing_0;
    
    float x_25075;
    float x_25076;
    
    x_25075 = 0.0F;
    for (int64_t j_31636 = 0; j_31636 < sdiv_up64(m_20400 * iota32_arg_20783,
                                                  sext_i32_i64(num_threads_31628));
         j_31636++) {
        int64_t chunk_offset_31637 = segscan_group_sizze_25071 * j_31636 +
                sext_i32_i64(group_tid_31631) * (segscan_group_sizze_25071 *
                                                 sdiv_up64(m_20400 *
                                                           iota32_arg_20783,
                                                           sext_i32_i64(num_threads_31628)));
        int64_t flat_idx_31638 = chunk_offset_31637 +
                sext_i32_i64(local_tid_31630);
        int64_t gtid_24983 = squot64(flat_idx_31638, iota32_arg_20783);
        int64_t gtid_24991 = flat_idx_31638 - squot64(flat_idx_31638,
                                                      iota32_arg_20783) *
                iota32_arg_20783;
        
        // threads in bounds read input
        {
            if (slt64(gtid_24983, m_20400) && slt64(gtid_24991,
                                                    iota32_arg_20783)) {
                int32_t y_25082 = ((__global int32_t *) mem_30595)[gtid_24983];
                int32_t index_primexp_28773 = sext_i64_i32(gtid_24991);
                bool cond_25085 = sle32(y_25082, index_primexp_28773);
                float res_25086;
                
                if (cond_25085) {
                    res_25086 = 0.0F;
                } else {
                    int32_t x_25078 = ((__global
                                        int32_t *) res_mem_30512)[gtid_24983];
                    int32_t x_25079 = ((__global
                                        int32_t *) res_mem_30511)[gtid_24983];
                    float x_25080 = ((__global
                                      float *) res_mem_30562)[gtid_24983];
                    bool cond_25087 = index_primexp_28773 == 0;
                    float res_25088;
                    
                    if (cond_25087) {
                        res_25088 = x_25080;
                    } else {
                        int32_t x_25089 = sub32(x_25078, x_25079);
                        int32_t i_25090 = add32(x_25089, index_primexp_28773);
                        int64_t i_25091 = sext_i32_i64(i_25090);
                        float negate_arg_25092 = ((__global
                                                   float *) res_mem_30432)[gtid_24983 *
                                                                           N_20399 +
                                                                           i_25091];
                        float x_25093 = 0.0F - negate_arg_25092;
                        int32_t i_25094 = add32(x_25078, index_primexp_28773);
                        int64_t i_25095 = sext_i32_i64(i_25094);
                        float y_25096 = ((__global
                                          float *) res_mem_30432)[gtid_24983 *
                                                                  N_20399 +
                                                                  i_25095];
                        float res_25097 = x_25093 + y_25096;
                        
                        res_25088 = res_25097;
                    }
                    res_25086 = res_25088;
                }
                // write to-scan values to parameters
                {
                    x_25076 = res_25086;
                }
                // write mapped values results to global memory
                { }
            }
        }
        // do one intra-group scan operation
        {
            // maybe restore some to-scan values to parameters, or read neutral
            {
                if (!(slt64(gtid_24983, m_20400) && slt64(gtid_24991,
                                                          iota32_arg_20783))) {
                    x_25076 = 0.0F;
                }
            }
            // combine with carry and write to local memory
            {
                float res_25077 = x_25075 + x_25076;
                
                ((__local
                  float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)] =
                    res_25077;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            float x_31639;
            float x_31640;
            float x_31642;
            float x_31643;
            bool ltid_in_bounds_31645;
            
            ltid_in_bounds_31645 = slt64(sext_i32_i64(local_tid_31630),
                                         segscan_group_sizze_25071);
            
            int32_t skip_threads_31646;
            
            // read input for in-block scan
            {
                if (ltid_in_bounds_31645) {
                    x_31640 = ((volatile __local
                                float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)];
                    if ((local_tid_31630 - squot32(local_tid_31630, 32) * 32) ==
                        0) {
                        x_31639 = x_31640;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31646 = 1;
                while (slt32(skip_threads_31646, 32)) {
                    if (sle32(skip_threads_31646, local_tid_31630 -
                              squot32(local_tid_31630, 32) * 32) &&
                        ltid_in_bounds_31645) {
                        // read operands
                        {
                            x_31639 = ((volatile __local
                                        float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630) -
                                                                     sext_i32_i64(skip_threads_31646)];
                        }
                        // perform operation
                        {
                            bool inactive_31647 =
                                 slt64(srem64(sext_i32_i64(local_tid_31630) +
                                              chunk_offset_31637,
                                              iota32_arg_20783),
                                       sext_i32_i64(local_tid_31630) +
                                       chunk_offset_31637 -
                                       (sext_i32_i64(local_tid_31630 -
                                        skip_threads_31646) +
                                        chunk_offset_31637));
                            
                            if (inactive_31647) {
                                x_31639 = x_31640;
                            }
                            if (!inactive_31647) {
                                float res_31641 = x_31639 + x_31640;
                                
                                x_31639 = res_31641;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31632, skip_threads_31646)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (sle32(skip_threads_31646, local_tid_31630 -
                              squot32(local_tid_31630, 32) * 32) &&
                        ltid_in_bounds_31645) {
                        // write result
                        {
                            ((volatile __local
                              float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)] =
                                x_31639;
                            x_31640 = x_31639;
                        }
                    }
                    if (sle32(wave_sizze_31632, skip_threads_31646)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31646 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_31630 - squot32(local_tid_31630, 32) * 32) ==
                    31 && ltid_in_bounds_31645) {
                    ((volatile __local
                      float *) scan_arr_mem_31634)[sext_i32_i64(squot32(local_tid_31630,
                                                                        32))] =
                        x_31639;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_31648;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_31630, 32) == 0 &&
                        ltid_in_bounds_31645) {
                        x_31643 = ((volatile __local
                                    float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)];
                        if ((local_tid_31630 - squot32(local_tid_31630, 32) *
                             32) == 0) {
                            x_31642 = x_31643;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31648 = 1;
                    while (slt32(skip_threads_31648, 32)) {
                        if (sle32(skip_threads_31648, local_tid_31630 -
                                  squot32(local_tid_31630, 32) * 32) &&
                            (squot32(local_tid_31630, 32) == 0 &&
                             ltid_in_bounds_31645)) {
                            // read operands
                            {
                                x_31642 = ((volatile __local
                                            float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630) -
                                                                         sext_i32_i64(skip_threads_31648)];
                            }
                            // perform operation
                            {
                                bool inactive_31649 =
                                     slt64(srem64(sext_i32_i64(local_tid_31630 *
                                                  32 + 32 - 1) +
                                                  chunk_offset_31637,
                                                  iota32_arg_20783),
                                           sext_i32_i64(local_tid_31630 * 32 +
                                           32 - 1) + chunk_offset_31637 -
                                           (sext_i32_i64((local_tid_31630 -
                                                          skip_threads_31648) *
                                            32 + 32 - 1) + chunk_offset_31637));
                                
                                if (inactive_31649) {
                                    x_31642 = x_31643;
                                }
                                if (!inactive_31649) {
                                    float res_31644 = x_31642 + x_31643;
                                    
                                    x_31642 = res_31644;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31632, skip_threads_31648)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31648, local_tid_31630 -
                                  squot32(local_tid_31630, 32) * 32) &&
                            (squot32(local_tid_31630, 32) == 0 &&
                             ltid_in_bounds_31645)) {
                            // write result
                            {
                                ((volatile __local
                                  float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)] =
                                    x_31642;
                                x_31643 = x_31642;
                            }
                        }
                        if (sle32(wave_sizze_31632, skip_threads_31648)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31648 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // carry-in for every block except the first
            {
                if (!(squot32(local_tid_31630, 32) == 0 ||
                      !ltid_in_bounds_31645)) {
                    // read operands
                    {
                        x_31640 = x_31639;
                        x_31639 = ((__local
                                    float *) scan_arr_mem_31634)[sext_i32_i64(squot32(local_tid_31630,
                                                                                      32)) -
                                                                 1];
                    }
                    // perform operation
                    {
                        bool inactive_31650 =
                             slt64(srem64(sext_i32_i64(local_tid_31630) +
                                          chunk_offset_31637, iota32_arg_20783),
                                   sext_i32_i64(local_tid_31630) +
                                   chunk_offset_31637 -
                                   (sext_i32_i64(squot32(local_tid_31630, 32) *
                                    32 - 1) + chunk_offset_31637));
                        
                        if (inactive_31650) {
                            x_31639 = x_31640;
                        }
                        if (!inactive_31650) {
                            float res_31641 = x_31639 + x_31640;
                            
                            x_31639 = res_31641;
                        }
                    }
                    // write final result
                    {
                        ((__local
                          float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)] =
                            x_31639;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_31630, 32) == 0) {
                    ((__local
                      float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)] =
                        x_31640;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // threads in bounds write partial scan result
            {
                if (slt64(gtid_24983, m_20400) && slt64(gtid_24991,
                                                        iota32_arg_20783)) {
                    ((__global float *) mem_30599)[gtid_24983 *
                                                   iota32_arg_20783 +
                                                   gtid_24991] = ((__local
                                                                   float *) scan_arr_mem_31634)[sext_i32_i64(local_tid_31630)];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread reads last element as carry-in for next iteration
            {
                bool crosses_segment_31651 = slt64(srem64(chunk_offset_31637 +
                                                          segscan_group_sizze_25071,
                                                          iota32_arg_20783),
                                                   chunk_offset_31637 +
                                                   segscan_group_sizze_25071 -
                                                   (chunk_offset_31637 +
                                                    segscan_group_sizze_25071 -
                                                    1));
                bool should_load_carry_31652 = local_tid_31630 == 0 &&
                     !crosses_segment_31651;
                
                if (should_load_carry_31652) {
                    x_25075 = ((__local
                                float *) scan_arr_mem_31634)[segscan_group_sizze_25071 -
                                                             1];
                }
                if (!should_load_carry_31652) {
                    x_25075 = 0.0F;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    
  error_1:
    return;
    #undef segscan_group_sizze_25071
}
__kernel void mainDetailedziscan_stage2_23910(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_31291_backing_aligned_0,
                                              int64_t N_20399, int64_t m_20400,
                                              __global unsigned char *mem_30423,
                                              int64_t stage1_num_groups_31260,
                                              int32_t num_threads_31261)
{
    #define segscan_group_sizze_23927 (mainDetailedzisegscan_group_sizze_23904)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31291_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31291_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31286;
    int32_t local_tid_31287;
    int64_t group_sizze_31290;
    int32_t wave_sizze_31289;
    int32_t group_tid_31288;
    
    global_tid_31286 = get_global_id(0);
    local_tid_31287 = get_local_id(0);
    group_sizze_31290 = get_local_size(0);
    wave_sizze_31289 = LOCKSTEP_WIDTH;
    group_tid_31288 = get_group_id(0);
    
    int32_t phys_tid_23910;
    
    phys_tid_23910 = global_tid_31286;
    
    __local char *scan_arr_mem_31291;
    
    scan_arr_mem_31291 = (__local char *) scan_arr_mem_31291_backing_0;
    
    int64_t flat_idx_31293;
    
    flat_idx_31293 = (sext_i32_i64(local_tid_31287) + 1) *
        (segscan_group_sizze_23927 * sdiv_up64(m_20400 * N_20399,
                                               sext_i32_i64(num_threads_31261))) -
        1;
    
    int64_t gtid_23901;
    
    gtid_23901 = squot64(flat_idx_31293, N_20399);
    
    int64_t gtid_23909;
    
    gtid_23909 = flat_idx_31293 - squot64(flat_idx_31293, N_20399) * N_20399;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_23901, m_20400) && slt64(gtid_23909, N_20399)) {
            ((__local
              int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] =
                ((__global int64_t *) mem_30423)[gtid_23901 * N_20399 +
                                                 gtid_23909];
        } else {
            ((__local
              int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] = 0;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t x_23932;
    int64_t x_23933;
    int64_t x_31294;
    int64_t x_31295;
    bool ltid_in_bounds_31297;
    
    ltid_in_bounds_31297 = slt64(sext_i32_i64(local_tid_31287),
                                 stage1_num_groups_31260);
    
    int32_t skip_threads_31298;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31297) {
            x_23933 = ((volatile __local
                        int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)];
            if ((local_tid_31287 - squot32(local_tid_31287, 32) * 32) == 0) {
                x_23932 = x_23933;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31298 = 1;
        while (slt32(skip_threads_31298, 32)) {
            if (sle32(skip_threads_31298, local_tid_31287 -
                      squot32(local_tid_31287, 32) * 32) &&
                ltid_in_bounds_31297) {
                // read operands
                {
                    x_23932 = ((volatile __local
                                int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287) -
                                                               sext_i32_i64(skip_threads_31298)];
                }
                // perform operation
                {
                    bool inactive_31299 =
                         slt64(srem64((sext_i32_i64(local_tid_31287) + 1) *
                                      (segscan_group_sizze_23927 *
                                       sdiv_up64(m_20400 * N_20399,
                                                 sext_i32_i64(num_threads_31261))) -
                                      1, N_20399),
                               (sext_i32_i64(local_tid_31287) + 1) *
                               (segscan_group_sizze_23927 * sdiv_up64(m_20400 *
                                                                      N_20399,
                                                                      sext_i32_i64(num_threads_31261))) -
                               1 - ((sext_i32_i64(local_tid_31287 -
                                     skip_threads_31298) + 1) *
                                    (segscan_group_sizze_23927 *
                                     sdiv_up64(m_20400 * N_20399,
                                               sext_i32_i64(num_threads_31261))) -
                                    1));
                    
                    if (inactive_31299) {
                        x_23932 = x_23933;
                    }
                    if (!inactive_31299) {
                        int64_t res_23934 = add64(x_23932, x_23933);
                        
                        x_23932 = res_23934;
                    }
                }
            }
            if (sle32(wave_sizze_31289, skip_threads_31298)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31298, local_tid_31287 -
                      squot32(local_tid_31287, 32) * 32) &&
                ltid_in_bounds_31297) {
                // write result
                {
                    ((volatile __local
                      int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] =
                        x_23932;
                    x_23933 = x_23932;
                }
            }
            if (sle32(wave_sizze_31289, skip_threads_31298)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31298 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31287 - squot32(local_tid_31287, 32) * 32) == 31 &&
            ltid_in_bounds_31297) {
            ((volatile __local
              int64_t *) scan_arr_mem_31291)[sext_i32_i64(squot32(local_tid_31287,
                                                                  32))] =
                x_23932;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31300;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31287, 32) == 0 && ltid_in_bounds_31297) {
                x_31295 = ((volatile __local
                            int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)];
                if ((local_tid_31287 - squot32(local_tid_31287, 32) * 32) ==
                    0) {
                    x_31294 = x_31295;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31300 = 1;
            while (slt32(skip_threads_31300, 32)) {
                if (sle32(skip_threads_31300, local_tid_31287 -
                          squot32(local_tid_31287, 32) * 32) &&
                    (squot32(local_tid_31287, 32) == 0 &&
                     ltid_in_bounds_31297)) {
                    // read operands
                    {
                        x_31294 = ((volatile __local
                                    int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287) -
                                                                   sext_i32_i64(skip_threads_31300)];
                    }
                    // perform operation
                    {
                        bool inactive_31301 =
                             slt64(srem64((sext_i32_i64(local_tid_31287 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_23927 *
                                           sdiv_up64(m_20400 * N_20399,
                                                     sext_i32_i64(num_threads_31261))) -
                                          1, N_20399),
                                   (sext_i32_i64(local_tid_31287 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_23927 *
                                               sdiv_up64(m_20400 * N_20399,
                                                         sext_i32_i64(num_threads_31261))) -
                                   1 - ((sext_i32_i64((local_tid_31287 -
                                                       skip_threads_31300) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_23927 *
                                         sdiv_up64(m_20400 * N_20399,
                                                   sext_i32_i64(num_threads_31261))) -
                                        1));
                        
                        if (inactive_31301) {
                            x_31294 = x_31295;
                        }
                        if (!inactive_31301) {
                            int64_t res_31296 = add64(x_31294, x_31295);
                            
                            x_31294 = res_31296;
                        }
                    }
                }
                if (sle32(wave_sizze_31289, skip_threads_31300)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31300, local_tid_31287 -
                          squot32(local_tid_31287, 32) * 32) &&
                    (squot32(local_tid_31287, 32) == 0 &&
                     ltid_in_bounds_31297)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] =
                            x_31294;
                        x_31295 = x_31294;
                    }
                }
                if (sle32(wave_sizze_31289, skip_threads_31300)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31300 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31287, 32) == 0 || !ltid_in_bounds_31297)) {
            // read operands
            {
                x_23933 = x_23932;
                x_23932 = ((__local
                            int64_t *) scan_arr_mem_31291)[sext_i32_i64(squot32(local_tid_31287,
                                                                                32)) -
                                                           1];
            }
            // perform operation
            {
                bool inactive_31302 =
                     slt64(srem64((sext_i32_i64(local_tid_31287) + 1) *
                                  (segscan_group_sizze_23927 *
                                   sdiv_up64(m_20400 * N_20399,
                                             sext_i32_i64(num_threads_31261))) -
                                  1, N_20399), (sext_i32_i64(local_tid_31287) +
                                                1) *
                           (segscan_group_sizze_23927 * sdiv_up64(m_20400 *
                                                                  N_20399,
                                                                  sext_i32_i64(num_threads_31261))) -
                           1 - ((sext_i32_i64(squot32(local_tid_31287, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_23927 *
                                                 sdiv_up64(m_20400 * N_20399,
                                                           sext_i32_i64(num_threads_31261))) -
                                1));
                
                if (inactive_31302) {
                    x_23932 = x_23933;
                }
                if (!inactive_31302) {
                    int64_t res_23934 = add64(x_23932, x_23933);
                    
                    x_23932 = res_23934;
                }
            }
            // write final result
            {
                ((__local
                  int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] =
                    x_23932;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31287, 32) == 0) {
            ((__local
              int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)] =
                x_23933;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_23901, m_20400) && slt64(gtid_23909, N_20399)) {
            ((__global int64_t *) mem_30423)[gtid_23901 * N_20399 +
                                             gtid_23909] = ((__local
                                                             int64_t *) scan_arr_mem_31291)[sext_i32_i64(local_tid_31287)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23927
}
__kernel void mainDetailedziscan_stage2_24992(__global int *global_failure,
                                              __local volatile
                                              int64_t *scan_arr_mem_31658_backing_aligned_0,
                                              int64_t m_20400,
                                              int64_t iota32_arg_20783, __global
                                              unsigned char *mem_30599,
                                              int64_t stage1_num_groups_31627,
                                              int32_t num_threads_31628)
{
    #define segscan_group_sizze_25071 (mainDetailedzisegscan_group_sizze_24986)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict scan_arr_mem_31658_backing_0 =
                          (__local volatile
                           char *) scan_arr_mem_31658_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31653;
    int32_t local_tid_31654;
    int64_t group_sizze_31657;
    int32_t wave_sizze_31656;
    int32_t group_tid_31655;
    
    global_tid_31653 = get_global_id(0);
    local_tid_31654 = get_local_id(0);
    group_sizze_31657 = get_local_size(0);
    wave_sizze_31656 = LOCKSTEP_WIDTH;
    group_tid_31655 = get_group_id(0);
    
    int32_t phys_tid_24992;
    
    phys_tid_24992 = global_tid_31653;
    
    __local char *scan_arr_mem_31658;
    
    scan_arr_mem_31658 = (__local char *) scan_arr_mem_31658_backing_0;
    
    int64_t flat_idx_31660;
    
    flat_idx_31660 = (sext_i32_i64(local_tid_31654) + 1) *
        (segscan_group_sizze_25071 * sdiv_up64(m_20400 * iota32_arg_20783,
                                               sext_i32_i64(num_threads_31628))) -
        1;
    
    int64_t gtid_24983;
    
    gtid_24983 = squot64(flat_idx_31660, iota32_arg_20783);
    
    int64_t gtid_24991;
    
    gtid_24991 = flat_idx_31660 - squot64(flat_idx_31660, iota32_arg_20783) *
        iota32_arg_20783;
    // threads in bound read carries; others get neutral element
    {
        if (slt64(gtid_24983, m_20400) && slt64(gtid_24991, iota32_arg_20783)) {
            ((__local
              float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                ((__global float *) mem_30599)[gtid_24983 * iota32_arg_20783 +
                                               gtid_24991];
        } else {
            ((__local
              float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                0.0F;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float x_25075;
    float x_25076;
    float x_31661;
    float x_31662;
    bool ltid_in_bounds_31664;
    
    ltid_in_bounds_31664 = slt64(sext_i32_i64(local_tid_31654),
                                 stage1_num_groups_31627);
    
    int32_t skip_threads_31665;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31664) {
            x_25076 = ((volatile __local
                        float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)];
            if ((local_tid_31654 - squot32(local_tid_31654, 32) * 32) == 0) {
                x_25075 = x_25076;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31665 = 1;
        while (slt32(skip_threads_31665, 32)) {
            if (sle32(skip_threads_31665, local_tid_31654 -
                      squot32(local_tid_31654, 32) * 32) &&
                ltid_in_bounds_31664) {
                // read operands
                {
                    x_25075 = ((volatile __local
                                float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654) -
                                                             sext_i32_i64(skip_threads_31665)];
                }
                // perform operation
                {
                    bool inactive_31666 =
                         slt64(srem64((sext_i32_i64(local_tid_31654) + 1) *
                                      (segscan_group_sizze_25071 *
                                       sdiv_up64(m_20400 * iota32_arg_20783,
                                                 sext_i32_i64(num_threads_31628))) -
                                      1, iota32_arg_20783),
                               (sext_i32_i64(local_tid_31654) + 1) *
                               (segscan_group_sizze_25071 * sdiv_up64(m_20400 *
                                                                      iota32_arg_20783,
                                                                      sext_i32_i64(num_threads_31628))) -
                               1 - ((sext_i32_i64(local_tid_31654 -
                                     skip_threads_31665) + 1) *
                                    (segscan_group_sizze_25071 *
                                     sdiv_up64(m_20400 * iota32_arg_20783,
                                               sext_i32_i64(num_threads_31628))) -
                                    1));
                    
                    if (inactive_31666) {
                        x_25075 = x_25076;
                    }
                    if (!inactive_31666) {
                        float res_25077 = x_25075 + x_25076;
                        
                        x_25075 = res_25077;
                    }
                }
            }
            if (sle32(wave_sizze_31656, skip_threads_31665)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31665, local_tid_31654 -
                      squot32(local_tid_31654, 32) * 32) &&
                ltid_in_bounds_31664) {
                // write result
                {
                    ((volatile __local
                      float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                        x_25075;
                    x_25076 = x_25075;
                }
            }
            if (sle32(wave_sizze_31656, skip_threads_31665)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31665 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31654 - squot32(local_tid_31654, 32) * 32) == 31 &&
            ltid_in_bounds_31664) {
            ((volatile __local
              float *) scan_arr_mem_31658)[sext_i32_i64(squot32(local_tid_31654,
                                                                32))] = x_25075;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31667;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31654, 32) == 0 && ltid_in_bounds_31664) {
                x_31662 = ((volatile __local
                            float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)];
                if ((local_tid_31654 - squot32(local_tid_31654, 32) * 32) ==
                    0) {
                    x_31661 = x_31662;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31667 = 1;
            while (slt32(skip_threads_31667, 32)) {
                if (sle32(skip_threads_31667, local_tid_31654 -
                          squot32(local_tid_31654, 32) * 32) &&
                    (squot32(local_tid_31654, 32) == 0 &&
                     ltid_in_bounds_31664)) {
                    // read operands
                    {
                        x_31661 = ((volatile __local
                                    float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654) -
                                                                 sext_i32_i64(skip_threads_31667)];
                    }
                    // perform operation
                    {
                        bool inactive_31668 =
                             slt64(srem64((sext_i32_i64(local_tid_31654 * 32 +
                                           32 - 1) + 1) *
                                          (segscan_group_sizze_25071 *
                                           sdiv_up64(m_20400 * iota32_arg_20783,
                                                     sext_i32_i64(num_threads_31628))) -
                                          1, iota32_arg_20783),
                                   (sext_i32_i64(local_tid_31654 * 32 + 32 -
                                    1) + 1) * (segscan_group_sizze_25071 *
                                               sdiv_up64(m_20400 *
                                                         iota32_arg_20783,
                                                         sext_i32_i64(num_threads_31628))) -
                                   1 - ((sext_i32_i64((local_tid_31654 -
                                                       skip_threads_31667) *
                                         32 + 32 - 1) + 1) *
                                        (segscan_group_sizze_25071 *
                                         sdiv_up64(m_20400 * iota32_arg_20783,
                                                   sext_i32_i64(num_threads_31628))) -
                                        1));
                        
                        if (inactive_31668) {
                            x_31661 = x_31662;
                        }
                        if (!inactive_31668) {
                            float res_31663 = x_31661 + x_31662;
                            
                            x_31661 = res_31663;
                        }
                    }
                }
                if (sle32(wave_sizze_31656, skip_threads_31667)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31667, local_tid_31654 -
                          squot32(local_tid_31654, 32) * 32) &&
                    (squot32(local_tid_31654, 32) == 0 &&
                     ltid_in_bounds_31664)) {
                    // write result
                    {
                        ((volatile __local
                          float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                            x_31661;
                        x_31662 = x_31661;
                    }
                }
                if (sle32(wave_sizze_31656, skip_threads_31667)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31667 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31654, 32) == 0 || !ltid_in_bounds_31664)) {
            // read operands
            {
                x_25076 = x_25075;
                x_25075 = ((__local
                            float *) scan_arr_mem_31658)[sext_i32_i64(squot32(local_tid_31654,
                                                                              32)) -
                                                         1];
            }
            // perform operation
            {
                bool inactive_31669 =
                     slt64(srem64((sext_i32_i64(local_tid_31654) + 1) *
                                  (segscan_group_sizze_25071 *
                                   sdiv_up64(m_20400 * iota32_arg_20783,
                                             sext_i32_i64(num_threads_31628))) -
                                  1, iota32_arg_20783),
                           (sext_i32_i64(local_tid_31654) + 1) *
                           (segscan_group_sizze_25071 * sdiv_up64(m_20400 *
                                                                  iota32_arg_20783,
                                                                  sext_i32_i64(num_threads_31628))) -
                           1 - ((sext_i32_i64(squot32(local_tid_31654, 32) *
                                 32 - 1) + 1) * (segscan_group_sizze_25071 *
                                                 sdiv_up64(m_20400 *
                                                           iota32_arg_20783,
                                                           sext_i32_i64(num_threads_31628))) -
                                1));
                
                if (inactive_31669) {
                    x_25075 = x_25076;
                }
                if (!inactive_31669) {
                    float res_25077 = x_25075 + x_25076;
                    
                    x_25075 = res_25077;
                }
            }
            // write final result
            {
                ((__local
                  float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                    x_25075;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31654, 32) == 0) {
            ((__local
              float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)] =
                x_25076;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // threads in bounds write scanned carries
    {
        if (slt64(gtid_24983, m_20400) && slt64(gtid_24991, iota32_arg_20783)) {
            ((__global float *) mem_30599)[gtid_24983 * iota32_arg_20783 +
                                           gtid_24991] = ((__local
                                                           float *) scan_arr_mem_31658)[sext_i32_i64(local_tid_31654)];
        }
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_25071
}
__kernel void mainDetailedziscan_stage3_23910(__global int *global_failure,
                                              int64_t N_20399, int64_t m_20400,
                                              int64_t num_groups_23928, __global
                                              unsigned char *mem_30423,
                                              int32_t num_threads_31261,
                                              int32_t required_groups_31303)
{
    #define segscan_group_sizze_23927 (mainDetailedzisegscan_group_sizze_23904)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31304;
    int32_t local_tid_31305;
    int64_t group_sizze_31308;
    int32_t wave_sizze_31307;
    int32_t group_tid_31306;
    
    global_tid_31304 = get_global_id(0);
    local_tid_31305 = get_local_id(0);
    group_sizze_31308 = get_local_size(0);
    wave_sizze_31307 = LOCKSTEP_WIDTH;
    group_tid_31306 = get_group_id(0);
    
    int32_t phys_tid_23910;
    
    phys_tid_23910 = global_tid_31304;
    
    int32_t phys_group_id_31309;
    
    phys_group_id_31309 = get_group_id(0);
    for (int32_t i_31310 = 0; i_31310 < sdiv_up32(required_groups_31303 -
                                                  phys_group_id_31309,
                                                  sext_i64_i32(num_groups_23928));
         i_31310++) {
        int32_t virt_group_id_31311 = phys_group_id_31309 + i_31310 *
                sext_i64_i32(num_groups_23928);
        int64_t flat_idx_31312 = sext_i32_i64(virt_group_id_31311) *
                segscan_group_sizze_23927 + sext_i32_i64(local_tid_31305);
        int64_t gtid_23901 = squot64(flat_idx_31312, N_20399);
        int64_t gtid_23909 = flat_idx_31312 - squot64(flat_idx_31312, N_20399) *
                N_20399;
        int64_t orig_group_31313 = squot64(flat_idx_31312,
                                           segscan_group_sizze_23927 *
                                           sdiv_up64(m_20400 * N_20399,
                                                     sext_i32_i64(num_threads_31261)));
        int64_t carry_in_flat_idx_31314 = orig_group_31313 *
                (segscan_group_sizze_23927 * sdiv_up64(m_20400 * N_20399,
                                                       sext_i32_i64(num_threads_31261))) -
                1;
        
        if (slt64(gtid_23901, m_20400) && slt64(gtid_23909, N_20399)) {
            if (!(orig_group_31313 == 0 || (flat_idx_31312 ==
                                            (orig_group_31313 + 1) *
                                            (segscan_group_sizze_23927 *
                                             sdiv_up64(m_20400 * N_20399,
                                                       sext_i32_i64(num_threads_31261))) -
                                            1 || slt64(srem64(flat_idx_31312,
                                                              N_20399),
                                                       flat_idx_31312 -
                                                       carry_in_flat_idx_31314)))) {
                int64_t x_23932;
                int64_t x_23933;
                
                x_23932 = ((__global
                            int64_t *) mem_30423)[squot64(carry_in_flat_idx_31314,
                                                          N_20399) * N_20399 +
                                                  (carry_in_flat_idx_31314 -
                                                   squot64(carry_in_flat_idx_31314,
                                                           N_20399) * N_20399)];
                x_23933 = ((__global int64_t *) mem_30423)[gtid_23901 *
                                                           N_20399 +
                                                           gtid_23909];
                
                int64_t res_23934;
                
                res_23934 = add64(x_23932, x_23933);
                x_23932 = res_23934;
                ((__global int64_t *) mem_30423)[gtid_23901 * N_20399 +
                                                 gtid_23909] = x_23932;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_23927
}
__kernel void mainDetailedziscan_stage3_24992(__global int *global_failure,
                                              int64_t m_20400,
                                              int64_t iota32_arg_20783,
                                              int64_t num_groups_25072, __global
                                              unsigned char *mem_30599,
                                              int32_t num_threads_31628,
                                              int32_t required_groups_31670)
{
    #define segscan_group_sizze_25071 (mainDetailedzisegscan_group_sizze_24986)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31671;
    int32_t local_tid_31672;
    int64_t group_sizze_31675;
    int32_t wave_sizze_31674;
    int32_t group_tid_31673;
    
    global_tid_31671 = get_global_id(0);
    local_tid_31672 = get_local_id(0);
    group_sizze_31675 = get_local_size(0);
    wave_sizze_31674 = LOCKSTEP_WIDTH;
    group_tid_31673 = get_group_id(0);
    
    int32_t phys_tid_24992;
    
    phys_tid_24992 = global_tid_31671;
    
    int32_t phys_group_id_31676;
    
    phys_group_id_31676 = get_group_id(0);
    for (int32_t i_31677 = 0; i_31677 < sdiv_up32(required_groups_31670 -
                                                  phys_group_id_31676,
                                                  sext_i64_i32(num_groups_25072));
         i_31677++) {
        int32_t virt_group_id_31678 = phys_group_id_31676 + i_31677 *
                sext_i64_i32(num_groups_25072);
        int64_t flat_idx_31679 = sext_i32_i64(virt_group_id_31678) *
                segscan_group_sizze_25071 + sext_i32_i64(local_tid_31672);
        int64_t gtid_24983 = squot64(flat_idx_31679, iota32_arg_20783);
        int64_t gtid_24991 = flat_idx_31679 - squot64(flat_idx_31679,
                                                      iota32_arg_20783) *
                iota32_arg_20783;
        int64_t orig_group_31680 = squot64(flat_idx_31679,
                                           segscan_group_sizze_25071 *
                                           sdiv_up64(m_20400 * iota32_arg_20783,
                                                     sext_i32_i64(num_threads_31628)));
        int64_t carry_in_flat_idx_31681 = orig_group_31680 *
                (segscan_group_sizze_25071 * sdiv_up64(m_20400 *
                                                       iota32_arg_20783,
                                                       sext_i32_i64(num_threads_31628))) -
                1;
        
        if (slt64(gtid_24983, m_20400) && slt64(gtid_24991, iota32_arg_20783)) {
            if (!(orig_group_31680 == 0 || (flat_idx_31679 ==
                                            (orig_group_31680 + 1) *
                                            (segscan_group_sizze_25071 *
                                             sdiv_up64(m_20400 *
                                                       iota32_arg_20783,
                                                       sext_i32_i64(num_threads_31628))) -
                                            1 || slt64(srem64(flat_idx_31679,
                                                              iota32_arg_20783),
                                                       flat_idx_31679 -
                                                       carry_in_flat_idx_31681)))) {
                float x_25075;
                float x_25076;
                
                x_25075 = ((__global
                            float *) mem_30599)[squot64(carry_in_flat_idx_31681,
                                                        iota32_arg_20783) *
                                                iota32_arg_20783 +
                                                (carry_in_flat_idx_31681 -
                                                 squot64(carry_in_flat_idx_31681,
                                                         iota32_arg_20783) *
                                                 iota32_arg_20783)];
                x_25076 = ((__global float *) mem_30599)[gtid_24983 *
                                                         iota32_arg_20783 +
                                                         gtid_24991];
                
                float res_25077;
                
                res_25077 = x_25075 + x_25076;
                x_25075 = res_25077;
                ((__global float *) mem_30599)[gtid_24983 * iota32_arg_20783 +
                                               gtid_24991] = x_25075;
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segscan_group_sizze_25071
}
__kernel void mainDetailedzisegmap_21707(__global int *global_failure,
                                         int64_t N_20399, float freq_20405,
                                         int64_t res_20419, __global
                                         unsigned char *mappingindices_mem_29972,
                                         __global unsigned char *mem_29977)
{
    #define segmap_group_sizze_21780 (mainDetailedzisegmap_group_sizze_21710)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30790;
    int32_t local_tid_30791;
    int64_t group_sizze_30794;
    int32_t wave_sizze_30793;
    int32_t group_tid_30792;
    
    global_tid_30790 = get_global_id(0);
    local_tid_30791 = get_local_id(0);
    group_sizze_30794 = get_local_size(0);
    wave_sizze_30793 = LOCKSTEP_WIDTH;
    group_tid_30792 = get_group_id(0);
    
    int32_t phys_tid_21707;
    
    phys_tid_21707 = global_tid_30790;
    
    int64_t gtid_21705;
    
    gtid_21705 = squot64(sext_i32_i64(group_tid_30792) *
                         segmap_group_sizze_21780 +
                         sext_i32_i64(local_tid_30791), N_20399);
    
    int64_t gtid_21706;
    
    gtid_21706 = sext_i32_i64(group_tid_30792) * segmap_group_sizze_21780 +
        sext_i32_i64(local_tid_30791) - squot64(sext_i32_i64(group_tid_30792) *
                                                segmap_group_sizze_21780 +
                                                sext_i32_i64(local_tid_30791),
                                                N_20399) * N_20399;
    if (slt64(gtid_21705, res_20419) && slt64(gtid_21706, N_20399)) {
        int32_t index_primexp_28699 = sext_i64_i32(gtid_21705);
        bool index_primexp_28696 = index_primexp_28699 == 0;
        float res_21786;
        
        if (index_primexp_28696) {
            res_21786 = 1.0F;
        } else {
            int32_t x_21785 = ((__global
                                int32_t *) mappingindices_mem_29972)[gtid_21706];
            bool cond_21787 = index_primexp_28699 == 1;
            float res_21788;
            
            if (cond_21787) {
                float res_21789 = sitofp_i32_f32(x_21785);
                
                res_21788 = res_21789;
            } else {
                int32_t r32_arg_21790 = sdiv32(index_primexp_28699, 2);
                float res_21791 = sitofp_i32_f32(r32_arg_21790);
                float res_21792 = sitofp_i32_f32(x_21785);
                float x_21793 = 6.2831855F * res_21791;
                float x_21794 = res_21792 * x_21793;
                float angle_21795 = x_21794 / freq_20405;
                int32_t x_21796 = smod32(index_primexp_28699, 2);
                bool cond_21797 = x_21796 == 0;
                float res_21798;
                
                if (cond_21797) {
                    float res_21799;
                    
                    res_21799 = futrts_sin32(angle_21795);
                    res_21798 = res_21799;
                } else {
                    float res_21800;
                    
                    res_21800 = futrts_cos32(angle_21795);
                    res_21798 = res_21800;
                }
                res_21788 = res_21798;
            }
            res_21786 = res_21788;
        }
        ((__global float *) mem_29977)[gtid_21705 * N_20399 + gtid_21706] =
            res_21786;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_21780
}
__kernel void mainDetailedzisegmap_21885(__global int *global_failure,
                                         int64_t N_20399, float freq_20405,
                                         int64_t res_20419, __global
                                         unsigned char *mappingindices_mem_29972,
                                         __global unsigned char *mem_29981)
{
    #define segmap_group_sizze_21954 (mainDetailedzisegmap_group_sizze_21888)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30795;
    int32_t local_tid_30796;
    int64_t group_sizze_30799;
    int32_t wave_sizze_30798;
    int32_t group_tid_30797;
    
    global_tid_30795 = get_global_id(0);
    local_tid_30796 = get_local_id(0);
    group_sizze_30799 = get_local_size(0);
    wave_sizze_30798 = LOCKSTEP_WIDTH;
    group_tid_30797 = get_group_id(0);
    
    int32_t phys_tid_21885;
    
    phys_tid_21885 = global_tid_30795;
    
    int64_t gtid_21883;
    
    gtid_21883 = squot64(sext_i32_i64(group_tid_30797) *
                         segmap_group_sizze_21954 +
                         sext_i32_i64(local_tid_30796), N_20399);
    
    int64_t gtid_21884;
    
    gtid_21884 = sext_i32_i64(group_tid_30797) * segmap_group_sizze_21954 +
        sext_i32_i64(local_tid_30796) - squot64(sext_i32_i64(group_tid_30797) *
                                                segmap_group_sizze_21954 +
                                                sext_i32_i64(local_tid_30796),
                                                N_20399) * N_20399;
    if (slt64(gtid_21883, res_20419) && slt64(gtid_21884, N_20399)) {
        int32_t index_primexp_28708 = sext_i64_i32(gtid_21883);
        bool index_primexp_28705 = index_primexp_28708 == 0;
        float res_21960;
        
        if (index_primexp_28705) {
            res_21960 = 1.0F;
        } else {
            int32_t x_21959 = ((__global
                                int32_t *) mappingindices_mem_29972)[gtid_21884];
            int32_t i_21961 = add32(1, index_primexp_28708);
            int32_t r32_arg_21962 = sdiv32(i_21961, 2);
            float res_21963 = sitofp_i32_f32(r32_arg_21962);
            float res_21964 = sitofp_i32_f32(x_21959);
            float x_21965 = 6.2831855F * res_21963;
            float x_21966 = res_21964 * x_21965;
            float angle_21967 = x_21966 / freq_20405;
            int32_t x_21968 = smod32(i_21961, 2);
            bool cond_21969 = x_21968 == 0;
            float res_21970;
            
            if (cond_21969) {
                float res_21971;
                
                res_21971 = futrts_sin32(angle_21967);
                res_21970 = res_21971;
            } else {
                float res_21972;
                
                res_21972 = futrts_cos32(angle_21967);
                res_21970 = res_21972;
            }
            res_21960 = res_21970;
        }
        ((__global float *) mem_29981)[gtid_21883 * N_20399 + gtid_21884] =
            res_21960;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_21954
}
__kernel void mainDetailedzisegmap_22013(__global int *global_failure,
                                         int64_t N_20399, int64_t res_20419,
                                         float res_20484, __global
                                         unsigned char *mem_29985, __global
                                         unsigned char *mem_29989)
{
    #define segmap_group_sizze_22037 (mainDetailedzisegmap_group_sizze_22016)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30800;
    int32_t local_tid_30801;
    int64_t group_sizze_30804;
    int32_t wave_sizze_30803;
    int32_t group_tid_30802;
    
    global_tid_30800 = get_global_id(0);
    local_tid_30801 = get_local_id(0);
    group_sizze_30804 = get_local_size(0);
    wave_sizze_30803 = LOCKSTEP_WIDTH;
    group_tid_30802 = get_group_id(0);
    
    int32_t phys_tid_22013;
    
    phys_tid_22013 = global_tid_30800;
    
    int64_t gtid_22011;
    
    gtid_22011 = squot64(sext_i32_i64(group_tid_30802) *
                         segmap_group_sizze_22037 +
                         sext_i32_i64(local_tid_30801), res_20419);
    
    int64_t gtid_22012;
    
    gtid_22012 = sext_i32_i64(group_tid_30802) * segmap_group_sizze_22037 +
        sext_i32_i64(local_tid_30801) - squot64(sext_i32_i64(group_tid_30802) *
                                                segmap_group_sizze_22037 +
                                                sext_i32_i64(local_tid_30801),
                                                res_20419) * res_20419;
    if (slt64(gtid_22011, N_20399) && slt64(gtid_22012, res_20419)) {
        float x_22040 = ((__global float *) mem_29985)[gtid_22011 * res_20419 +
                                                       gtid_22012];
        float res_22041 = res_20484 + x_22040;
        
        ((__global float *) mem_29989)[gtid_22011 * res_20419 + gtid_22012] =
            res_22041;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_22037
}
__kernel void mainDetailedzisegmap_22046(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int32_t n_20404, int32_t k2p2zq_20417,
                                         int64_t res_20419,
                                         int64_t num_groups_22071, __global
                                         unsigned char *binop_p_mem_29982,
                                         __global unsigned char *mem_29989,
                                         __global unsigned char *mem_29992,
                                         __global unsigned char *mem_29996,
                                         __global unsigned char *mem_30038)
{
    #define segmap_group_sizze_22070 (mainDetailedzisegmap_group_sizze_22048)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30808;
    int32_t local_tid_30809;
    int64_t group_sizze_30812;
    int32_t wave_sizze_30811;
    int32_t group_tid_30810;
    
    global_tid_30808 = get_global_id(0);
    local_tid_30809 = get_local_id(0);
    group_sizze_30812 = get_local_size(0);
    wave_sizze_30811 = LOCKSTEP_WIDTH;
    group_tid_30810 = get_group_id(0);
    
    int32_t phys_tid_22046;
    
    phys_tid_22046 = global_tid_30808;
    
    int32_t phys_group_id_30813;
    
    phys_group_id_30813 = get_group_id(0);
    for (int32_t i_30814 = 0; i_30814 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400, segmap_group_sizze_22070)) -
                   phys_group_id_30813, sext_i64_i32(num_groups_22071));
         i_30814++) {
        int32_t virt_group_id_30815 = phys_group_id_30813 + i_30814 *
                sext_i64_i32(num_groups_22071);
        int64_t gtid_22045 = sext_i32_i64(virt_group_id_30815) *
                segmap_group_sizze_22070 + sext_i32_i64(local_tid_30809);
        
        if (slt64(gtid_22045, m_20400)) {
            for (int32_t i_29954 = 0; i_29954 < k2p2zq_20417; i_29954++) {
                int64_t i_29894 = sext_i32_i64(i_29954);
                
                for (int32_t i_29953 = 0; i_29953 < k2p2zq_20417; i_29953++) {
                    int64_t i_29898 = sext_i32_i64(i_29953);
                    float res_22079;
                    float redout_29900 = 0.0F;
                    
                    for (int32_t i_29952 = 0; i_29952 < n_20404; i_29952++) {
                        int64_t i_29901 = sext_i32_i64(i_29952);
                        float x_22083 = ((__global float *) mem_29992)[i_29901 *
                                                                       m_20400 +
                                                                       gtid_22045];
                        float x_22084 = ((__global
                                          float *) binop_p_mem_29982)[i_29894 *
                                                                      N_20399 +
                                                                      i_29901];
                        float x_22085 = ((__global float *) mem_29989)[i_29901 *
                                                                       res_20419 +
                                                                       i_29898];
                        float x_22086 = x_22084 * x_22085;
                        bool res_22087;
                        
                        res_22087 = futrts_isnan32(x_22083);
                        
                        float y_22088;
                        
                        if (res_22087) {
                            y_22088 = 0.0F;
                        } else {
                            y_22088 = 1.0F;
                        }
                        
                        float res_22089 = x_22086 * y_22088;
                        float res_22082 = res_22089 + redout_29900;
                        float redout_tmp_30818 = res_22082;
                        
                        redout_29900 = redout_tmp_30818;
                    }
                    res_22079 = redout_29900;
                    ((__global float *) mem_29996)[phys_tid_22046 + (i_29894 *
                                                                     (num_groups_22071 *
                                                                      segmap_group_sizze_22070 *
                                                                      res_20419) +
                                                                     i_29898 *
                                                                     (num_groups_22071 *
                                                                      segmap_group_sizze_22070))] =
                        res_22079;
                }
            }
            for (int64_t i_30819 = 0; i_30819 < res_20419; i_30819++) {
                for (int64_t i_30820 = 0; i_30820 < res_20419; i_30820++) {
                    ((__global float *) mem_30038)[i_30819 * (m_20400 *
                                                              res_20419) +
                                                   i_30820 * m_20400 +
                                                   gtid_22045] = ((__global
                                                                   float *) mem_29996)[phys_tid_22046 +
                                                                                       (i_30819 *
                                                                                        (num_groups_22071 *
                                                                                         segmap_group_sizze_22070 *
                                                                                         res_20419) +
                                                                                        i_30820 *
                                                                                        (num_groups_22071 *
                                                                                         segmap_group_sizze_22070))];
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_22070
}
__kernel void mainDetailedzisegmap_22092(__global int *global_failure,
                                         int64_t m_20400, int64_t N_20401,
                                         int32_t n_20404, int32_t k2p2zq_20417,
                                         int64_t res_20419,
                                         int64_t num_groups_22248, __global
                                         unsigned char *images_mem_29973,
                                         __global unsigned char *mem_29985,
                                         __global unsigned char *mem_29989,
                                         __global unsigned char *mem_30041,
                                         __global unsigned char *mem_30057)
{
    #define segmap_group_sizze_22247 (mainDetailedzisegmap_group_sizze_22095)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30821;
    int32_t local_tid_30822;
    int64_t group_sizze_30825;
    int32_t wave_sizze_30824;
    int32_t group_tid_30823;
    
    global_tid_30821 = get_global_id(0);
    local_tid_30822 = get_local_id(0);
    group_sizze_30825 = get_local_size(0);
    wave_sizze_30824 = LOCKSTEP_WIDTH;
    group_tid_30823 = get_group_id(0);
    
    int32_t phys_tid_22092;
    
    phys_tid_22092 = global_tid_30821;
    
    int32_t phys_group_id_30826;
    
    phys_group_id_30826 = get_group_id(0);
    for (int32_t i_30827 = 0; i_30827 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400 * res_20419,
                                          segmap_group_sizze_22247)) -
                   phys_group_id_30826, sext_i64_i32(num_groups_22248));
         i_30827++) {
        int32_t virt_group_id_30828 = phys_group_id_30826 + i_30827 *
                sext_i64_i32(num_groups_22248);
        int64_t gtid_22090 = squot64(sext_i32_i64(virt_group_id_30828) *
                                     segmap_group_sizze_22247 +
                                     sext_i32_i64(local_tid_30822), res_20419);
        int64_t gtid_22091 = sext_i32_i64(virt_group_id_30828) *
                segmap_group_sizze_22247 + sext_i32_i64(local_tid_30822) -
                squot64(sext_i32_i64(virt_group_id_30828) *
                        segmap_group_sizze_22247 +
                        sext_i32_i64(local_tid_30822), res_20419) * res_20419;
        
        if (slt64(gtid_22090, m_20400) && slt64(gtid_22091, res_20419)) {
            for (int32_t i_29956 = 0; i_29956 < k2p2zq_20417; i_29956++) {
                int64_t i_29904 = sext_i32_i64(i_29956);
                float res_22259;
                float redout_29906 = 0.0F;
                
                for (int32_t i_29955 = 0; i_29955 < n_20404; i_29955++) {
                    int64_t i_29907 = sext_i32_i64(i_29955);
                    float x_22263 = ((__global
                                      float *) images_mem_29973)[gtid_22090 *
                                                                 N_20401 +
                                                                 i_29907];
                    float x_22264 = ((__global float *) mem_29985)[i_29907 *
                                                                   res_20419 +
                                                                   gtid_22091];
                    float x_22265 = ((__global float *) mem_29989)[i_29907 *
                                                                   res_20419 +
                                                                   i_29904];
                    float x_22266 = x_22264 * x_22265;
                    bool res_22267;
                    
                    res_22267 = futrts_isnan32(x_22263);
                    
                    float y_22268;
                    
                    if (res_22267) {
                        y_22268 = 0.0F;
                    } else {
                        y_22268 = 1.0F;
                    }
                    
                    float res_22269 = x_22266 * y_22268;
                    float res_22262 = res_22269 + redout_29906;
                    float redout_tmp_30830 = res_22262;
                    
                    redout_29906 = redout_tmp_30830;
                }
                res_22259 = redout_29906;
                ((__global float *) mem_30041)[phys_tid_22092 + i_29904 *
                                               (num_groups_22248 *
                                                segmap_group_sizze_22247)] =
                    res_22259;
            }
            for (int64_t i_30831 = 0; i_30831 < res_20419; i_30831++) {
                ((__global float *) mem_30057)[i_30831 * (res_20419 * m_20400) +
                                               gtid_22090 * res_20419 +
                                               gtid_22091] = ((__global
                                                               float *) mem_30041)[phys_tid_22092 +
                                                                                   i_30831 *
                                                                                   (num_groups_22248 *
                                                                                    segmap_group_sizze_22247)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_22247
}
__kernel void mainDetailedzisegmap_22122(__global int *global_failure,
                                         int64_t m_20400, int64_t N_20401,
                                         int32_t n_20404, int64_t res_20419,
                                         __global
                                         unsigned char *images_mem_29973,
                                         __global unsigned char *mem_29985,
                                         __global unsigned char *mem_29989,
                                         __global unsigned char *mem_30062)
{
    #define segmap_group_sizze_22273 (mainDetailedzisegmap_group_sizze_22126)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30832;
    int32_t local_tid_30833;
    int64_t group_sizze_30836;
    int32_t wave_sizze_30835;
    int32_t group_tid_30834;
    
    global_tid_30832 = get_global_id(0);
    local_tid_30833 = get_local_id(0);
    group_sizze_30836 = get_local_size(0);
    wave_sizze_30835 = LOCKSTEP_WIDTH;
    group_tid_30834 = get_group_id(0);
    
    int32_t phys_tid_22122;
    
    phys_tid_22122 = global_tid_30832;
    
    int64_t gtid_22119;
    
    gtid_22119 = squot64(sext_i32_i64(group_tid_30834) *
                         segmap_group_sizze_22273 +
                         sext_i32_i64(local_tid_30833), res_20419 * res_20419);
    
    int64_t gtid_22120;
    
    gtid_22120 = squot64(sext_i32_i64(group_tid_30834) *
                         segmap_group_sizze_22273 +
                         sext_i32_i64(local_tid_30833) -
                         squot64(sext_i32_i64(group_tid_30834) *
                                 segmap_group_sizze_22273 +
                                 sext_i32_i64(local_tid_30833), res_20419 *
                                 res_20419) * (res_20419 * res_20419),
                         res_20419);
    
    int64_t gtid_22121;
    
    gtid_22121 = sext_i32_i64(group_tid_30834) * segmap_group_sizze_22273 +
        sext_i32_i64(local_tid_30833) - squot64(sext_i32_i64(group_tid_30834) *
                                                segmap_group_sizze_22273 +
                                                sext_i32_i64(local_tid_30833),
                                                res_20419 * res_20419) *
        (res_20419 * res_20419) - squot64(sext_i32_i64(group_tid_30834) *
                                          segmap_group_sizze_22273 +
                                          sext_i32_i64(local_tid_30833) -
                                          squot64(sext_i32_i64(group_tid_30834) *
                                                  segmap_group_sizze_22273 +
                                                  sext_i32_i64(local_tid_30833),
                                                  res_20419 * res_20419) *
                                          (res_20419 * res_20419), res_20419) *
        res_20419;
    if ((slt64(gtid_22119, m_20400) && slt64(gtid_22120, res_20419)) &&
        slt64(gtid_22121, res_20419)) {
        float res_22284;
        float redout_29908 = 0.0F;
        
        for (int32_t i_29957 = 0; i_29957 < n_20404; i_29957++) {
            int64_t i_29909 = sext_i32_i64(i_29957);
            float x_22288 = ((__global float *) images_mem_29973)[gtid_22119 *
                                                                  N_20401 +
                                                                  i_29909];
            float x_22289 = ((__global float *) mem_29985)[i_29909 * res_20419 +
                                                           gtid_22120];
            float x_22290 = ((__global float *) mem_29989)[i_29909 * res_20419 +
                                                           gtid_22121];
            float x_22291 = x_22289 * x_22290;
            bool res_22292;
            
            res_22292 = futrts_isnan32(x_22288);
            
            float y_22293;
            
            if (res_22292) {
                y_22293 = 0.0F;
            } else {
                y_22293 = 1.0F;
            }
            
            float res_22294 = x_22291 * y_22293;
            float res_22287 = res_22294 + redout_29908;
            float redout_tmp_30837 = res_22287;
            
            redout_29908 = redout_tmp_30837;
        }
        res_22284 = redout_29908;
        ((__global float *) mem_30062)[gtid_22119 * (res_20419 * res_20419) +
                                       gtid_22120 * res_20419 + gtid_22121] =
            res_22284;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_22273
}
__kernel void mainDetailedzisegmap_22626(__global int *global_failure,
                                         int64_t m_20400, int64_t res_20419,
                                         int64_t m_20550,
                                         int64_t res_r_ixfn_30155,
                                         int64_t res_r_ixfn_30156,
                                         int64_t res_r_ixfn_30158, __global
                                         unsigned char *res_r_mem_30160,
                                         __global unsigned char *mem_30165)
{
    #define segmap_group_sizze_23249 (mainDetailedzisegmap_group_sizze_22630)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30960;
    int32_t local_tid_30961;
    int64_t group_sizze_30964;
    int32_t wave_sizze_30963;
    int32_t group_tid_30962;
    
    global_tid_30960 = get_global_id(0);
    local_tid_30961 = get_local_id(0);
    group_sizze_30964 = get_local_size(0);
    wave_sizze_30963 = LOCKSTEP_WIDTH;
    group_tid_30962 = get_group_id(0);
    
    int32_t phys_tid_22626;
    
    phys_tid_22626 = global_tid_30960;
    
    int64_t gtid_22623;
    
    gtid_22623 = squot64(sext_i32_i64(group_tid_30962) *
                         segmap_group_sizze_23249 +
                         sext_i32_i64(local_tid_30961), res_20419 * res_20419);
    
    int64_t gtid_22624;
    
    gtid_22624 = squot64(sext_i32_i64(group_tid_30962) *
                         segmap_group_sizze_23249 +
                         sext_i32_i64(local_tid_30961) -
                         squot64(sext_i32_i64(group_tid_30962) *
                                 segmap_group_sizze_23249 +
                                 sext_i32_i64(local_tid_30961), res_20419 *
                                 res_20419) * (res_20419 * res_20419),
                         res_20419);
    
    int64_t gtid_22625;
    
    gtid_22625 = sext_i32_i64(group_tid_30962) * segmap_group_sizze_23249 +
        sext_i32_i64(local_tid_30961) - squot64(sext_i32_i64(group_tid_30962) *
                                                segmap_group_sizze_23249 +
                                                sext_i32_i64(local_tid_30961),
                                                res_20419 * res_20419) *
        (res_20419 * res_20419) - squot64(sext_i32_i64(group_tid_30962) *
                                          segmap_group_sizze_23249 +
                                          sext_i32_i64(local_tid_30961) -
                                          squot64(sext_i32_i64(group_tid_30962) *
                                                  segmap_group_sizze_23249 +
                                                  sext_i32_i64(local_tid_30961),
                                                  res_20419 * res_20419) *
                                          (res_20419 * res_20419), res_20419) *
        res_20419;
    if ((slt64(gtid_22623, m_20400) && slt64(gtid_22624, res_20419)) &&
        slt64(gtid_22625, res_20419)) {
        int64_t index_primexp_28738 = m_20550 * gtid_22624;
        int64_t i_23255 = add64(res_20419, gtid_22625);
        int64_t new_index_23256 = i_23255 + index_primexp_28738;
        float res_23257 = ((__global
                            float *) res_r_mem_30160)[res_r_ixfn_30155 +
                                                      (gtid_22623 *
                                                       res_r_ixfn_30156 +
                                                       new_index_23256 *
                                                       res_r_ixfn_30158)];
        
        ((__global float *) mem_30165)[gtid_22623 * (res_20419 * res_20419) +
                                       gtid_22624 * res_20419 + gtid_22625] =
            res_23257;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23249
}
__kernel void mainDetailedzisegmap_22845(__global int *global_failure,
                                         int64_t m_20400, int64_t nm_20551,
                                         int64_t ctx_param_ext_30118,
                                         int64_t ctx_param_ext_30119,
                                         int64_t ctx_param_ext_30121, __global
                                         unsigned char *mem_param_30123,
                                         __global unsigned char *mem_30143)
{
    #define segmap_group_sizze_23214 (mainDetailedzisegmap_group_sizze_22848)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30954;
    int32_t local_tid_30955;
    int64_t group_sizze_30958;
    int32_t wave_sizze_30957;
    int32_t group_tid_30956;
    
    global_tid_30954 = get_global_id(0);
    local_tid_30955 = get_local_id(0);
    group_sizze_30958 = get_local_size(0);
    wave_sizze_30957 = LOCKSTEP_WIDTH;
    group_tid_30956 = get_group_id(0);
    
    int32_t phys_tid_22845;
    
    phys_tid_22845 = global_tid_30954;
    
    int64_t gtid_22843;
    
    gtid_22843 = squot64(sext_i32_i64(group_tid_30956) *
                         segmap_group_sizze_23214 +
                         sext_i32_i64(local_tid_30955), nm_20551);
    
    int64_t gtid_22844;
    
    gtid_22844 = sext_i32_i64(group_tid_30956) * segmap_group_sizze_23214 +
        sext_i32_i64(local_tid_30955) - squot64(sext_i32_i64(group_tid_30956) *
                                                segmap_group_sizze_23214 +
                                                sext_i32_i64(local_tid_30955),
                                                nm_20551) * nm_20551;
    if (slt64(gtid_22843, m_20400) && slt64(gtid_22844, nm_20551)) {
        float write_value_23220 = ((__global float *) mem_30143)[gtid_22843 *
                                                                 nm_20551 +
                                                                 gtid_22844];
        
        if ((sle64(0, gtid_22843) && slt64(gtid_22843, m_20400)) && (sle64(0,
                                                                           gtid_22844) &&
                                                                     slt64(gtid_22844,
                                                                           nm_20551))) {
            ((__global float *) mem_param_30123)[ctx_param_ext_30118 +
                                                 (gtid_22843 *
                                                  ctx_param_ext_30119 +
                                                  gtid_22844 *
                                                  ctx_param_ext_30121)] =
                write_value_23220;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23214
}
__kernel void mainDetailedzisegmap_22899(__global int *global_failure,
                                         int64_t m_20400, int32_t k2p2zq_20417,
                                         int64_t nm_20551, int32_t res_20559,
                                         int32_t i_23113, int64_t i_23115,
                                         int64_t ctx_param_ext_30118,
                                         int64_t ctx_param_ext_30119,
                                         int64_t ctx_param_ext_30121, __global
                                         unsigned char *mem_param_30123,
                                         __global unsigned char *mem_30139,
                                         __global unsigned char *mem_30143)
{
    #define segmap_group_sizze_23180 (mainDetailedzisegmap_group_sizze_22902)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30949;
    int32_t local_tid_30950;
    int64_t group_sizze_30953;
    int32_t wave_sizze_30952;
    int32_t group_tid_30951;
    
    global_tid_30949 = get_global_id(0);
    local_tid_30950 = get_local_id(0);
    group_sizze_30953 = get_local_size(0);
    wave_sizze_30952 = LOCKSTEP_WIDTH;
    group_tid_30951 = get_group_id(0);
    
    int32_t phys_tid_22899;
    
    phys_tid_22899 = global_tid_30949;
    
    int64_t gtid_22897;
    
    gtid_22897 = squot64(sext_i32_i64(group_tid_30951) *
                         segmap_group_sizze_23180 +
                         sext_i32_i64(local_tid_30950), nm_20551);
    
    int64_t gtid_22898;
    
    gtid_22898 = sext_i32_i64(group_tid_30951) * segmap_group_sizze_23180 +
        sext_i32_i64(local_tid_30950) - squot64(sext_i32_i64(group_tid_30951) *
                                                segmap_group_sizze_23180 +
                                                sext_i32_i64(local_tid_30950),
                                                nm_20551) * nm_20551;
    if (slt64(gtid_22897, m_20400) && slt64(gtid_22898, nm_20551)) {
        bool cond_23185 = ((__global bool *) mem_30139)[gtid_22897];
        int32_t res_23187 = sext_i64_i32(gtid_22898);
        int32_t res_23188 = sdiv32(res_23187, res_20559);
        int32_t res_23189 = smod32(res_23187, res_20559);
        float res_23190;
        
        if (cond_23185) {
            int32_t x_23191 = mul32(res_20559, res_23188);
            int32_t i_23192 = add32(res_23189, x_23191);
            int64_t i_23193 = sext_i32_i64(i_23192);
            float res_23194 = ((__global
                                float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_22897 *
                                                           ctx_param_ext_30119 +
                                                           i_23193 *
                                                           ctx_param_ext_30121)];
            
            res_23190 = res_23194;
        } else {
            float v1_23184 = ((__global
                               float *) mem_param_30123)[ctx_param_ext_30118 +
                                                         (gtid_22897 *
                                                          ctx_param_ext_30119 +
                                                          i_23115 *
                                                          ctx_param_ext_30121)];
            int64_t j_23195 = sext_i32_i64(res_23189);
            float x_23196 = ((__global
                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                        (gtid_22897 *
                                                         ctx_param_ext_30119 +
                                                         j_23195 *
                                                         ctx_param_ext_30121)];
            float x_23197 = x_23196 / v1_23184;
            int32_t y_23198 = sub32(k2p2zq_20417, 1);
            bool cond_23199 = slt32(res_23188, y_23198);
            float res_23200;
            
            if (cond_23199) {
                int32_t x_23201 = add32(1, res_23188);
                int32_t x_23202 = mul32(res_20559, x_23201);
                int32_t i_23203 = add32(res_23189, x_23202);
                int64_t i_23204 = sext_i32_i64(i_23203);
                float x_23205 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_22897 *
                                                             ctx_param_ext_30119 +
                                                             i_23204 *
                                                             ctx_param_ext_30121)];
                int32_t i_23206 = add32(i_23113, x_23202);
                int64_t i_23207 = sext_i32_i64(i_23206);
                float x_23208 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_22897 *
                                                             ctx_param_ext_30119 +
                                                             i_23207 *
                                                             ctx_param_ext_30121)];
                float y_23209 = x_23197 * x_23208;
                float res_23210 = x_23205 - y_23209;
                
                res_23200 = res_23210;
            } else {
                res_23200 = x_23197;
            }
            res_23190 = res_23200;
        }
        ((__global float *) mem_30143)[gtid_22897 * nm_20551 + gtid_22898] =
            res_23190;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23180
}
__kernel void mainDetailedzisegmap_22967(__global int *global_failure,
                                         int64_t m_20400, int64_t i_23115,
                                         int64_t ctx_param_ext_30118,
                                         int64_t ctx_param_ext_30119,
                                         int64_t ctx_param_ext_30121, __global
                                         unsigned char *mem_param_30123,
                                         __global unsigned char *mem_30139)
{
    #define segmap_group_sizze_23164 (mainDetailedzisegmap_group_sizze_22969)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30944;
    int32_t local_tid_30945;
    int64_t group_sizze_30948;
    int32_t wave_sizze_30947;
    int32_t group_tid_30946;
    
    global_tid_30944 = get_global_id(0);
    local_tid_30945 = get_local_id(0);
    group_sizze_30948 = get_local_size(0);
    wave_sizze_30947 = LOCKSTEP_WIDTH;
    group_tid_30946 = get_group_id(0);
    
    int32_t phys_tid_22967;
    
    phys_tid_22967 = global_tid_30944;
    
    int64_t gtid_22966;
    
    gtid_22966 = sext_i32_i64(group_tid_30946) * segmap_group_sizze_23164 +
        sext_i32_i64(local_tid_30945);
    if (slt64(gtid_22966, m_20400)) {
        float v1_23169 = ((__global
                           float *) mem_param_30123)[ctx_param_ext_30118 +
                                                     (gtid_22966 *
                                                      ctx_param_ext_30119 +
                                                      i_23115 *
                                                      ctx_param_ext_30121)];
        bool cond_23170 = v1_23169 == 0.0F;
        
        ((__global bool *) mem_30139)[gtid_22966] = cond_23170;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23164
}
__kernel void mainDetailedzisegmap_23058(__global int *global_failure,
                                         int64_t m_20400, int64_t res_20419,
                                         int64_t m_20550, int64_t nm_20551,
                                         __global unsigned char *res_mem_30083,
                                         __global unsigned char *mem_30115)
{
    #define segmap_group_sizze_23098 (mainDetailedzisegmap_group_sizze_23061)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30911;
    int32_t local_tid_30912;
    int64_t group_sizze_30915;
    int32_t wave_sizze_30914;
    int32_t group_tid_30913;
    
    global_tid_30911 = get_global_id(0);
    local_tid_30912 = get_local_id(0);
    group_sizze_30915 = get_local_size(0);
    wave_sizze_30914 = LOCKSTEP_WIDTH;
    group_tid_30913 = get_group_id(0);
    
    int32_t phys_tid_23058;
    
    phys_tid_23058 = global_tid_30911;
    
    int64_t gtid_23056;
    
    gtid_23056 = squot64(sext_i32_i64(group_tid_30913) *
                         segmap_group_sizze_23098 +
                         sext_i32_i64(local_tid_30912), nm_20551);
    
    int64_t gtid_23057;
    
    gtid_23057 = sext_i32_i64(group_tid_30913) * segmap_group_sizze_23098 +
        sext_i32_i64(local_tid_30912) - squot64(sext_i32_i64(group_tid_30913) *
                                                segmap_group_sizze_23098 +
                                                sext_i32_i64(local_tid_30912),
                                                nm_20551) * nm_20551;
    if (slt64(gtid_23056, m_20400) && slt64(gtid_23057, nm_20551)) {
        int64_t res_23103 = sdiv64(gtid_23057, m_20550);
        int64_t res_23104 = smod64(gtid_23057, m_20550);
        bool cond_23105 = slt64(res_23104, res_20419);
        float res_23106;
        
        if (cond_23105) {
            float res_23107 = ((__global float *) res_mem_30083)[gtid_23056 *
                                                                 (res_20419 *
                                                                  res_20419) +
                                                                 res_23103 *
                                                                 res_20419 +
                                                                 res_23104];
            
            res_23106 = res_23107;
        } else {
            int64_t y_23108 = add64(res_20419, res_23103);
            bool cond_23109 = res_23104 == y_23108;
            float res_23110;
            
            if (cond_23109) {
                res_23110 = 1.0F;
            } else {
                res_23110 = 0.0F;
            }
            res_23106 = res_23110;
        }
        ((__global float *) mem_30115)[gtid_23056 * nm_20551 + gtid_23057] =
            res_23106;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23098
}
__kernel void mainDetailedzisegmap_23264(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int32_t n_20404, int32_t k2p2zq_20417,
                                         int64_t res_20419,
                                         int64_t num_groups_23285, __global
                                         unsigned char *binop_p_mem_29982,
                                         __global unsigned char *mem_30169,
                                         __global unsigned char *mem_30172,
                                         __global unsigned char *mem_30187)
{
    #define segmap_group_sizze_23284 (mainDetailedzisegmap_group_sizze_23266)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30968;
    int32_t local_tid_30969;
    int64_t group_sizze_30972;
    int32_t wave_sizze_30971;
    int32_t group_tid_30970;
    
    global_tid_30968 = get_global_id(0);
    local_tid_30969 = get_local_id(0);
    group_sizze_30972 = get_local_size(0);
    wave_sizze_30971 = LOCKSTEP_WIDTH;
    group_tid_30970 = get_group_id(0);
    
    int32_t phys_tid_23264;
    
    phys_tid_23264 = global_tid_30968;
    
    int32_t phys_group_id_30973;
    
    phys_group_id_30973 = get_group_id(0);
    for (int32_t i_30974 = 0; i_30974 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400, segmap_group_sizze_23284)) -
                   phys_group_id_30973, sext_i64_i32(num_groups_23285));
         i_30974++) {
        int32_t virt_group_id_30975 = phys_group_id_30973 + i_30974 *
                sext_i64_i32(num_groups_23285);
        int64_t gtid_23263 = sext_i32_i64(virt_group_id_30975) *
                segmap_group_sizze_23284 + sext_i32_i64(local_tid_30969);
        
        if (slt64(gtid_23263, m_20400)) {
            for (int32_t i_29959 = 0; i_29959 < k2p2zq_20417; i_29959++) {
                int64_t i_29912 = sext_i32_i64(i_29959);
                float res_23291;
                float redout_29914 = 0.0F;
                
                for (int32_t i_29958 = 0; i_29958 < n_20404; i_29958++) {
                    int64_t i_29915 = sext_i32_i64(i_29958);
                    float x_23296 = ((__global float *) mem_30169)[i_29915 *
                                                                   m_20400 +
                                                                   gtid_23263];
                    bool res_23297;
                    
                    res_23297 = futrts_isnan32(x_23296);
                    
                    float res_23298;
                    
                    if (res_23297) {
                        res_23298 = 0.0F;
                    } else {
                        float x_23295 = ((__global
                                          float *) binop_p_mem_29982)[i_29912 *
                                                                      N_20399 +
                                                                      i_29915];
                        float res_23299 = x_23295 * x_23296;
                        
                        res_23298 = res_23299;
                    }
                    
                    float res_23294 = res_23298 + redout_29914;
                    float redout_tmp_30977 = res_23294;
                    
                    redout_29914 = redout_tmp_30977;
                }
                res_23291 = redout_29914;
                ((__global float *) mem_30172)[phys_tid_23264 + i_29912 *
                                               (num_groups_23285 *
                                                segmap_group_sizze_23284)] =
                    res_23291;
            }
            for (int64_t i_30978 = 0; i_30978 < res_20419; i_30978++) {
                ((__global float *) mem_30187)[i_30978 * m_20400 + gtid_23263] =
                    ((__global float *) mem_30172)[phys_tid_23264 + i_30978 *
                                                   (num_groups_23285 *
                                                    segmap_group_sizze_23284)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23284
}
__kernel void mainDetailedzisegmap_23405(__global int *global_failure,
                                         int64_t m_20400, int32_t k2p2zq_20417,
                                         int64_t res_20419,
                                         int64_t num_groups_23425, __global
                                         unsigned char *mem_30261, __global
                                         unsigned char *mem_30264, __global
                                         unsigned char *mem_30267, __global
                                         unsigned char *mem_30282)
{
    #define segmap_group_sizze_23424 (mainDetailedzisegmap_group_sizze_23407)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31056;
    int32_t local_tid_31057;
    int64_t group_sizze_31060;
    int32_t wave_sizze_31059;
    int32_t group_tid_31058;
    
    global_tid_31056 = get_global_id(0);
    local_tid_31057 = get_local_id(0);
    group_sizze_31060 = get_local_size(0);
    wave_sizze_31059 = LOCKSTEP_WIDTH;
    group_tid_31058 = get_group_id(0);
    
    int32_t phys_tid_23405;
    
    phys_tid_23405 = global_tid_31056;
    
    int32_t phys_group_id_31061;
    
    phys_group_id_31061 = get_group_id(0);
    for (int32_t i_31062 = 0; i_31062 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400, segmap_group_sizze_23424)) -
                   phys_group_id_31061, sext_i64_i32(num_groups_23425));
         i_31062++) {
        int32_t virt_group_id_31063 = phys_group_id_31061 + i_31062 *
                sext_i64_i32(num_groups_23425);
        int64_t gtid_23404 = sext_i32_i64(virt_group_id_31063) *
                segmap_group_sizze_23424 + sext_i32_i64(local_tid_31057);
        
        if (slt64(gtid_23404, m_20400)) {
            for (int32_t i_29961 = 0; i_29961 < k2p2zq_20417; i_29961++) {
                int64_t i_29922 = sext_i32_i64(i_29961);
                float res_23432;
                float redout_29924 = 0.0F;
                
                for (int32_t i_29960 = 0; i_29960 < k2p2zq_20417; i_29960++) {
                    int64_t i_29925 = sext_i32_i64(i_29960);
                    float x_23436 = ((__global float *) mem_30264)[i_29925 *
                                                                   m_20400 +
                                                                   gtid_23404];
                    float x_23437 = ((__global float *) mem_30261)[i_29922 *
                                                                   (m_20400 *
                                                                    res_20419) +
                                                                   i_29925 *
                                                                   m_20400 +
                                                                   gtid_23404];
                    float res_23438 = x_23436 * x_23437;
                    float res_23435 = res_23438 + redout_29924;
                    float redout_tmp_31065 = res_23435;
                    
                    redout_29924 = redout_tmp_31065;
                }
                res_23432 = redout_29924;
                ((__global float *) mem_30267)[phys_tid_23405 + i_29922 *
                                               (num_groups_23425 *
                                                segmap_group_sizze_23424)] =
                    res_23432;
            }
            for (int64_t i_31066 = 0; i_31066 < res_20419; i_31066++) {
                ((__global float *) mem_30282)[i_31066 * m_20400 + gtid_23404] =
                    ((__global float *) mem_30267)[phys_tid_23405 + i_31066 *
                                                   (num_groups_23425 *
                                                    segmap_group_sizze_23424)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23424
}
__kernel void mainDetailedzisegmap_23441(__global int *global_failure,
                                         int64_t m_20400, int32_t k2p2zq_20417,
                                         int64_t res_20419, __global
                                         unsigned char *res_mem_30257, __global
                                         unsigned char *mem_30286, __global
                                         unsigned char *mem_30290)
{
    #define segmap_group_sizze_23500 (mainDetailedzisegmap_group_sizze_23444)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31067;
    int32_t local_tid_31068;
    int64_t group_sizze_31071;
    int32_t wave_sizze_31070;
    int32_t group_tid_31069;
    
    global_tid_31067 = get_global_id(0);
    local_tid_31068 = get_local_id(0);
    group_sizze_31071 = get_local_size(0);
    wave_sizze_31070 = LOCKSTEP_WIDTH;
    group_tid_31069 = get_group_id(0);
    
    int32_t phys_tid_23441;
    
    phys_tid_23441 = global_tid_31067;
    
    int64_t gtid_23439;
    
    gtid_23439 = squot64(sext_i32_i64(group_tid_31069) *
                         segmap_group_sizze_23500 +
                         sext_i32_i64(local_tid_31068), res_20419);
    
    int64_t gtid_23440;
    
    gtid_23440 = sext_i32_i64(group_tid_31069) * segmap_group_sizze_23500 +
        sext_i32_i64(local_tid_31068) - squot64(sext_i32_i64(group_tid_31069) *
                                                segmap_group_sizze_23500 +
                                                sext_i32_i64(local_tid_31068),
                                                res_20419) * res_20419;
    if (slt64(gtid_23439, m_20400) && slt64(gtid_23440, res_20419)) {
        float res_23509;
        float redout_29926 = 0.0F;
        
        for (int32_t i_29962 = 0; i_29962 < k2p2zq_20417; i_29962++) {
            int64_t i_29927 = sext_i32_i64(i_29962);
            float x_23513 = ((__global float *) res_mem_30257)[gtid_23439 *
                                                               res_20419 +
                                                               i_29927];
            float x_23514 = ((__global float *) mem_30286)[i_29927 *
                                                           (res_20419 *
                                                            m_20400) +
                                                           gtid_23439 *
                                                           res_20419 +
                                                           gtid_23440];
            float res_23515 = x_23513 * x_23514;
            float res_23512 = res_23515 + redout_29926;
            float redout_tmp_31072 = res_23512;
            
            redout_29926 = redout_tmp_31072;
        }
        res_23509 = redout_29926;
        ((__global float *) mem_30290)[gtid_23439 * res_20419 + gtid_23440] =
            res_23509;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23500
}
__kernel void mainDetailedzisegmap_23537(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int32_t k2p2zq_20417,
                                         int64_t res_20419,
                                         int64_t num_groups_23556, __global
                                         unsigned char *mem_29989, __global
                                         unsigned char *mem_30303, __global
                                         unsigned char *mem_30306, __global
                                         unsigned char *mem_30321)
{
    #define segmap_group_sizze_23555 (mainDetailedzisegmap_group_sizze_23539)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31137;
    int32_t local_tid_31138;
    int64_t group_sizze_31141;
    int32_t wave_sizze_31140;
    int32_t group_tid_31139;
    
    global_tid_31137 = get_global_id(0);
    local_tid_31138 = get_local_id(0);
    group_sizze_31141 = get_local_size(0);
    wave_sizze_31140 = LOCKSTEP_WIDTH;
    group_tid_31139 = get_group_id(0);
    
    int32_t phys_tid_23537;
    
    phys_tid_23537 = global_tid_31137;
    
    int32_t phys_group_id_31142;
    
    phys_group_id_31142 = get_group_id(0);
    for (int32_t i_31143 = 0; i_31143 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400, segmap_group_sizze_23555)) -
                   phys_group_id_31142, sext_i64_i32(num_groups_23556));
         i_31143++) {
        int32_t virt_group_id_31144 = phys_group_id_31142 + i_31143 *
                sext_i64_i32(num_groups_23556);
        int64_t gtid_23536 = sext_i32_i64(virt_group_id_31144) *
                segmap_group_sizze_23555 + sext_i32_i64(local_tid_31138);
        
        if (slt64(gtid_23536, m_20400)) {
            for (int64_t i_29930 = 0; i_29930 < N_20399; i_29930++) {
                float res_23562;
                float redout_29932 = 0.0F;
                
                for (int32_t i_29963 = 0; i_29963 < k2p2zq_20417; i_29963++) {
                    int64_t i_29933 = sext_i32_i64(i_29963);
                    float x_23566 = ((__global float *) mem_30303)[i_29933 *
                                                                   m_20400 +
                                                                   gtid_23536];
                    float x_23567 = ((__global float *) mem_29989)[i_29930 *
                                                                   res_20419 +
                                                                   i_29933];
                    float res_23568 = x_23566 * x_23567;
                    float res_23565 = res_23568 + redout_29932;
                    float redout_tmp_31146 = res_23565;
                    
                    redout_29932 = redout_tmp_31146;
                }
                res_23562 = redout_29932;
                ((__global float *) mem_30306)[phys_tid_23537 + i_29930 *
                                               (num_groups_23556 *
                                                segmap_group_sizze_23555)] =
                    res_23562;
            }
            for (int64_t i_31147 = 0; i_31147 < N_20399; i_31147++) {
                ((__global float *) mem_30321)[i_31147 * m_20400 + gtid_23536] =
                    ((__global float *) mem_30306)[phys_tid_23537 + i_31147 *
                                                   (num_groups_23556 *
                                                    segmap_group_sizze_23555)];
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23555
}
__kernel void mainDetailedzisegmap_23817(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         __global unsigned char *mem_30397,
                                         __global unsigned char *mem_30400,
                                         __global unsigned char *mem_30423,
                                         __global unsigned char *mem_30426)
{
    #define segmap_group_sizze_23983 (mainDetailedzisegmap_group_sizze_23820)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31320;
    int32_t local_tid_31321;
    int64_t group_sizze_31324;
    int32_t wave_sizze_31323;
    int32_t group_tid_31322;
    
    global_tid_31320 = get_global_id(0);
    local_tid_31321 = get_local_id(0);
    group_sizze_31324 = get_local_size(0);
    wave_sizze_31323 = LOCKSTEP_WIDTH;
    group_tid_31322 = get_group_id(0);
    
    int32_t phys_tid_23817;
    
    phys_tid_23817 = global_tid_31320;
    
    int64_t gtid_23815;
    
    gtid_23815 = squot64(sext_i32_i64(group_tid_31322) *
                         segmap_group_sizze_23983 +
                         sext_i32_i64(local_tid_31321), N_20399);
    
    int64_t gtid_23816;
    
    gtid_23816 = sext_i32_i64(group_tid_31322) * segmap_group_sizze_23983 +
        sext_i32_i64(local_tid_31321) - squot64(sext_i32_i64(group_tid_31322) *
                                                segmap_group_sizze_23983 +
                                                sext_i32_i64(local_tid_31321),
                                                N_20399) * N_20399;
    if (slt64(gtid_23815, m_20400) && slt64(gtid_23816, N_20399)) {
        float x_23991 = ((__global float *) mem_30426)[gtid_23815 * N_20399 +
                                                       gtid_23816];
        int32_t index_primexp_28746 = sext_i64_i32(gtid_23816);
        bool res_23994;
        
        res_23994 = futrts_isnan32(x_23991);
        
        bool res_23995 = !res_23994;
        int64_t res_23996;
        
        if (res_23995) {
            int64_t x_23992 = ((__global int64_t *) mem_30423)[gtid_23815 *
                                                               N_20399 +
                                                               gtid_23816];
            int64_t res_23997 = sub64(x_23992, 1);
            
            res_23996 = res_23997;
        } else {
            res_23996 = -1;
        }
        if ((sle64(0, gtid_23815) && slt64(gtid_23815, m_20400)) && (sle64(0,
                                                                           res_23996) &&
                                                                     slt64(res_23996,
                                                                           N_20399))) {
            ((__global int32_t *) mem_30400)[gtid_23815 * N_20399 + res_23996] =
                index_primexp_28746;
        }
        if ((sle64(0, gtid_23815) && slt64(gtid_23815, m_20400)) && (sle64(0,
                                                                           res_23996) &&
                                                                     slt64(res_23996,
                                                                           N_20399))) {
            ((__global float *) mem_30397)[gtid_23815 * N_20399 + res_23996] =
                x_23991;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23983
}
__kernel void mainDetailedzisegmap_23893(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int64_t i_20666, __global
                                         unsigned char *mem_30423, __global
                                         unsigned char *mem_30429)
{
    #define segmap_group_sizze_23947 (mainDetailedzisegmap_group_sizze_23895)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31315;
    int32_t local_tid_31316;
    int64_t group_sizze_31319;
    int32_t wave_sizze_31318;
    int32_t group_tid_31317;
    
    global_tid_31315 = get_global_id(0);
    local_tid_31316 = get_local_id(0);
    group_sizze_31319 = get_local_size(0);
    wave_sizze_31318 = LOCKSTEP_WIDTH;
    group_tid_31317 = get_group_id(0);
    
    int32_t phys_tid_23893;
    
    phys_tid_23893 = global_tid_31315;
    
    int64_t gtid_23892;
    
    gtid_23892 = sext_i32_i64(group_tid_31317) * segmap_group_sizze_23947 +
        sext_i32_i64(local_tid_31316);
    if (slt64(gtid_23892, m_20400)) {
        int64_t res_23951 = ((__global int64_t *) mem_30423)[gtid_23892 *
                                                             N_20399 + i_20666];
        int32_t res_23952 = sext_i64_i32(res_23951);
        
        ((__global int32_t *) mem_30429)[gtid_23892] = res_23952;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_23947
}
__kernel void mainDetailedzisegmap_24144(__global int *global_failure,
                                         int64_t m_20400, float hfrac_20406,
                                         int32_t k2p2_20415, __global
                                         unsigned char *mem_30499, __global
                                         unsigned char *mem_30502, __global
                                         unsigned char *mem_30505, __global
                                         unsigned char *mem_30507)
{
    #define segmap_group_sizze_24229 (mainDetailedzisegmap_group_sizze_24146)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31475;
    int32_t local_tid_31476;
    int64_t group_sizze_31479;
    int32_t wave_sizze_31478;
    int32_t group_tid_31477;
    
    global_tid_31475 = get_global_id(0);
    local_tid_31476 = get_local_id(0);
    group_sizze_31479 = get_local_size(0);
    wave_sizze_31478 = LOCKSTEP_WIDTH;
    group_tid_31477 = get_group_id(0);
    
    int32_t phys_tid_24144;
    
    phys_tid_24144 = global_tid_31475;
    
    int64_t gtid_24143;
    
    gtid_24143 = sext_i32_i64(group_tid_31477) * segmap_group_sizze_24229 +
        sext_i32_i64(local_tid_31476);
    if (slt64(gtid_24143, m_20400)) {
        int32_t res_24233 = ((__global int32_t *) mem_30499)[gtid_24143];
        float res_24234 = ((__global float *) mem_30502)[gtid_24143];
        int32_t r32_arg_24235 = sub32(res_24233, k2p2_20415);
        float res_24236 = sitofp_i32_f32(r32_arg_24235);
        float sqrt_arg_24237 = res_24234 / res_24236;
        float res_24238;
        
        res_24238 = futrts_sqrt32(sqrt_arg_24237);
        
        float res_24239 = sitofp_i32_f32(res_24233);
        float t32_arg_24240 = hfrac_20406 * res_24239;
        int32_t res_24241 = fptosi_f32_i32(t32_arg_24240);
        
        ((__global int32_t *) mem_30505)[gtid_24143] = res_24241;
        ((__global float *) mem_30507)[gtid_24143] = res_24238;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_24229
}
__kernel void mainDetailedzisegmap_24415(__global int *global_failure,
                                         float lam_20407,
                                         int64_t iota32_arg_20783,
                                         int32_t x_20788, float res_20791,
                                         __global
                                         unsigned char *mappingindices_mem_29972,
                                         __global unsigned char *mem_30565,
                                         __global unsigned char *mem_30567)
{
    #define segmap_group_sizze_24434 (mainDetailedzisegmap_group_sizze_24417)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31585;
    int32_t local_tid_31586;
    int64_t group_sizze_31589;
    int32_t wave_sizze_31588;
    int32_t group_tid_31587;
    
    global_tid_31585 = get_global_id(0);
    local_tid_31586 = get_local_id(0);
    group_sizze_31589 = get_local_size(0);
    wave_sizze_31588 = LOCKSTEP_WIDTH;
    group_tid_31587 = get_group_id(0);
    
    int32_t phys_tid_24415;
    
    phys_tid_24415 = global_tid_31585;
    
    int64_t gtid_24414;
    
    gtid_24414 = sext_i32_i64(group_tid_31587) * segmap_group_sizze_24434 +
        sext_i32_i64(local_tid_31586);
    if (slt64(gtid_24414, iota32_arg_20783)) {
        int32_t res_24439 = sext_i64_i32(gtid_24414);
        int32_t t_24440 = add32(x_20788, res_24439);
        int32_t i_24441 = sub32(t_24440, 1);
        int64_t i_24442 = sext_i32_i64(i_24441);
        int32_t time_24443 = ((__global
                               int32_t *) mappingindices_mem_29972)[i_24442];
        float res_24444 = sitofp_i32_f32(time_24443);
        float logplus_arg_24445 = res_24444 / res_20791;
        bool cond_24446 = 2.7182817F < logplus_arg_24445;
        float res_24447;
        
        if (cond_24446) {
            float res_24448;
            
            res_24448 = futrts_log32(logplus_arg_24445);
            res_24447 = res_24448;
        } else {
            res_24447 = 1.0F;
        }
        
        float res_24449;
        
        res_24449 = futrts_sqrt32(res_24447);
        
        float res_24450 = lam_20407 * res_24449;
        
        ((__global int32_t *) mem_30565)[gtid_24414] = res_24439;
        ((__global float *) mem_30567)[gtid_24414] = res_24450;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_24434
}
__kernel void mainDetailedzisegmap_24822(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int32_t n_20404,
                                         int64_t iota32_arg_20783, __global
                                         unsigned char *res_mem_30433, __global
                                         unsigned char *res_mem_30512, __global
                                         unsigned char *mem_30570, __global
                                         unsigned char *mem_30595, __global
                                         unsigned char *mem_30609)
{
    #define segmap_group_sizze_25211 (mainDetailedzisegmap_group_sizze_24825)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31790;
    int32_t local_tid_31791;
    int64_t group_sizze_31794;
    int32_t wave_sizze_31793;
    int32_t group_tid_31792;
    
    global_tid_31790 = get_global_id(0);
    local_tid_31791 = get_local_id(0);
    group_sizze_31794 = get_local_size(0);
    wave_sizze_31793 = LOCKSTEP_WIDTH;
    group_tid_31792 = get_group_id(0);
    
    int32_t phys_tid_24822;
    
    phys_tid_24822 = global_tid_31790;
    
    int64_t gtid_24820;
    
    gtid_24820 = squot64(sext_i32_i64(group_tid_31792) *
                         segmap_group_sizze_25211 +
                         sext_i32_i64(local_tid_31791), iota32_arg_20783);
    
    int64_t gtid_24821;
    
    gtid_24821 = sext_i32_i64(group_tid_31792) * segmap_group_sizze_25211 +
        sext_i32_i64(local_tid_31791) - squot64(sext_i32_i64(group_tid_31792) *
                                                segmap_group_sizze_25211 +
                                                sext_i32_i64(local_tid_31791),
                                                iota32_arg_20783) *
        iota32_arg_20783;
    if (slt64(gtid_24820, m_20400) && slt64(gtid_24821, iota32_arg_20783)) {
        int32_t y_25216 = ((__global int32_t *) mem_30595)[gtid_24820];
        int32_t index_primexp_28779 = sext_i64_i32(gtid_24821);
        float write_value_25220 = ((__global float *) mem_30609)[gtid_24820 *
                                                                 iota32_arg_20783 +
                                                                 gtid_24821];
        bool cond_25221 = slt32(index_primexp_28779, y_25216);
        int32_t res_25222;
        
        if (cond_25221) {
            int32_t x_25214 = ((__global int32_t *) res_mem_30512)[gtid_24820];
            int32_t i_25223 = add32(x_25214, index_primexp_28779);
            int64_t i_25224 = sext_i32_i64(i_25223);
            int32_t x_25225 = ((__global int32_t *) res_mem_30433)[gtid_24820 *
                                                                   N_20399 +
                                                                   i_25224];
            int32_t res_25226 = sub32(x_25225, n_20404);
            
            res_25222 = res_25226;
        } else {
            res_25222 = -1;
        }
        
        int64_t res_25227 = sext_i32_i64(res_25222);
        
        if ((sle64(0, gtid_24820) && slt64(gtid_24820, m_20400)) && (sle64(0,
                                                                           res_25227) &&
                                                                     slt64(res_25227,
                                                                           iota32_arg_20783))) {
            ((__global float *) mem_30570)[gtid_24820 * iota32_arg_20783 +
                                           res_25227] = write_value_25220;
        }
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25211
}
__kernel void mainDetailedzisegmap_24874(__global int *global_failure,
                                         int64_t N_20399, int64_t m_20400,
                                         int32_t n_20404, __global
                                         unsigned char *res_mem_30433, __global
                                         unsigned char *res_mem_30512, __global
                                         unsigned char *mem_30595, __global
                                         unsigned char *mem_30614, __global
                                         unsigned char *mem_30616, __global
                                         unsigned char *mem_30619)
{
    #define segmap_group_sizze_25173 (mainDetailedzisegmap_group_sizze_24876)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31785;
    int32_t local_tid_31786;
    int64_t group_sizze_31789;
    int32_t wave_sizze_31788;
    int32_t group_tid_31787;
    
    global_tid_31785 = get_global_id(0);
    local_tid_31786 = get_local_id(0);
    group_sizze_31789 = get_local_size(0);
    wave_sizze_31788 = LOCKSTEP_WIDTH;
    group_tid_31787 = get_group_id(0);
    
    int32_t phys_tid_24874;
    
    phys_tid_24874 = global_tid_31785;
    
    int64_t gtid_24873;
    
    gtid_24873 = sext_i32_i64(group_tid_31787) * segmap_group_sizze_25173 +
        sext_i32_i64(local_tid_31786);
    if (slt64(gtid_24873, m_20400)) {
        int32_t x_25176 = ((__global int32_t *) res_mem_30512)[gtid_24873];
        int32_t y_25178 = ((__global int32_t *) mem_30595)[gtid_24873];
        bool res_25179 = ((__global bool *) mem_30614)[gtid_24873];
        bool cond_25181 = !res_25179;
        int32_t fst_breakzq_25182;
        
        if (cond_25181) {
            fst_breakzq_25182 = -1;
        } else {
            int32_t res_25180 = ((__global int32_t *) mem_30616)[gtid_24873];
            bool cond_25183 = slt32(res_25180, y_25178);
            int32_t res_25184;
            
            if (cond_25183) {
                int32_t i_25185 = add32(x_25176, res_25180);
                int64_t i_25186 = sext_i32_i64(i_25185);
                int32_t x_25187 = ((__global
                                    int32_t *) res_mem_30433)[gtid_24873 *
                                                              N_20399 +
                                                              i_25186];
                int32_t res_25188 = sub32(x_25187, n_20404);
                
                res_25184 = res_25188;
            } else {
                res_25184 = -1;
            }
            fst_breakzq_25182 = res_25184;
        }
        
        bool cond_25189 = sle32(x_25176, 5);
        bool res_25190 = sle32(y_25178, 5);
        bool x_25191 = !cond_25189;
        bool y_25192 = res_25190 && x_25191;
        bool cond_25193 = cond_25189 || y_25192;
        int32_t fst_breakzq_25194;
        
        if (cond_25193) {
            fst_breakzq_25194 = -2;
        } else {
            fst_breakzq_25194 = fst_breakzq_25182;
        }
        ((__global int32_t *) mem_30619)[gtid_24873] = fst_breakzq_25194;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25173
}
__kernel void mainDetailedzisegmap_24904(__global int *global_failure,
                                         int64_t m_20400, __global
                                         unsigned char *mem_30602, __global
                                         unsigned char *mem_30604, __global
                                         unsigned char *mem_30614, __global
                                         unsigned char *mem_30616)
{
    #define segmap_group_sizze_25150 (mainDetailedzisegmap_group_sizze_24906)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31780;
    int32_t local_tid_31781;
    int64_t group_sizze_31784;
    int32_t wave_sizze_31783;
    int32_t group_tid_31782;
    
    global_tid_31780 = get_global_id(0);
    local_tid_31781 = get_local_id(0);
    group_sizze_31784 = get_local_size(0);
    wave_sizze_31783 = LOCKSTEP_WIDTH;
    group_tid_31782 = get_group_id(0);
    
    int32_t phys_tid_24904;
    
    phys_tid_24904 = global_tid_31780;
    
    int64_t gtid_24903;
    
    gtid_24903 = sext_i32_i64(group_tid_31782) * segmap_group_sizze_25150 +
        sext_i32_i64(local_tid_31781);
    if (slt64(gtid_24903, m_20400)) {
        bool acc0_25156 = ((__global bool *) mem_30602)[gtid_24903];
        bool x_25161 = acc0_25156 && acc0_25156;
        int32_t res_25165;
        
        if (acc0_25156) {
            int32_t acc0_25157 = ((__global int32_t *) mem_30604)[gtid_24903];
            
            res_25165 = acc0_25157;
        } else {
            res_25165 = -1;
        }
        ((__global bool *) mem_30614)[gtid_24903] = x_25161;
        ((__global int32_t *) mem_30616)[gtid_24903] = res_25165;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25150
}
__kernel void mainDetailedzisegmap_25026(__global int *global_failure,
                                         int64_t m_20400,
                                         int64_t num_groups_25049, __global
                                         unsigned char *res_mem_30431, __global
                                         unsigned char *res_mem_30512, __global
                                         unsigned char *res_mem_30513, __global
                                         unsigned char *mem_30593, __global
                                         unsigned char *mem_30595)
{
    #define segmap_group_sizze_25048 (mainDetailedzisegmap_group_sizze_25028)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31618;
    int32_t local_tid_31619;
    int64_t group_sizze_31622;
    int32_t wave_sizze_31621;
    int32_t group_tid_31620;
    
    global_tid_31618 = get_global_id(0);
    local_tid_31619 = get_local_id(0);
    group_sizze_31622 = get_local_size(0);
    wave_sizze_31621 = LOCKSTEP_WIDTH;
    group_tid_31620 = get_group_id(0);
    
    int32_t phys_tid_25026;
    
    phys_tid_25026 = global_tid_31618;
    
    int32_t phys_group_id_31623;
    
    phys_group_id_31623 = get_group_id(0);
    for (int32_t i_31624 = 0; i_31624 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400, segmap_group_sizze_25048)) -
                   phys_group_id_31623, sext_i64_i32(num_groups_25049));
         i_31624++) {
        int32_t virt_group_id_31625 = phys_group_id_31623 + i_31624 *
                sext_i64_i32(num_groups_25049);
        int64_t gtid_25025 = sext_i32_i64(virt_group_id_31625) *
                segmap_group_sizze_25048 + sext_i32_i64(local_tid_31619);
        
        if (slt64(gtid_25025, m_20400)) {
            int32_t x_25055 = ((__global int32_t *) res_mem_30431)[gtid_25025];
            int32_t x_25056 = ((__global int32_t *) res_mem_30512)[gtid_25025];
            float x_25057 = ((__global float *) res_mem_30513)[gtid_25025];
            int32_t y_25058 = sub32(x_25055, x_25056);
            float res_25059 = sitofp_i32_f32(x_25056);
            float res_25060;
            
            res_25060 = futrts_sqrt32(res_25059);
            
            float y_25061 = x_25057 * res_25060;
            
            ((__global float *) mem_30593)[gtid_25025] = y_25061;
            ((__global int32_t *) mem_30595)[gtid_25025] = y_25058;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_25048
}
__kernel void mainDetailedzisegmap_intragroup_22382(__global
                                                    int *global_failure,
                                                    int failure_is_an_option,
                                                    __global
                                                    int64_t *global_failure_args,
                                                    __local volatile
                                                    int64_t *mem_30107_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30097_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_30087_backing_aligned_2,
                                                    int32_t k2p2zq_20417,
                                                    int64_t res_20419,
                                                    int64_t m_20550,
                                                    int64_t nm_20551,
                                                    int32_t res_20559,
                                                    int64_t computed_group_sizze_22323,
                                                    __global
                                                    unsigned char *res_mem_30083,
                                                    __global
                                                    unsigned char *mem_30111)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30107_backing_2 = (__local volatile
                                                           char *) mem_30107_backing_aligned_0;
    __local volatile char *restrict mem_30097_backing_1 = (__local volatile
                                                           char *) mem_30097_backing_aligned_1;
    __local volatile char *restrict mem_30087_backing_0 = (__local volatile
                                                           char *) mem_30087_backing_aligned_2;
    volatile __local bool local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = false;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t global_tid_30901;
    int32_t local_tid_30902;
    int64_t group_sizze_30905;
    int32_t wave_sizze_30904;
    int32_t group_tid_30903;
    
    global_tid_30901 = get_global_id(0);
    local_tid_30902 = get_local_id(0);
    group_sizze_30905 = get_local_size(0);
    wave_sizze_30904 = LOCKSTEP_WIDTH;
    group_tid_30903 = get_group_id(0);
    
    int32_t phys_tid_22382;
    
    phys_tid_22382 = group_tid_30903;
    
    int32_t ltid_pre_30906;
    
    ltid_pre_30906 = squot32(local_tid_30902, sext_i64_i32(res_20419));
    
    int32_t ltid_pre_30907;
    
    ltid_pre_30907 = local_tid_30902 - squot32(local_tid_30902,
                                               sext_i64_i32(res_20419)) *
        sext_i64_i32(res_20419);
    
    int32_t ltid_pre_30908;
    
    ltid_pre_30908 = local_tid_30902;
    
    int64_t gtid_22321;
    
    gtid_22321 = sext_i32_i64(group_tid_30903);
    
    __local char *mem_30087;
    
    mem_30087 = (__local char *) mem_30087_backing_0;
    
    int64_t gtid_22324 = sext_i32_i64(ltid_pre_30908);
    int32_t phys_tid_22325 = local_tid_30902;
    
    if (slt64(gtid_22324, nm_20551)) {
        int64_t res_22521 = sdiv64(gtid_22324, m_20550);
        int64_t res_22522 = smod64(gtid_22324, m_20550);
        bool cond_22523 = slt64(res_22522, res_20419);
        float res_22524;
        
        if (cond_22523) {
            float res_22525 = ((__global float *) res_mem_30083)[gtid_22321 *
                                                                 (res_20419 *
                                                                  res_20419) +
                                                                 res_22521 *
                                                                 res_20419 +
                                                                 res_22522];
            
            res_22524 = res_22525;
        } else {
            int64_t y_22526 = add64(res_20419, res_22521);
            bool cond_22527 = res_22522 == y_22526;
            float res_22528;
            
            if (cond_22527) {
                res_22528 = 1.0F;
            } else {
                res_22528 = 0.0F;
            }
            res_22524 = res_22528;
        }
        ((__local float *) mem_30087)[gtid_22324] = res_22524;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30097;
    
    mem_30097 = (__local char *) mem_30097_backing_1;
    for (int32_t i_22530 = 0; i_22530 < k2p2zq_20417; i_22530++) {
        int64_t i_22532 = sext_i32_i64(i_22530);
        bool x_22533 = sle64(0, i_22532);
        bool y_22534 = slt64(i_22532, nm_20551);
        bool bounds_check_22535 = x_22533 && y_22534;
        bool index_certs_22536;
        
        if (!bounds_check_22535) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                    global_failure_args[0] = i_22532;
                    global_failure_args[1] = nm_20551;
                    ;
                }
                local_failure = true;
                goto error_1;
            }
        }
        
        float v1_22537 = ((__local float *) mem_30087)[i_22532];
        bool cond_22538 = v1_22537 == 0.0F;
        int64_t gtid_22335 = sext_i32_i64(ltid_pre_30908);
        int32_t phys_tid_22336 = local_tid_30902;
        
        if (slt64(gtid_22335, nm_20551)) {
            int32_t res_22541 = sext_i64_i32(gtid_22335);
            int32_t res_22542 = sdiv32(res_22541, res_20559);
            int32_t res_22543 = smod32(res_22541, res_20559);
            float res_22544;
            
            if (cond_22538) {
                int32_t x_22545 = mul32(res_20559, res_22542);
                int32_t i_22546 = add32(res_22543, x_22545);
                int64_t i_22547 = sext_i32_i64(i_22546);
                float res_22548 = ((__local float *) mem_30087)[i_22547];
                
                res_22544 = res_22548;
            } else {
                int64_t j_22549 = sext_i32_i64(res_22543);
                float x_22550 = ((__local float *) mem_30087)[j_22549];
                float x_22551 = x_22550 / v1_22537;
                int32_t y_22552 = sub32(k2p2zq_20417, 1);
                bool cond_22553 = slt32(res_22542, y_22552);
                float res_22554;
                
                if (cond_22553) {
                    int32_t x_22555 = add32(1, res_22542);
                    int32_t x_22556 = mul32(res_20559, x_22555);
                    int32_t i_22557 = add32(res_22543, x_22556);
                    int64_t i_22558 = sext_i32_i64(i_22557);
                    float x_22559 = ((__local float *) mem_30087)[i_22558];
                    int32_t i_22560 = add32(i_22530, x_22556);
                    int64_t i_22561 = sext_i32_i64(i_22560);
                    float x_22562 = ((__local float *) mem_30087)[i_22561];
                    float y_22563 = x_22551 * x_22562;
                    float res_22564 = x_22559 - y_22563;
                    
                    res_22554 = res_22564;
                } else {
                    res_22554 = x_22551;
                }
                res_22544 = res_22554;
            }
            ((__local float *) mem_30097)[gtid_22335] = res_22544;
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t write_i_22362 = sext_i32_i64(ltid_pre_30908);
        int32_t phys_tid_22363 = local_tid_30902;
        
        if (slt64(write_i_22362, nm_20551)) {
            float write_value_22567 = ((__local
                                        float *) mem_30097)[write_i_22362];
            
            if (sle64(0, write_i_22362) && slt64(write_i_22362, nm_20551)) {
                ((__local float *) mem_30087)[write_i_22362] =
                    write_value_22567;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    
    __local char *mem_30107;
    
    mem_30107 = (__local char *) mem_30107_backing_2;
    
    int64_t gtid_22365 = sext_i32_i64(ltid_pre_30906);
    int64_t gtid_22366 = sext_i32_i64(ltid_pre_30907);
    int32_t phys_tid_22367 = local_tid_30902;
    
    if (slt64(gtid_22365, res_20419) && slt64(gtid_22366, res_20419)) {
        int64_t index_primexp_28721 = m_20550 * gtid_22365;
        int64_t i_22574 = add64(res_20419, gtid_22366);
        int64_t new_index_22575 = i_22574 + index_primexp_28721;
        float res_22576 = ((__local float *) mem_30087)[new_index_22575];
        
        ((__local float *) mem_30107)[gtid_22365 * res_20419 + gtid_22366] =
            res_22576;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t i_30910 = 0; i_30910 < sdiv_up64(res_20419 * res_20419 -
                                                  sext_i32_i64(local_tid_30902),
                                                  computed_group_sizze_22323);
         i_30910++) {
        ((__global float *) mem_30111)[gtid_22321 * (res_20419 * res_20419) +
                                       squot64(i_30910 *
                                               computed_group_sizze_22323 +
                                               sext_i32_i64(local_tid_30902),
                                               res_20419) * res_20419 +
                                       (i_30910 * computed_group_sizze_22323 +
                                        sext_i32_i64(local_tid_30902) -
                                        squot64(i_30910 *
                                                computed_group_sizze_22323 +
                                                sext_i32_i64(local_tid_30902),
                                                res_20419) * res_20419)] =
            ((__local float *) mem_30107)[squot64(i_30910 *
                                                  computed_group_sizze_22323 +
                                                  sext_i32_i64(local_tid_30902),
                                                  res_20419) * res_20419 +
                                          (i_30910 *
                                           computed_group_sizze_22323 +
                                           sext_i32_i64(local_tid_30902) -
                                           squot64(i_30910 *
                                                   computed_group_sizze_22323 +
                                                   sext_i32_i64(local_tid_30902),
                                                   res_20419) * res_20419)];
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_22726(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30132_backing_aligned_0,
                                                    int64_t m_20400,
                                                    int32_t k2p2zq_20417,
                                                    int64_t nm_20551,
                                                    int32_t res_20559,
                                                    int32_t i_23113,
                                                    int64_t i_23115,
                                                    int64_t ctx_param_ext_30118,
                                                    int64_t ctx_param_ext_30119,
                                                    int64_t ctx_param_ext_30121,
                                                    __global
                                                    unsigned char *mem_param_30123,
                                                    __global
                                                    unsigned char *mem_30128,
                                                    __global
                                                    unsigned char *mem_30136)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30132_backing_0 = (__local volatile
                                                           char *) mem_30132_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30937;
    int32_t local_tid_30938;
    int64_t group_sizze_30941;
    int32_t wave_sizze_30940;
    int32_t group_tid_30939;
    
    global_tid_30937 = get_global_id(0);
    local_tid_30938 = get_local_id(0);
    group_sizze_30941 = get_local_size(0);
    wave_sizze_30940 = LOCKSTEP_WIDTH;
    group_tid_30939 = get_group_id(0);
    
    int32_t phys_tid_22726;
    
    phys_tid_22726 = group_tid_30939;
    
    int32_t ltid_pre_30942;
    
    ltid_pre_30942 = local_tid_30938;
    
    int64_t gtid_22694;
    
    gtid_22694 = sext_i32_i64(group_tid_30939);
    
    float v1_23132 = ((__global float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_22694 *
                                                           ctx_param_ext_30119 +
                                                           i_23115 *
                                                           ctx_param_ext_30121)];
    bool cond_23133 = v1_23132 == 0.0F;
    __local char *mem_30132;
    
    mem_30132 = (__local char *) mem_30132_backing_0;
    
    int64_t gtid_22697 = sext_i32_i64(ltid_pre_30942);
    int32_t phys_tid_22698 = local_tid_30938;
    
    if (slt64(gtid_22697, nm_20551)) {
        int32_t res_23136 = sext_i64_i32(gtid_22697);
        int32_t res_23137 = sdiv32(res_23136, res_20559);
        int32_t res_23138 = smod32(res_23136, res_20559);
        float res_23139;
        
        if (cond_23133) {
            int32_t x_23140 = mul32(res_20559, res_23137);
            int32_t i_23141 = add32(res_23138, x_23140);
            int64_t i_23142 = sext_i32_i64(i_23141);
            float res_23143 = ((__global
                                float *) mem_param_30123)[ctx_param_ext_30118 +
                                                          (gtid_22694 *
                                                           ctx_param_ext_30119 +
                                                           i_23142 *
                                                           ctx_param_ext_30121)];
            
            res_23139 = res_23143;
        } else {
            int64_t j_23144 = sext_i32_i64(res_23138);
            float x_23145 = ((__global
                              float *) mem_param_30123)[ctx_param_ext_30118 +
                                                        (gtid_22694 *
                                                         ctx_param_ext_30119 +
                                                         j_23144 *
                                                         ctx_param_ext_30121)];
            float x_23146 = x_23145 / v1_23132;
            int32_t y_23147 = sub32(k2p2zq_20417, 1);
            bool cond_23148 = slt32(res_23137, y_23147);
            float res_23149;
            
            if (cond_23148) {
                int32_t x_23150 = add32(1, res_23137);
                int32_t x_23151 = mul32(res_20559, x_23150);
                int32_t i_23152 = add32(res_23138, x_23151);
                int64_t i_23153 = sext_i32_i64(i_23152);
                float x_23154 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_22694 *
                                                             ctx_param_ext_30119 +
                                                             i_23153 *
                                                             ctx_param_ext_30121)];
                int32_t i_23155 = add32(i_23113, x_23151);
                int64_t i_23156 = sext_i32_i64(i_23155);
                float x_23157 = ((__global
                                  float *) mem_param_30123)[ctx_param_ext_30118 +
                                                            (gtid_22694 *
                                                             ctx_param_ext_30119 +
                                                             i_23156 *
                                                             ctx_param_ext_30121)];
                float y_23158 = x_23146 * x_23157;
                float res_23159 = x_23154 - y_23158;
                
                res_23149 = res_23159;
            } else {
                res_23149 = x_23146;
            }
            res_23139 = res_23149;
        }
        ((__local float *) mem_30132)[gtid_22697] = res_23139;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_22724 = sext_i32_i64(ltid_pre_30942);
    int32_t phys_tid_22725 = local_tid_30938;
    
    if (slt64(write_i_22724, nm_20551)) {
        float write_value_23162 = ((__local float *) mem_30132)[write_i_22724];
        
        if (sle64(0, write_i_22724) && slt64(write_i_22724, nm_20551)) {
            ((__global float *) mem_30128)[gtid_22694 + write_i_22724 *
                                           m_20400] = write_value_23162;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_30938 == 0) {
        for (int64_t i_30943 = 0; i_30943 < nm_20551; i_30943++) {
            ((__global float *) mem_30136)[gtid_22694 * nm_20551 + i_30943] =
                ((__global float *) mem_30128)[gtid_22694 + i_30943 * m_20400];
        }
    }
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_23700(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30410_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30408_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_30406_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_30404_backing_aligned_3,
                                                    int64_t N_20399,
                                                    int64_t N_20401,
                                                    int64_t i_20666, __global
                                                    unsigned char *images_mem_29973,
                                                    __global
                                                    unsigned char *res_mem_30394,
                                                    __global
                                                    unsigned char *mem_30413,
                                                    __global
                                                    unsigned char *mem_30416,
                                                    __global
                                                    unsigned char *mem_30419)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30410_backing_3 = (__local volatile
                                                           char *) mem_30410_backing_aligned_0;
    __local volatile char *restrict mem_30408_backing_2 = (__local volatile
                                                           char *) mem_30408_backing_aligned_1;
    __local volatile char *restrict mem_30406_backing_1 = (__local volatile
                                                           char *) mem_30406_backing_aligned_2;
    __local volatile char *restrict mem_30404_backing_0 = (__local volatile
                                                           char *) mem_30404_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31242;
    int32_t local_tid_31243;
    int64_t group_sizze_31246;
    int32_t wave_sizze_31245;
    int32_t group_tid_31244;
    
    global_tid_31242 = get_global_id(0);
    local_tid_31243 = get_local_id(0);
    group_sizze_31246 = get_local_size(0);
    wave_sizze_31245 = LOCKSTEP_WIDTH;
    group_tid_31244 = get_group_id(0);
    
    int32_t phys_tid_23700;
    
    phys_tid_23700 = group_tid_31244;
    
    int32_t ltid_pre_31247;
    
    ltid_pre_31247 = local_tid_31243;
    
    int64_t gtid_23693;
    
    gtid_23693 = sext_i32_i64(group_tid_31244);
    
    __local char *mem_30404;
    
    mem_30404 = (__local char *) mem_30404_backing_0;
    
    __local char *mem_30406;
    
    mem_30406 = (__local char *) mem_30406_backing_1;
    
    int64_t gtid_23696 = sext_i32_i64(ltid_pre_31247);
    int32_t phys_tid_23697 = local_tid_31243;
    
    if (slt64(gtid_23696, N_20399)) {
        float x_23789 = ((__global float *) images_mem_29973)[gtid_23693 *
                                                              N_20401 +
                                                              gtid_23696];
        bool res_23791;
        
        res_23791 = futrts_isnan32(x_23789);
        
        bool cond_23792 = !res_23791;
        float res_23793;
        
        if (cond_23792) {
            float x_23790 = ((__global float *) res_mem_30394)[gtid_23693 *
                                                               N_20399 +
                                                               gtid_23696];
            float res_23794 = x_23789 - x_23790;
            
            res_23793 = res_23794;
        } else {
            res_23793 = NAN;
        }
        
        bool res_23795;
        
        res_23795 = futrts_isnan32(res_23793);
        
        bool res_23796 = !res_23795;
        int64_t res_23797 = btoi_bool_i64(res_23796);
        
        ((__local int64_t *) mem_30404)[gtid_23696] = res_23797;
        ((__local float *) mem_30406)[gtid_23696] = res_23793;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_31248;
    
    dims_flat_31248 = N_20399;
    
    int64_t x_23786;
    int64_t x_23787;
    int64_t x_31250;
    int64_t x_31251;
    bool ltid_in_bounds_31253;
    
    ltid_in_bounds_31253 = slt64(sext_i32_i64(local_tid_31243), N_20399);
    
    int32_t skip_threads_31254;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31253) {
            x_23787 = ((volatile __local
                        int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)];
            if ((local_tid_31243 - squot32(local_tid_31243, 32) * 32) == 0) {
                x_23786 = x_23787;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31254 = 1;
        while (slt32(skip_threads_31254, 32)) {
            if (sle32(skip_threads_31254, local_tid_31243 -
                      squot32(local_tid_31243, 32) * 32) &&
                ltid_in_bounds_31253) {
                // read operands
                {
                    x_23786 = ((volatile __local
                                int64_t *) mem_30404)[sext_i32_i64(local_tid_31243) -
                                                      sext_i32_i64(skip_threads_31254)];
                }
                // perform operation
                {
                    bool inactive_31255 =
                         slt64(srem64(sext_i32_i64(local_tid_31243), N_20399),
                               sext_i32_i64(local_tid_31243) -
                               sext_i32_i64(local_tid_31243 -
                               skip_threads_31254));
                    
                    if (inactive_31255) {
                        x_23786 = x_23787;
                    }
                    if (!inactive_31255) {
                        int64_t res_23788 = add64(x_23786, x_23787);
                        
                        x_23786 = res_23788;
                    }
                }
            }
            if (sle32(wave_sizze_31245, skip_threads_31254)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31254, local_tid_31243 -
                      squot32(local_tid_31243, 32) * 32) &&
                ltid_in_bounds_31253) {
                // write result
                {
                    ((volatile __local
                      int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)] =
                        x_23786;
                    x_23787 = x_23786;
                }
            }
            if (sle32(wave_sizze_31245, skip_threads_31254)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31254 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31243 - squot32(local_tid_31243, 32) * 32) == 31 &&
            ltid_in_bounds_31253) {
            ((volatile __local
              int64_t *) mem_30404)[sext_i32_i64(squot32(local_tid_31243,
                                                         32))] = x_23786;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31256;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31243, 32) == 0 && ltid_in_bounds_31253) {
                x_31251 = ((volatile __local
                            int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)];
                if ((local_tid_31243 - squot32(local_tid_31243, 32) * 32) ==
                    0) {
                    x_31250 = x_31251;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31256 = 1;
            while (slt32(skip_threads_31256, 32)) {
                if (sle32(skip_threads_31256, local_tid_31243 -
                          squot32(local_tid_31243, 32) * 32) &&
                    (squot32(local_tid_31243, 32) == 0 &&
                     ltid_in_bounds_31253)) {
                    // read operands
                    {
                        x_31250 = ((volatile __local
                                    int64_t *) mem_30404)[sext_i32_i64(local_tid_31243) -
                                                          sext_i32_i64(skip_threads_31256)];
                    }
                    // perform operation
                    {
                        bool inactive_31257 =
                             slt64(srem64(sext_i32_i64(local_tid_31243 * 32 +
                                          32 - 1), N_20399),
                                   sext_i32_i64(local_tid_31243 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_31243 -
                                                 skip_threads_31256) * 32 + 32 -
                                   1));
                        
                        if (inactive_31257) {
                            x_31250 = x_31251;
                        }
                        if (!inactive_31257) {
                            int64_t res_31252 = add64(x_31250, x_31251);
                            
                            x_31250 = res_31252;
                        }
                    }
                }
                if (sle32(wave_sizze_31245, skip_threads_31256)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31256, local_tid_31243 -
                          squot32(local_tid_31243, 32) * 32) &&
                    (squot32(local_tid_31243, 32) == 0 &&
                     ltid_in_bounds_31253)) {
                    // write result
                    {
                        ((volatile __local
                          int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)] =
                            x_31250;
                        x_31251 = x_31250;
                    }
                }
                if (sle32(wave_sizze_31245, skip_threads_31256)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31256 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31243, 32) == 0 || !ltid_in_bounds_31253)) {
            // read operands
            {
                x_23787 = x_23786;
                x_23786 = ((__local
                            int64_t *) mem_30404)[sext_i32_i64(squot32(local_tid_31243,
                                                                       32)) -
                                                  1];
            }
            // perform operation
            {
                bool inactive_31258 =
                     slt64(srem64(sext_i32_i64(local_tid_31243), N_20399),
                           sext_i32_i64(local_tid_31243) -
                           sext_i32_i64(squot32(local_tid_31243, 32) * 32 - 1));
                
                if (inactive_31258) {
                    x_23786 = x_23787;
                }
                if (!inactive_31258) {
                    int64_t res_23788 = add64(x_23786, x_23787);
                    
                    x_23786 = res_23788;
                }
            }
            // write final result
            {
                ((__local int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)] =
                    x_23786;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31243, 32) == 0) {
            ((__local int64_t *) mem_30404)[sext_i32_i64(local_tid_31243)] =
                x_23787;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t res_23798 = ((__local int64_t *) mem_30404)[i_20666];
    int32_t res_23799 = sext_i64_i32(res_23798);
    __local char *mem_30408;
    
    mem_30408 = (__local char *) mem_30408_backing_2;
    ((__local float *) mem_30408)[sext_i32_i64(local_tid_31243)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30410;
    
    mem_30410 = (__local char *) mem_30410_backing_3;
    ((__local int32_t *) mem_30410)[sext_i32_i64(local_tid_31243)] = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_23698 = sext_i32_i64(ltid_pre_31247);
    int32_t phys_tid_23699 = local_tid_31243;
    
    if (slt64(write_i_23698, N_20399)) {
        float x_23804 = ((__local float *) mem_30406)[write_i_23698];
        int32_t index_primexp_28743 = sext_i64_i32(write_i_23698);
        bool res_23807;
        
        res_23807 = futrts_isnan32(x_23804);
        
        bool res_23808 = !res_23807;
        int64_t res_23809;
        
        if (res_23808) {
            int64_t x_23805 = ((__local int64_t *) mem_30404)[write_i_23698];
            int64_t res_23810 = sub64(x_23805, 1);
            
            res_23809 = res_23810;
        } else {
            res_23809 = -1;
        }
        if (sle64(0, res_23809) && slt64(res_23809, N_20399)) {
            ((__local int32_t *) mem_30410)[res_23809] = index_primexp_28743;
        }
        if (sle64(0, res_23809) && slt64(res_23809, N_20399)) {
            ((__local float *) mem_30408)[res_23809] = x_23804;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_31243 == 0) {
        ((__global int32_t *) mem_30413)[gtid_23693] = res_23799;
    }
    ((__global float *) mem_30416)[gtid_23693 * N_20399 +
                                   sext_i32_i64(local_tid_31243)] = ((__local
                                                                      float *) mem_30408)[sext_i32_i64(local_tid_31243)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global int32_t *) mem_30419)[gtid_23693 * N_20399 +
                                     sext_i32_i64(local_tid_31243)] = ((__local
                                                                        int32_t *) mem_30410)[sext_i32_i64(local_tid_31243)];
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_2:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_24040(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *red_arr_mem_31351_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_31347_backing_aligned_1,
                                                    int64_t N_20399,
                                                    int64_t N_20401,
                                                    float hfrac_20406,
                                                    int64_t res_20413,
                                                    int32_t k2p2_20415, __global
                                                    unsigned char *images_mem_29973,
                                                    __global
                                                    unsigned char *res_mem_30432,
                                                    __global
                                                    unsigned char *mem_30492,
                                                    __global
                                                    unsigned char *mem_30494,
                                                    __global
                                                    unsigned char *mem_30496)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31351_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31351_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31347_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31347_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31341;
    int32_t local_tid_31342;
    int64_t group_sizze_31345;
    int32_t wave_sizze_31344;
    int32_t group_tid_31343;
    
    global_tid_31341 = get_global_id(0);
    local_tid_31342 = get_local_id(0);
    group_sizze_31345 = get_local_size(0);
    wave_sizze_31344 = LOCKSTEP_WIDTH;
    group_tid_31343 = get_group_id(0);
    
    int32_t phys_tid_24040;
    
    phys_tid_24040 = group_tid_31343;
    
    int32_t ltid_pre_31346;
    
    ltid_pre_31346 = local_tid_31342;
    
    int64_t gtid_24033;
    
    gtid_24033 = sext_i32_i64(group_tid_31343);
    
    int32_t res_24117;
    int64_t gtid_24036 = sext_i32_i64(ltid_pre_31346);
    int32_t phys_tid_24037 = local_tid_31342;
    __local char *red_arr_mem_31347;
    
    red_arr_mem_31347 = (__local char *) red_arr_mem_31347_backing_0;
    if (slt64(gtid_24036, res_20413)) {
        float x_24121 = ((__global float *) images_mem_29973)[gtid_24033 *
                                                              N_20401 +
                                                              gtid_24036];
        bool res_24122;
        
        res_24122 = futrts_isnan32(x_24121);
        
        bool cond_24123 = !res_24122;
        int32_t res_24124 = btoi_bool_i32(cond_24123);
        
        ((__local int32_t *) red_arr_mem_31347)[gtid_24036] = res_24124;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31349;
    int32_t skip_waves_31350;
    
    skip_waves_31350 = 1;
    
    int32_t x_24118;
    int32_t x_24119;
    
    offset_31349 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31342, sext_i64_i32(res_20413))) {
            x_24118 = ((__local
                        int32_t *) red_arr_mem_31347)[sext_i32_i64(local_tid_31342 +
                                                      offset_31349)];
        }
    }
    offset_31349 = 1;
    while (slt32(offset_31349, wave_sizze_31344)) {
        if (slt32(local_tid_31342 + offset_31349, sext_i64_i32(res_20413)) &&
            ((local_tid_31342 - squot32(local_tid_31342, wave_sizze_31344) *
              wave_sizze_31344) & (2 * offset_31349 - 1)) == 0) {
            // read array element
            {
                x_24119 = ((volatile __local
                            int32_t *) red_arr_mem_31347)[sext_i32_i64(local_tid_31342 +
                                                          offset_31349)];
            }
            // apply reduction operation
            {
                int32_t res_24120 = add32(x_24118, x_24119);
                
                x_24118 = res_24120;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_31347)[sext_i32_i64(local_tid_31342)] =
                    x_24118;
            }
        }
        offset_31349 *= 2;
    }
    while (slt32(skip_waves_31350, squot32(sext_i64_i32(res_20413) +
                                           wave_sizze_31344 - 1,
                                           wave_sizze_31344))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31349 = skip_waves_31350 * wave_sizze_31344;
        if (slt32(local_tid_31342 + offset_31349, sext_i64_i32(res_20413)) &&
            ((local_tid_31342 - squot32(local_tid_31342, wave_sizze_31344) *
              wave_sizze_31344) == 0 && (squot32(local_tid_31342,
                                                 wave_sizze_31344) & (2 *
                                                                      skip_waves_31350 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_24119 = ((__local
                            int32_t *) red_arr_mem_31347)[sext_i32_i64(local_tid_31342 +
                                                          offset_31349)];
            }
            // apply reduction operation
            {
                int32_t res_24120 = add32(x_24118, x_24119);
                
                x_24118 = res_24120;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_31347)[sext_i32_i64(local_tid_31342)] =
                    x_24118;
            }
        }
        skip_waves_31350 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_24117 = ((__local int32_t *) red_arr_mem_31347)[0];
    
    float res_24125;
    int64_t gtid_24038 = sext_i32_i64(ltid_pre_31346);
    int32_t phys_tid_24039 = local_tid_31342;
    __local char *red_arr_mem_31351;
    
    red_arr_mem_31351 = (__local char *) red_arr_mem_31351_backing_1;
    if (slt64(gtid_24038, res_20413)) {
        int32_t index_primexp_28751 = sext_i64_i32(gtid_24038);
        bool cond_24130 = slt32(index_primexp_28751, res_24117);
        float res_24131;
        
        if (cond_24130) {
            int64_t i_24132 = sext_i32_i64(index_primexp_28751);
            float res_24133 = ((__global float *) res_mem_30432)[gtid_24033 *
                                                                 N_20399 +
                                                                 i_24132];
            
            res_24131 = res_24133;
        } else {
            res_24131 = 0.0F;
        }
        
        float res_24134 = res_24131 * res_24131;
        
        ((__local float *) red_arr_mem_31351)[gtid_24038] = res_24134;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31353;
    int32_t skip_waves_31354;
    
    skip_waves_31354 = 1;
    
    float x_24126;
    float x_24127;
    
    offset_31353 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31342, sext_i64_i32(res_20413))) {
            x_24126 = ((__local
                        float *) red_arr_mem_31351)[sext_i32_i64(local_tid_31342 +
                                                    offset_31353)];
        }
    }
    offset_31353 = 1;
    while (slt32(offset_31353, wave_sizze_31344)) {
        if (slt32(local_tid_31342 + offset_31353, sext_i64_i32(res_20413)) &&
            ((local_tid_31342 - squot32(local_tid_31342, wave_sizze_31344) *
              wave_sizze_31344) & (2 * offset_31353 - 1)) == 0) {
            // read array element
            {
                x_24127 = ((volatile __local
                            float *) red_arr_mem_31351)[sext_i32_i64(local_tid_31342 +
                                                        offset_31353)];
            }
            // apply reduction operation
            {
                float res_24128 = x_24126 + x_24127;
                
                x_24126 = res_24128;
            }
            // write result of operation
            {
                ((volatile __local
                  float *) red_arr_mem_31351)[sext_i32_i64(local_tid_31342)] =
                    x_24126;
            }
        }
        offset_31353 *= 2;
    }
    while (slt32(skip_waves_31354, squot32(sext_i64_i32(res_20413) +
                                           wave_sizze_31344 - 1,
                                           wave_sizze_31344))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31353 = skip_waves_31354 * wave_sizze_31344;
        if (slt32(local_tid_31342 + offset_31353, sext_i64_i32(res_20413)) &&
            ((local_tid_31342 - squot32(local_tid_31342, wave_sizze_31344) *
              wave_sizze_31344) == 0 && (squot32(local_tid_31342,
                                                 wave_sizze_31344) & (2 *
                                                                      skip_waves_31354 -
                                                                      1)) ==
             0)) {
            // read array element
            {
                x_24127 = ((__local
                            float *) red_arr_mem_31351)[sext_i32_i64(local_tid_31342 +
                                                        offset_31353)];
            }
            // apply reduction operation
            {
                float res_24128 = x_24126 + x_24127;
                
                x_24126 = res_24128;
            }
            // write result of operation
            {
                ((__local
                  float *) red_arr_mem_31351)[sext_i32_i64(local_tid_31342)] =
                    x_24126;
            }
        }
        skip_waves_31354 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    res_24125 = ((__local float *) red_arr_mem_31351)[0];
    
    int32_t r32_arg_24135 = sub32(res_24117, k2p2_20415);
    float res_24136 = sitofp_i32_f32(r32_arg_24135);
    float sqrt_arg_24137 = res_24125 / res_24136;
    float res_24138;
    
    res_24138 = futrts_sqrt32(sqrt_arg_24137);
    
    float res_24139 = sitofp_i32_f32(res_24117);
    float t32_arg_24140 = hfrac_20406 * res_24139;
    int32_t res_24141 = fptosi_f32_i32(t32_arg_24140);
    
    if (local_tid_31342 == 0) {
        ((__global int32_t *) mem_30492)[gtid_24033] = res_24141;
    }
    if (local_tid_31342 == 0) {
        ((__global int32_t *) mem_30494)[gtid_24033] = res_24117;
    }
    if (local_tid_31342 == 0) {
        ((__global float *) mem_30496)[gtid_24033] = res_24138;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_24462(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30579_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *red_arr_mem_31614_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *red_arr_mem_31612_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *red_arr_mem_31610_backing_aligned_3,
                                                    __local volatile
                                                    int64_t *mem_30577_backing_aligned_4,
                                                    __local volatile
                                                    int64_t *mem_30574_backing_aligned_5,
                                                    int64_t N_20399,
                                                    int32_t n_20404,
                                                    int64_t iota32_arg_20783,
                                                    __global
                                                    unsigned char *res_mem_30431,
                                                    __global
                                                    unsigned char *res_mem_30432,
                                                    __global
                                                    unsigned char *res_mem_30433,
                                                    __global
                                                    unsigned char *res_mem_30511,
                                                    __global
                                                    unsigned char *res_mem_30512,
                                                    __global
                                                    unsigned char *res_mem_30513,
                                                    __global
                                                    unsigned char *res_mem_30562,
                                                    __global
                                                    unsigned char *mem_30567,
                                                    __global
                                                    unsigned char *mem_30583,
                                                    __global
                                                    unsigned char *mem_30586,
                                                    __global
                                                    unsigned char *mem_30588,
                                                    __global
                                                    unsigned char *mem_30590)
{
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30579_backing_5 = (__local volatile
                                                           char *) mem_30579_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31614_backing_4 =
                          (__local volatile
                           char *) red_arr_mem_31614_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31612_backing_3 =
                          (__local volatile
                           char *) red_arr_mem_31612_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_31610_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31610_backing_aligned_3;
    __local volatile char *restrict mem_30577_backing_1 = (__local volatile
                                                           char *) mem_30577_backing_aligned_4;
    __local volatile char *restrict mem_30574_backing_0 = (__local volatile
                                                           char *) mem_30574_backing_aligned_5;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31593;
    int32_t local_tid_31594;
    int64_t group_sizze_31597;
    int32_t wave_sizze_31596;
    int32_t group_tid_31595;
    
    global_tid_31593 = get_global_id(0);
    local_tid_31594 = get_local_id(0);
    group_sizze_31597 = get_local_size(0);
    wave_sizze_31596 = LOCKSTEP_WIDTH;
    group_tid_31595 = get_group_id(0);
    
    int32_t phys_tid_24462;
    
    phys_tid_24462 = group_tid_31595;
    
    int32_t ltid_pre_31598;
    
    ltid_pre_31598 = local_tid_31594;
    
    int64_t gtid_24453;
    
    gtid_24453 = sext_i32_i64(group_tid_31595);
    
    int32_t x_24708;
    
    x_24708 = ((__global int32_t *) res_mem_30431)[gtid_24453];
    
    int32_t x_24709 = ((__global int32_t *) res_mem_30512)[gtid_24453];
    float x_24710 = ((__global float *) res_mem_30513)[gtid_24453];
    int32_t x_24711 = ((__global int32_t *) res_mem_30511)[gtid_24453];
    float x_24712 = ((__global float *) res_mem_30562)[gtid_24453];
    int32_t y_24715 = sub32(x_24708, x_24709);
    float res_24716 = sitofp_i32_f32(x_24709);
    float res_24717;
    
    res_24717 = futrts_sqrt32(res_24716);
    
    float y_24718 = x_24710 * res_24717;
    __local char *mem_30574;
    
    mem_30574 = (__local char *) mem_30574_backing_0;
    
    int64_t gtid_24456 = sext_i32_i64(ltid_pre_31598);
    int32_t phys_tid_24457 = local_tid_31594;
    
    if (slt64(gtid_24456, iota32_arg_20783)) {
        int32_t index_primexp_28764 = sext_i64_i32(gtid_24456);
        bool cond_24731 = sle32(y_24715, index_primexp_28764);
        float res_24732;
        
        if (cond_24731) {
            res_24732 = 0.0F;
        } else {
            bool cond_24733 = index_primexp_28764 == 0;
            float res_24734;
            
            if (cond_24733) {
                res_24734 = x_24712;
            } else {
                int32_t x_24735 = sub32(x_24709, x_24711);
                int32_t i_24736 = add32(x_24735, index_primexp_28764);
                int64_t i_24737 = sext_i32_i64(i_24736);
                float negate_arg_24738 = ((__global
                                           float *) res_mem_30432)[gtid_24453 *
                                                                   N_20399 +
                                                                   i_24737];
                float x_24739 = 0.0F - negate_arg_24738;
                int32_t i_24740 = add32(x_24709, index_primexp_28764);
                int64_t i_24741 = sext_i32_i64(i_24740);
                float y_24742 = ((__global float *) res_mem_30432)[gtid_24453 *
                                                                   N_20399 +
                                                                   i_24741];
                float res_24743 = x_24739 + y_24742;
                
                res_24734 = res_24743;
            }
            res_24732 = res_24734;
        }
        ((__local float *) mem_30574)[gtid_24456] = res_24732;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t dims_flat_31599;
    
    dims_flat_31599 = iota32_arg_20783;
    
    float x_24727;
    float x_24728;
    float x_31601;
    float x_31602;
    bool ltid_in_bounds_31604;
    
    ltid_in_bounds_31604 = slt64(sext_i32_i64(local_tid_31594),
                                 iota32_arg_20783);
    
    int32_t skip_threads_31605;
    
    // read input for in-block scan
    {
        if (ltid_in_bounds_31604) {
            x_24728 = ((volatile __local
                        float *) mem_30574)[sext_i32_i64(local_tid_31594)];
            if ((local_tid_31594 - squot32(local_tid_31594, 32) * 32) == 0) {
                x_24727 = x_24728;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31605 = 1;
        while (slt32(skip_threads_31605, 32)) {
            if (sle32(skip_threads_31605, local_tid_31594 -
                      squot32(local_tid_31594, 32) * 32) &&
                ltid_in_bounds_31604) {
                // read operands
                {
                    x_24727 = ((volatile __local
                                float *) mem_30574)[sext_i32_i64(local_tid_31594) -
                                                    sext_i32_i64(skip_threads_31605)];
                }
                // perform operation
                {
                    bool inactive_31606 =
                         slt64(srem64(sext_i32_i64(local_tid_31594),
                                      iota32_arg_20783),
                               sext_i32_i64(local_tid_31594) -
                               sext_i32_i64(local_tid_31594 -
                               skip_threads_31605));
                    
                    if (inactive_31606) {
                        x_24727 = x_24728;
                    }
                    if (!inactive_31606) {
                        float res_24729 = x_24727 + x_24728;
                        
                        x_24727 = res_24729;
                    }
                }
            }
            if (sle32(wave_sizze_31596, skip_threads_31605)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (sle32(skip_threads_31605, local_tid_31594 -
                      squot32(local_tid_31594, 32) * 32) &&
                ltid_in_bounds_31604) {
                // write result
                {
                    ((volatile __local
                      float *) mem_30574)[sext_i32_i64(local_tid_31594)] =
                        x_24727;
                    x_24728 = x_24727;
                }
            }
            if (sle32(wave_sizze_31596, skip_threads_31605)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31605 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31594 - squot32(local_tid_31594, 32) * 32) == 31 &&
            ltid_in_bounds_31604) {
            ((volatile __local
              float *) mem_30574)[sext_i32_i64(squot32(local_tid_31594, 32))] =
                x_24727;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31607;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31594, 32) == 0 && ltid_in_bounds_31604) {
                x_31602 = ((volatile __local
                            float *) mem_30574)[sext_i32_i64(local_tid_31594)];
                if ((local_tid_31594 - squot32(local_tid_31594, 32) * 32) ==
                    0) {
                    x_31601 = x_31602;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31607 = 1;
            while (slt32(skip_threads_31607, 32)) {
                if (sle32(skip_threads_31607, local_tid_31594 -
                          squot32(local_tid_31594, 32) * 32) &&
                    (squot32(local_tid_31594, 32) == 0 &&
                     ltid_in_bounds_31604)) {
                    // read operands
                    {
                        x_31601 = ((volatile __local
                                    float *) mem_30574)[sext_i32_i64(local_tid_31594) -
                                                        sext_i32_i64(skip_threads_31607)];
                    }
                    // perform operation
                    {
                        bool inactive_31608 =
                             slt64(srem64(sext_i32_i64(local_tid_31594 * 32 +
                                          32 - 1), iota32_arg_20783),
                                   sext_i32_i64(local_tid_31594 * 32 + 32 - 1) -
                                   sext_i32_i64((local_tid_31594 -
                                                 skip_threads_31607) * 32 + 32 -
                                   1));
                        
                        if (inactive_31608) {
                            x_31601 = x_31602;
                        }
                        if (!inactive_31608) {
                            float res_31603 = x_31601 + x_31602;
                            
                            x_31601 = res_31603;
                        }
                    }
                }
                if (sle32(wave_sizze_31596, skip_threads_31607)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (sle32(skip_threads_31607, local_tid_31594 -
                          squot32(local_tid_31594, 32) * 32) &&
                    (squot32(local_tid_31594, 32) == 0 &&
                     ltid_in_bounds_31604)) {
                    // write result
                    {
                        ((volatile __local
                          float *) mem_30574)[sext_i32_i64(local_tid_31594)] =
                            x_31601;
                        x_31602 = x_31601;
                    }
                }
                if (sle32(wave_sizze_31596, skip_threads_31607)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31607 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // carry-in for every block except the first
    {
        if (!(squot32(local_tid_31594, 32) == 0 || !ltid_in_bounds_31604)) {
            // read operands
            {
                x_24728 = x_24727;
                x_24727 = ((__local
                            float *) mem_30574)[sext_i32_i64(squot32(local_tid_31594,
                                                                     32)) - 1];
            }
            // perform operation
            {
                bool inactive_31609 =
                     slt64(srem64(sext_i32_i64(local_tid_31594),
                                  iota32_arg_20783),
                           sext_i32_i64(local_tid_31594) -
                           sext_i32_i64(squot32(local_tid_31594, 32) * 32 - 1));
                
                if (inactive_31609) {
                    x_24727 = x_24728;
                }
                if (!inactive_31609) {
                    float res_24729 = x_24727 + x_24728;
                    
                    x_24727 = res_24729;
                }
            }
            // write final result
            {
                ((__local float *) mem_30574)[sext_i32_i64(local_tid_31594)] =
                    x_24727;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31594, 32) == 0) {
            ((__local float *) mem_30574)[sext_i32_i64(local_tid_31594)] =
                x_24728;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30577;
    
    mem_30577 = (__local char *) mem_30577_backing_1;
    
    bool acc0_24749;
    int32_t acc0_24750;
    float acc0_24751;
    int64_t gtid_24458 = sext_i32_i64(ltid_pre_31598);
    int32_t phys_tid_24459 = local_tid_31594;
    __local char *red_arr_mem_31610;
    
    red_arr_mem_31610 = (__local char *) red_arr_mem_31610_backing_2;
    
    __local char *red_arr_mem_31612;
    
    red_arr_mem_31612 = (__local char *) red_arr_mem_31612_backing_3;
    
    __local char *red_arr_mem_31614;
    
    red_arr_mem_31614 = (__local char *) red_arr_mem_31614_backing_4;
    if (slt64(gtid_24458, iota32_arg_20783)) {
        float x_24767 = ((__local float *) mem_30574)[gtid_24458];
        float x_24768 = ((__global float *) mem_30567)[gtid_24458];
        int32_t index_primexp_28767 = sext_i64_i32(gtid_24458);
        float res_24771 = x_24767 / y_24718;
        bool cond_24772 = slt32(index_primexp_28767, y_24715);
        bool res_24773;
        
        res_24773 = futrts_isnan32(res_24771);
        
        bool res_24774 = !res_24773;
        bool x_24775 = cond_24772 && res_24774;
        float res_24776 = (float) fabs(res_24771);
        bool res_24777 = x_24768 < res_24776;
        bool x_24778 = x_24775 && res_24777;
        float res_24779;
        
        if (cond_24772) {
            res_24779 = res_24771;
        } else {
            res_24779 = 0.0F;
        }
        ((__local bool *) red_arr_mem_31610)[gtid_24458] = x_24778;
        ((__local int32_t *) red_arr_mem_31612)[gtid_24458] =
            index_primexp_28767;
        ((__local float *) red_arr_mem_31614)[gtid_24458] = res_24779;
        ((__local float *) mem_30577)[gtid_24458] = res_24771;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31616;
    int32_t skip_waves_31617;
    
    skip_waves_31617 = 1;
    
    bool x_24753;
    int32_t x_24754;
    float x_24755;
    bool x_24756;
    int32_t x_24757;
    float x_24758;
    
    offset_31616 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31594, sext_i64_i32(iota32_arg_20783))) {
            x_24753 = ((__local
                        bool *) red_arr_mem_31610)[sext_i32_i64(local_tid_31594 +
                                                   offset_31616)];
            x_24754 = ((__local
                        int32_t *) red_arr_mem_31612)[sext_i32_i64(local_tid_31594 +
                                                      offset_31616)];
            x_24755 = ((__local
                        float *) red_arr_mem_31614)[sext_i32_i64(local_tid_31594 +
                                                    offset_31616)];
        }
    }
    offset_31616 = 1;
    while (slt32(offset_31616, wave_sizze_31596)) {
        if (slt32(local_tid_31594 + offset_31616,
                  sext_i64_i32(iota32_arg_20783)) && ((local_tid_31594 -
                                                       squot32(local_tid_31594,
                                                               wave_sizze_31596) *
                                                       wave_sizze_31596) & (2 *
                                                                            offset_31616 -
                                                                            1)) ==
            0) {
            // read array element
            {
                x_24756 = ((volatile __local
                            bool *) red_arr_mem_31610)[sext_i32_i64(local_tid_31594 +
                                                       offset_31616)];
                x_24757 = ((volatile __local
                            int32_t *) red_arr_mem_31612)[sext_i32_i64(local_tid_31594 +
                                                          offset_31616)];
                x_24758 = ((volatile __local
                            float *) red_arr_mem_31614)[sext_i32_i64(local_tid_31594 +
                                                        offset_31616)];
            }
            // apply reduction operation
            {
                bool res_24759;
                int32_t res_24760;
                
                if (x_24753) {
                    res_24759 = x_24753;
                    res_24760 = x_24754;
                } else {
                    bool x_24761 = x_24756 && x_24756;
                    bool x_24762 = !x_24756;
                    bool y_24763 = x_24753 && x_24762;
                    bool res_24764 = x_24761 || y_24763;
                    int32_t res_24765;
                    
                    if (x_24756) {
                        res_24765 = x_24757;
                    } else {
                        res_24765 = x_24754;
                    }
                    res_24759 = res_24764;
                    res_24760 = res_24765;
                }
                
                float res_24766 = x_24755 + x_24758;
                
                x_24753 = res_24759;
                x_24754 = res_24760;
                x_24755 = res_24766;
            }
            // write result of operation
            {
                ((volatile __local
                  bool *) red_arr_mem_31610)[sext_i32_i64(local_tid_31594)] =
                    x_24753;
                ((volatile __local
                  int32_t *) red_arr_mem_31612)[sext_i32_i64(local_tid_31594)] =
                    x_24754;
                ((volatile __local
                  float *) red_arr_mem_31614)[sext_i32_i64(local_tid_31594)] =
                    x_24755;
            }
        }
        offset_31616 *= 2;
    }
    while (slt32(skip_waves_31617, squot32(sext_i64_i32(iota32_arg_20783) +
                                           wave_sizze_31596 - 1,
                                           wave_sizze_31596))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31616 = skip_waves_31617 * wave_sizze_31596;
        if (slt32(local_tid_31594 + offset_31616,
                  sext_i64_i32(iota32_arg_20783)) && ((local_tid_31594 -
                                                       squot32(local_tid_31594,
                                                               wave_sizze_31596) *
                                                       wave_sizze_31596) == 0 &&
                                                      (squot32(local_tid_31594,
                                                               wave_sizze_31596) &
                                                       (2 * skip_waves_31617 -
                                                        1)) == 0)) {
            // read array element
            {
                x_24756 = ((__local
                            bool *) red_arr_mem_31610)[sext_i32_i64(local_tid_31594 +
                                                       offset_31616)];
                x_24757 = ((__local
                            int32_t *) red_arr_mem_31612)[sext_i32_i64(local_tid_31594 +
                                                          offset_31616)];
                x_24758 = ((__local
                            float *) red_arr_mem_31614)[sext_i32_i64(local_tid_31594 +
                                                        offset_31616)];
            }
            // apply reduction operation
            {
                bool res_24759;
                int32_t res_24760;
                
                if (x_24753) {
                    res_24759 = x_24753;
                    res_24760 = x_24754;
                } else {
                    bool x_24761 = x_24756 && x_24756;
                    bool x_24762 = !x_24756;
                    bool y_24763 = x_24753 && x_24762;
                    bool res_24764 = x_24761 || y_24763;
                    int32_t res_24765;
                    
                    if (x_24756) {
                        res_24765 = x_24757;
                    } else {
                        res_24765 = x_24754;
                    }
                    res_24759 = res_24764;
                    res_24760 = res_24765;
                }
                
                float res_24766 = x_24755 + x_24758;
                
                x_24753 = res_24759;
                x_24754 = res_24760;
                x_24755 = res_24766;
            }
            // write result of operation
            {
                ((__local
                  bool *) red_arr_mem_31610)[sext_i32_i64(local_tid_31594)] =
                    x_24753;
                ((__local
                  int32_t *) red_arr_mem_31612)[sext_i32_i64(local_tid_31594)] =
                    x_24754;
                ((__local
                  float *) red_arr_mem_31614)[sext_i32_i64(local_tid_31594)] =
                    x_24755;
            }
        }
        skip_waves_31617 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    acc0_24749 = ((__local bool *) red_arr_mem_31610)[0];
    acc0_24750 = ((__local int32_t *) red_arr_mem_31612)[0];
    acc0_24751 = ((__local float *) red_arr_mem_31614)[0];
    
    bool x_24782 = acc0_24749 && acc0_24749;
    int32_t res_24786;
    
    if (acc0_24749) {
        res_24786 = acc0_24750;
    } else {
        res_24786 = -1;
    }
    
    bool cond_24793 = !x_24782;
    int32_t fst_breakzq_24794;
    
    if (cond_24793) {
        fst_breakzq_24794 = -1;
    } else {
        bool cond_24795 = slt32(res_24786, y_24715);
        int32_t res_24796;
        
        if (cond_24795) {
            int32_t i_24797 = add32(x_24709, res_24786);
            int64_t i_24798 = sext_i32_i64(i_24797);
            int32_t x_24799 = ((__global int32_t *) res_mem_30433)[gtid_24453 *
                                                                   N_20399 +
                                                                   i_24798];
            int32_t res_24800 = sub32(x_24799, n_20404);
            
            res_24796 = res_24800;
        } else {
            res_24796 = -1;
        }
        fst_breakzq_24794 = res_24796;
    }
    
    bool cond_24801 = sle32(x_24709, 5);
    bool res_24802 = sle32(y_24715, 5);
    bool x_24803 = !cond_24801;
    bool y_24804 = res_24802 && x_24803;
    bool cond_24805 = cond_24801 || y_24804;
    int32_t fst_breakzq_24806;
    
    if (cond_24805) {
        fst_breakzq_24806 = -2;
    } else {
        fst_breakzq_24806 = fst_breakzq_24794;
    }
    
    __local char *mem_30579;
    
    mem_30579 = (__local char *) mem_30579_backing_5;
    ((__local float *) mem_30579)[sext_i32_i64(local_tid_31594)] = NAN;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t write_i_24460 = sext_i32_i64(ltid_pre_31598);
    int32_t phys_tid_24461 = local_tid_31594;
    
    if (slt64(write_i_24460, iota32_arg_20783)) {
        int32_t index_primexp_28770 = sext_i64_i32(write_i_24460);
        float write_value_24810 = ((__local float *) mem_30577)[write_i_24460];
        bool cond_24811 = slt32(index_primexp_28770, y_24715);
        int32_t res_24812;
        
        if (cond_24811) {
            int32_t i_24813 = add32(x_24709, index_primexp_28770);
            int64_t i_24814 = sext_i32_i64(i_24813);
            int32_t x_24815 = ((__global int32_t *) res_mem_30433)[gtid_24453 *
                                                                   N_20399 +
                                                                   i_24814];
            int32_t res_24816 = sub32(x_24815, n_20404);
            
            res_24812 = res_24816;
        } else {
            res_24812 = -1;
        }
        
        int64_t res_24817 = sext_i32_i64(res_24812);
        
        if (sle64(0, res_24817) && slt64(res_24817, iota32_arg_20783)) {
            ((__local float *) mem_30579)[res_24817] = write_value_24810;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_30583)[gtid_24453 * iota32_arg_20783 +
                                   sext_i32_i64(local_tid_31594)] = ((__local
                                                                      float *) mem_30579)[sext_i32_i64(local_tid_31594)];
    barrier(CLK_LOCAL_MEM_FENCE);
    ((__global float *) mem_30586)[gtid_24453 * iota32_arg_20783 +
                                   sext_i32_i64(local_tid_31594)] = ((__local
                                                                      float *) mem_30577)[sext_i32_i64(local_tid_31594)];
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_tid_31594 == 0) {
        ((__global int32_t *) mem_30588)[gtid_24453] = fst_breakzq_24806;
    }
    if (local_tid_31594 == 0) {
        ((__global float *) mem_30590)[gtid_24453] = acc0_24751;
    }
    
  error_4:
    return;
}
__kernel void mainDetailedzisegmap_intragroup_28850(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30232_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30229_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_30210_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_30207_backing_aligned_3,
                                                    int64_t m_20400,
                                                    int64_t N_20401,
                                                    int64_t res_20413,
                                                    int64_t res_20419,
                                                    int64_t num_groups_y_28848,
                                                    int64_t num_whole_tiles_28866,
                                                    int64_t residual_input_29016,
                                                    unsigned char cond_29017,
                                                    __global
                                                    unsigned char *images_mem_29973,
                                                    __global
                                                    unsigned char *mem_29985,
                                                    __global
                                                    unsigned char *mem_30247)
{
    #define tile_sizze_28845 (mainDetailedzitile_sizze_28844)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30232_backing_7 = (__local volatile
                                                           char *) mem_30232_backing_aligned_0;
    __local volatile char *restrict mem_30229_backing_6 = (__local volatile
                                                           char *) mem_30229_backing_aligned_1;
    __local volatile char *restrict mem_30210_backing_1 = (__local volatile
                                                           char *) mem_30210_backing_aligned_2;
    __local volatile char *restrict mem_30207_backing_0 = (__local volatile
                                                           char *) mem_30207_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30979;
    int32_t local_tid_30980;
    int64_t group_sizze_30983;
    int32_t wave_sizze_30982;
    int32_t group_tid_30981;
    
    global_tid_30979 = get_global_id(0);
    local_tid_30980 = get_local_id(0);
    group_sizze_30983 = get_local_size(0);
    wave_sizze_30982 = LOCKSTEP_WIDTH;
    group_tid_30981 = get_group_id(0);
    
    int32_t gid_flat_28850;
    
    gid_flat_28850 = group_tid_30981;
    
    int32_t ltid_pre_30984;
    
    ltid_pre_30984 = squot32(local_tid_30980, sext_i64_i32(tile_sizze_28845));
    
    int32_t ltid_pre_30985;
    
    ltid_pre_30985 = local_tid_30980 - squot32(local_tid_30980,
                                               sext_i64_i32(tile_sizze_28845)) *
        sext_i64_i32(tile_sizze_28845);
    
    int64_t gid_x_28842;
    
    gid_x_28842 = squot64(sext_i32_i64(group_tid_30981), num_groups_y_28848);
    
    int64_t gid_y_28843;
    
    gid_y_28843 = sext_i32_i64(group_tid_30981) -
        squot64(sext_i32_i64(group_tid_30981), num_groups_y_28848) *
        num_groups_y_28848;
    
    float mem_30192[1];
    int64_t ltid_x_28867 = sext_i32_i64(ltid_pre_30984);
    int64_t ltid_y_28868 = sext_i32_i64(ltid_pre_30985);
    int32_t ltid_flat_28869 = local_tid_30980;
    
    if (slt64(ltid_x_28867, tile_sizze_28845) && slt64(ltid_y_28868,
                                                       tile_sizze_28845)) {
        mem_30192[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_28966 = gid_x_28842 * tile_sizze_28845;
    int64_t binop_x_28968 = gid_y_28843 * tile_sizze_28845;
    __local char *mem_30207;
    
    mem_30207 = (__local char *) mem_30207_backing_0;
    
    __local char *mem_30210;
    
    mem_30210 = (__local char *) mem_30210_backing_1;
    
    float accs_mem_30225[1];
    float mem_param_30200[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_30200[i_2] = mem_30192[i_2];
    for (int64_t tile_id_28878 = 0; tile_id_28878 < num_whole_tiles_28866;
         tile_id_28878++) {
        int64_t binop_x_28962 = tile_sizze_28845 * tile_id_28878;
        int64_t ltid_x_28879 = sext_i32_i64(ltid_pre_30984);
        int64_t ltid_y_28880 = sext_i32_i64(ltid_pre_30985);
        int32_t ltid_flat_28881 = local_tid_30980;
        int64_t i_28963 = ltid_x_28879 + binop_x_28962;
        int64_t j_28965 = ltid_y_28880 + binop_x_28962;
        int64_t gtid_28967 = ltid_x_28879 + binop_x_28966;
        int64_t gtid_28969 = ltid_y_28880 + binop_x_28968;
        bool binop_x_28972 = slt64(i_28963, res_20413);
        bool binop_y_28973 = slt64(gtid_28969, res_20419);
        bool cond_28974 = binop_x_28972 && binop_y_28973;
        float pre_28975;
        
        if (cond_28974) {
            float x_28976 = ((__global float *) mem_29985)[i_28963 * res_20419 +
                                                           gtid_28969];
            
            pre_28975 = x_28976;
        } else {
            pre_28975 = 0.0F;
        }
        
        bool binop_x_28978 = slt64(j_28965, res_20413);
        bool binop_y_28979 = slt64(gtid_28967, m_20400);
        bool cond_28980 = binop_x_28978 && binop_y_28979;
        float pre_28981;
        
        if (cond_28980) {
            float x_28982 = ((__global float *) images_mem_29973)[gtid_28967 *
                                                                  N_20401 +
                                                                  j_28965];
            
            pre_28981 = x_28982;
        } else {
            pre_28981 = 0.0F;
        }
        ((__local float *) mem_30207)[ltid_x_28879 * tile_sizze_28845 +
                                      ltid_y_28880] = pre_28975;
        ((__local float *) mem_30210)[ltid_x_28879 * tile_sizze_28845 +
                                      ltid_y_28880] = pre_28981;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30214[1];
        int64_t ltid_x_28924 = sext_i32_i64(ltid_pre_30984);
        int64_t ltid_y_28925 = sext_i32_i64(ltid_pre_30985);
        int32_t ltid_flat_28926 = local_tid_30980;
        int64_t gtid_28986 = ltid_x_28924 + binop_x_28966;
        int64_t gtid_28988 = ltid_y_28925 + binop_x_28968;
        float acc_28991 = mem_param_30200[0];
        bool binop_x_28994 = slt64(gtid_28986, m_20400);
        bool binop_y_28995 = slt64(gtid_28988, res_20419);
        bool cond_28996 = binop_x_28994 && binop_y_28995;
        float acc_28997;
        
        if (cond_28996) {
            float x_28998;
            float redout_29916 = acc_28991;
            
            for (int64_t i_29917 = 0; i_29917 < tile_sizze_28845; i_29917++) {
                float x_29003 = ((__local float *) mem_30210)[ltid_x_28924 *
                                                              tile_sizze_28845 +
                                                              i_29917];
                bool res_29004;
                
                res_29004 = futrts_isnan32(x_29003);
                
                float res_29005;
                
                if (res_29004) {
                    res_29005 = 0.0F;
                } else {
                    float x_29002 = ((__local float *) mem_30207)[i_29917 *
                                                                  tile_sizze_28845 +
                                                                  ltid_y_28925];
                    float res_29006 = x_29002 * x_29003;
                    
                    res_29005 = res_29006;
                }
                
                float res_29001 = res_29005 + redout_29916;
                float redout_tmp_30988 = res_29001;
                
                redout_29916 = redout_tmp_30988;
            }
            x_28998 = redout_29916;
            acc_28997 = x_28998;
        } else {
            acc_28997 = acc_28991;
        }
        mem_30214[0] = acc_28997;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_30986[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_30986[i_3] = mem_30214[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_30200[i_4] = mem_param_tmp_30986[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_30225[i_5] = mem_param_30200[i_5];
    
    __local char *mem_30229;
    
    mem_30229 = (__local char *) mem_30229_backing_6;
    
    __local char *mem_30232;
    
    mem_30232 = (__local char *) mem_30232_backing_7;
    
    float mem_30236[1];
    float mem_30636[1];
    
    if (cond_29017) {
        mem_30636[0] = accs_mem_30225[0];
    } else {
        int64_t binop_x_29103 = tile_sizze_28845 * num_whole_tiles_28866;
        int64_t ltid_x_29018 = sext_i32_i64(ltid_pre_30984);
        int64_t ltid_y_29019 = sext_i32_i64(ltid_pre_30985);
        int32_t ltid_flat_29020 = local_tid_30980;
        int64_t i_29104 = ltid_x_29018 + binop_x_29103;
        int64_t j_29106 = ltid_y_29019 + binop_x_29103;
        int64_t gtid_29108 = binop_x_28966 + ltid_x_29018;
        int64_t gtid_29110 = binop_x_28968 + ltid_y_29019;
        bool binop_x_29113 = slt64(i_29104, res_20413);
        bool binop_y_29114 = slt64(gtid_29110, res_20419);
        bool cond_29115 = binop_x_29113 && binop_y_29114;
        float pre_29116;
        
        if (cond_29115) {
            float x_29117 = ((__global float *) mem_29985)[i_29104 * res_20419 +
                                                           gtid_29110];
            
            pre_29116 = x_29117;
        } else {
            pre_29116 = 0.0F;
        }
        
        bool binop_x_29119 = slt64(j_29106, res_20413);
        bool binop_y_29120 = slt64(gtid_29108, m_20400);
        bool cond_29121 = binop_x_29119 && binop_y_29120;
        float pre_29122;
        
        if (cond_29121) {
            float x_29123 = ((__global float *) images_mem_29973)[gtid_29108 *
                                                                  N_20401 +
                                                                  j_29106];
            
            pre_29122 = x_29123;
        } else {
            pre_29122 = 0.0F;
        }
        ((__local float *) mem_30229)[ltid_x_29018 * tile_sizze_28845 +
                                      ltid_y_29019] = pre_29116;
        ((__local float *) mem_30232)[ltid_x_29018 * tile_sizze_28845 +
                                      ltid_y_29019] = pre_29122;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_29065 = sext_i32_i64(ltid_pre_30984);
        int64_t ltid_y_29066 = sext_i32_i64(ltid_pre_30985);
        int32_t ltid_flat_29067 = local_tid_30980;
        int64_t gtid_29129 = binop_x_28966 + ltid_x_29065;
        int64_t gtid_29131 = binop_x_28968 + ltid_y_29066;
        float acc_29134 = accs_mem_30225[0];
        bool binop_x_29137 = slt64(gtid_29129, m_20400);
        bool binop_y_29138 = slt64(gtid_29131, res_20419);
        bool cond_29139 = binop_x_29137 && binop_y_29138;
        float acc_29140;
        
        if (cond_29139) {
            float x_29141;
            float redout_29918 = acc_29134;
            
            for (int64_t i_29919 = 0; i_29919 < residual_input_29016;
                 i_29919++) {
                float x_29146 = ((__local float *) mem_30232)[ltid_x_29065 *
                                                              tile_sizze_28845 +
                                                              i_29919];
                bool res_29147;
                
                res_29147 = futrts_isnan32(x_29146);
                
                float res_29148;
                
                if (res_29147) {
                    res_29148 = 0.0F;
                } else {
                    float x_29145 = ((__local float *) mem_30229)[i_29919 *
                                                                  tile_sizze_28845 +
                                                                  ltid_y_29066];
                    float res_29149 = x_29145 * x_29146;
                    
                    res_29148 = res_29149;
                }
                
                float res_29144 = res_29148 + redout_29918;
                float redout_tmp_30989 = res_29144;
                
                redout_29918 = redout_tmp_30989;
            }
            x_29141 = redout_29918;
            acc_29140 = x_29141;
        } else {
            acc_29140 = acc_29134;
        }
        mem_30236[0] = acc_29140;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30636[0] = mem_30236[0];
    }
    
    int64_t thread_out_index_30990 = gid_x_28842 * tile_sizze_28845 +
            sext_i32_i64(ltid_pre_30984);
    int64_t thread_out_index_30991 = gid_y_28843 * tile_sizze_28845 +
            sext_i32_i64(ltid_pre_30985);
    
    if (slt64(thread_out_index_30990, m_20400) && slt64(thread_out_index_30991,
                                                        res_20419)) {
        ((__global float *) mem_30247)[thread_out_index_30990 * res_20419 +
                                       thread_out_index_30991] = mem_30636[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_28845
}
__kernel void mainDetailedzisegmap_intragroup_29172(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30369_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30366_backing_aligned_1,
                                                    __local volatile
                                                    int64_t *mem_30347_backing_aligned_2,
                                                    __local volatile
                                                    int64_t *mem_30344_backing_aligned_3,
                                                    int64_t N_20399,
                                                    int64_t m_20400,
                                                    int64_t res_20419,
                                                    int64_t num_groups_y_29170,
                                                    int64_t num_whole_tiles_29188,
                                                    int64_t residual_input_29332,
                                                    unsigned char cond_29333,
                                                    __global
                                                    unsigned char *res_mem_30300,
                                                    __global
                                                    unsigned char *mem_30324,
                                                    __global
                                                    unsigned char *mem_30384)
{
    #define tile_sizze_29167 (mainDetailedzitile_sizze_29166)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30369_backing_7 = (__local volatile
                                                           char *) mem_30369_backing_aligned_0;
    __local volatile char *restrict mem_30366_backing_6 = (__local volatile
                                                           char *) mem_30366_backing_aligned_1;
    __local volatile char *restrict mem_30347_backing_1 = (__local volatile
                                                           char *) mem_30347_backing_aligned_2;
    __local volatile char *restrict mem_30344_backing_0 = (__local volatile
                                                           char *) mem_30344_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31148;
    int32_t local_tid_31149;
    int64_t group_sizze_31152;
    int32_t wave_sizze_31151;
    int32_t group_tid_31150;
    
    global_tid_31148 = get_global_id(0);
    local_tid_31149 = get_local_id(0);
    group_sizze_31152 = get_local_size(0);
    wave_sizze_31151 = LOCKSTEP_WIDTH;
    group_tid_31150 = get_group_id(0);
    
    int32_t gid_flat_29172;
    
    gid_flat_29172 = group_tid_31150;
    
    int32_t ltid_pre_31153;
    
    ltid_pre_31153 = squot32(local_tid_31149, sext_i64_i32(tile_sizze_29167));
    
    int32_t ltid_pre_31154;
    
    ltid_pre_31154 = local_tid_31149 - squot32(local_tid_31149,
                                               sext_i64_i32(tile_sizze_29167)) *
        sext_i64_i32(tile_sizze_29167);
    
    int64_t gid_x_29164;
    
    gid_x_29164 = squot64(sext_i32_i64(group_tid_31150), num_groups_y_29170);
    
    int64_t gid_y_29165;
    
    gid_y_29165 = sext_i32_i64(group_tid_31150) -
        squot64(sext_i32_i64(group_tid_31150), num_groups_y_29170) *
        num_groups_y_29170;
    
    float mem_30329[1];
    int64_t ltid_x_29189 = sext_i32_i64(ltid_pre_31153);
    int64_t ltid_y_29190 = sext_i32_i64(ltid_pre_31154);
    int32_t ltid_flat_29191 = local_tid_31149;
    
    if (slt64(ltid_x_29189, tile_sizze_29167) && slt64(ltid_y_29190,
                                                       tile_sizze_29167)) {
        mem_30329[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_29286 = gid_x_29164 * tile_sizze_29167;
    int64_t binop_x_29288 = gid_y_29165 * tile_sizze_29167;
    __local char *mem_30344;
    
    mem_30344 = (__local char *) mem_30344_backing_0;
    
    __local char *mem_30347;
    
    mem_30347 = (__local char *) mem_30347_backing_1;
    
    float accs_mem_30362[1];
    float mem_param_30337[1];
    
    for (int32_t i_2 = 0; i_2 < 1; i_2++)
        mem_param_30337[i_2] = mem_30329[i_2];
    for (int64_t tile_id_29200 = 0; tile_id_29200 < num_whole_tiles_29188;
         tile_id_29200++) {
        int64_t binop_x_29282 = tile_sizze_29167 * tile_id_29200;
        int64_t ltid_x_29201 = sext_i32_i64(ltid_pre_31153);
        int64_t ltid_y_29202 = sext_i32_i64(ltid_pre_31154);
        int32_t ltid_flat_29203 = local_tid_31149;
        int64_t i_29283 = ltid_x_29201 + binop_x_29282;
        int64_t j_29285 = ltid_y_29202 + binop_x_29282;
        int64_t gtid_29287 = ltid_x_29201 + binop_x_29286;
        int64_t gtid_29289 = ltid_y_29202 + binop_x_29288;
        bool binop_x_29292 = slt64(j_29285, res_20419);
        bool binop_y_29293 = slt64(gtid_29287, m_20400);
        bool cond_29294 = binop_x_29292 && binop_y_29293;
        float pre_29295;
        
        if (cond_29294) {
            float x_29296 = ((__global float *) res_mem_30300)[gtid_29287 *
                                                               res_20419 +
                                                               j_29285];
            
            pre_29295 = x_29296;
        } else {
            pre_29295 = 0.0F;
        }
        
        bool binop_x_29298 = slt64(i_29283, res_20419);
        bool binop_y_29299 = slt64(gtid_29289, N_20399);
        bool cond_29300 = binop_x_29298 && binop_y_29299;
        float pre_29301;
        
        if (cond_29300) {
            float x_29302 = ((__global float *) mem_30324)[i_29283 * N_20399 +
                                                           gtid_29289];
            
            pre_29301 = x_29302;
        } else {
            pre_29301 = 0.0F;
        }
        ((__local float *) mem_30344)[ltid_x_29201 * tile_sizze_29167 +
                                      ltid_y_29202] = pre_29295;
        ((__local float *) mem_30347)[ltid_x_29201 * tile_sizze_29167 +
                                      ltid_y_29202] = pre_29301;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30351[1];
        int64_t ltid_x_29246 = sext_i32_i64(ltid_pre_31153);
        int64_t ltid_y_29247 = sext_i32_i64(ltid_pre_31154);
        int32_t ltid_flat_29248 = local_tid_31149;
        int64_t gtid_29306 = ltid_x_29246 + binop_x_29286;
        int64_t gtid_29308 = ltid_y_29247 + binop_x_29288;
        float acc_29311 = mem_param_30337[0];
        bool binop_x_29314 = slt64(gtid_29306, m_20400);
        bool binop_y_29315 = slt64(gtid_29308, N_20399);
        bool cond_29316 = binop_x_29314 && binop_y_29315;
        float acc_29317;
        
        if (cond_29316) {
            float x_29318;
            float redout_29934 = acc_29311;
            
            for (int64_t i_29935 = 0; i_29935 < tile_sizze_29167; i_29935++) {
                float x_29322 = ((__local float *) mem_30344)[ltid_x_29246 *
                                                              tile_sizze_29167 +
                                                              i_29935];
                float x_29323 = ((__local float *) mem_30347)[i_29935 *
                                                              tile_sizze_29167 +
                                                              ltid_y_29247];
                float res_29324 = x_29322 * x_29323;
                float res_29321 = res_29324 + redout_29934;
                float redout_tmp_31157 = res_29321;
                
                redout_29934 = redout_tmp_31157;
            }
            x_29318 = redout_29934;
            acc_29317 = x_29318;
        } else {
            acc_29317 = acc_29311;
        }
        mem_30351[0] = acc_29317;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31155[1];
        
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_tmp_31155[i_3] = mem_30351[i_3];
        for (int32_t i_4 = 0; i_4 < 1; i_4++)
            mem_param_30337[i_4] = mem_param_tmp_31155[i_4];
    }
    for (int32_t i_5 = 0; i_5 < 1; i_5++)
        accs_mem_30362[i_5] = mem_param_30337[i_5];
    
    __local char *mem_30366;
    
    mem_30366 = (__local char *) mem_30366_backing_6;
    
    __local char *mem_30369;
    
    mem_30369 = (__local char *) mem_30369_backing_7;
    
    float mem_30373[1];
    float mem_30648[1];
    
    if (cond_29333) {
        mem_30648[0] = accs_mem_30362[0];
    } else {
        int64_t binop_x_29417 = tile_sizze_29167 * num_whole_tiles_29188;
        int64_t ltid_x_29334 = sext_i32_i64(ltid_pre_31153);
        int64_t ltid_y_29335 = sext_i32_i64(ltid_pre_31154);
        int32_t ltid_flat_29336 = local_tid_31149;
        int64_t i_29418 = ltid_x_29334 + binop_x_29417;
        int64_t j_29420 = ltid_y_29335 + binop_x_29417;
        int64_t gtid_29422 = binop_x_29286 + ltid_x_29334;
        int64_t gtid_29424 = binop_x_29288 + ltid_y_29335;
        bool binop_x_29427 = slt64(j_29420, res_20419);
        bool binop_y_29428 = slt64(gtid_29422, m_20400);
        bool cond_29429 = binop_x_29427 && binop_y_29428;
        float pre_29430;
        
        if (cond_29429) {
            float x_29431 = ((__global float *) res_mem_30300)[gtid_29422 *
                                                               res_20419 +
                                                               j_29420];
            
            pre_29430 = x_29431;
        } else {
            pre_29430 = 0.0F;
        }
        
        bool binop_x_29433 = slt64(i_29418, res_20419);
        bool binop_y_29434 = slt64(gtid_29424, N_20399);
        bool cond_29435 = binop_x_29433 && binop_y_29434;
        float pre_29436;
        
        if (cond_29435) {
            float x_29437 = ((__global float *) mem_30324)[i_29418 * N_20399 +
                                                           gtid_29424];
            
            pre_29436 = x_29437;
        } else {
            pre_29436 = 0.0F;
        }
        ((__local float *) mem_30366)[ltid_x_29334 * tile_sizze_29167 +
                                      ltid_y_29335] = pre_29430;
        ((__local float *) mem_30369)[ltid_x_29334 * tile_sizze_29167 +
                                      ltid_y_29335] = pre_29436;
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_x_29381 = sext_i32_i64(ltid_pre_31153);
        int64_t ltid_y_29382 = sext_i32_i64(ltid_pre_31154);
        int32_t ltid_flat_29383 = local_tid_31149;
        int64_t gtid_29443 = binop_x_29286 + ltid_x_29381;
        int64_t gtid_29445 = binop_x_29288 + ltid_y_29382;
        float acc_29448 = accs_mem_30362[0];
        bool binop_x_29451 = slt64(gtid_29443, m_20400);
        bool binop_y_29452 = slt64(gtid_29445, N_20399);
        bool cond_29453 = binop_x_29451 && binop_y_29452;
        float acc_29454;
        
        if (cond_29453) {
            float x_29455;
            float redout_29936 = acc_29448;
            
            for (int64_t i_29937 = 0; i_29937 < residual_input_29332;
                 i_29937++) {
                float x_29459 = ((__local float *) mem_30366)[ltid_x_29381 *
                                                              tile_sizze_29167 +
                                                              i_29937];
                float x_29460 = ((__local float *) mem_30369)[i_29937 *
                                                              tile_sizze_29167 +
                                                              ltid_y_29382];
                float res_29461 = x_29459 * x_29460;
                float res_29458 = res_29461 + redout_29936;
                float redout_tmp_31158 = res_29458;
                
                redout_29936 = redout_tmp_31158;
            }
            x_29455 = redout_29936;
            acc_29454 = x_29455;
        } else {
            acc_29454 = acc_29448;
        }
        mem_30373[0] = acc_29454;
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30648[0] = mem_30373[0];
    }
    
    int64_t thread_out_index_31159 = gid_x_29164 * tile_sizze_29167 +
            sext_i32_i64(ltid_pre_31153);
    int64_t thread_out_index_31160 = gid_y_29165 * tile_sizze_29167 +
            sext_i32_i64(ltid_pre_31154);
    
    if (slt64(thread_out_index_31159, m_20400) && slt64(thread_out_index_31160,
                                                        N_20399)) {
        ((__global float *) mem_30384)[thread_out_index_31159 * N_20399 +
                                       thread_out_index_31160] = mem_30648[0];
    }
    
  error_5:
    return;
    #undef tile_sizze_29167
}
__kernel void mainDetailedzisegmap_intragroup_29477(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30466_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30453_backing_aligned_1,
                                                    int64_t m_20400,
                                                    int32_t n_20404,
                                                    float hfrac_20406,
                                                    int64_t res_20413,
                                                    int32_t k2p2_20415,
                                                    int64_t num_whole_tiles_29485,
                                                    int64_t residual_input_29606,
                                                    unsigned char cond_29607,
                                                    __global
                                                    unsigned char *mem_30436,
                                                    __global
                                                    unsigned char *mem_30439,
                                                    __global
                                                    unsigned char *mem_30483,
                                                    __global
                                                    unsigned char *mem_30485,
                                                    __global
                                                    unsigned char *mem_30487)
{
    #define segmap_group_sizze_24075 (mainDetailedzisegmap_group_sizze_24044)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30466_backing_5 = (__local volatile
                                                           char *) mem_30466_backing_aligned_0;
    __local volatile char *restrict mem_30453_backing_0 = (__local volatile
                                                           char *) mem_30453_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31328;
    int32_t local_tid_31329;
    int64_t group_sizze_31332;
    int32_t wave_sizze_31331;
    int32_t group_tid_31330;
    
    global_tid_31328 = get_global_id(0);
    local_tid_31329 = get_local_id(0);
    group_sizze_31332 = get_local_size(0);
    wave_sizze_31331 = LOCKSTEP_WIDTH;
    group_tid_31330 = get_group_id(0);
    
    int32_t gid_flat_29477;
    
    gid_flat_29477 = group_tid_31330;
    
    int32_t ltid_pre_31333;
    
    ltid_pre_31333 = local_tid_31329;
    
    int64_t gid_29476;
    
    gid_29476 = sext_i32_i64(group_tid_31330);
    
    float mem_30443[1];
    int64_t ltid_29486 = sext_i32_i64(ltid_pre_31333);
    int32_t ltid_flat_29487 = local_tid_31329;
    
    if (slt64(ltid_29486, segmap_group_sizze_24075)) {
        mem_30443[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int64_t binop_x_29572 = segmap_group_sizze_24075 * gid_29476;
    __local char *mem_30453;
    
    mem_30453 = (__local char *) mem_30453_backing_0;
    
    float accs_mem_30463[1];
    float mem_param_30448[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_30448[i_1] = mem_30443[i_1];
    for (int64_t tile_id_29493 = 0; tile_id_29493 < num_whole_tiles_29485;
         tile_id_29493++) {
        int64_t binop_x_29554 = segmap_group_sizze_24075 * tile_id_29493;
        int64_t ltid_29494 = sext_i32_i64(ltid_pre_31333);
        int32_t ltid_flat_29495 = local_tid_31329;
        
        if (slt64(ltid_29494, segmap_group_sizze_24075)) {
            int64_t j_29555 = ltid_29494 + binop_x_29554;
            bool cond_29567 = slt64(j_29555, res_20413);
            int32_t pre_29568;
            
            if (cond_29567) {
                int32_t index_primexp_29888 = sext_i64_i32(j_29555);
                
                pre_29568 = index_primexp_29888;
            } else {
                pre_29568 = 0;
            }
            ((__local int32_t *) mem_30453)[ltid_29494] = pre_29568;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30456[1];
        int64_t ltid_29521 = sext_i32_i64(ltid_pre_31333);
        int32_t ltid_flat_29522 = local_tid_31329;
        
        if (slt64(ltid_29521, segmap_group_sizze_24075)) {
            int64_t gtid_29573 = ltid_29521 + binop_x_29572;
            int32_t res_29575;
            int32_t redout_29938 = 0;
            
            for (int32_t i_29964 = 0; i_29964 < n_20404; i_29964++) {
                int64_t i_29939 = sext_i32_i64(i_29964);
                float x_29579 = ((__global float *) mem_30436)[i_29939 *
                                                               m_20400 +
                                                               gtid_29573];
                bool res_29580;
                
                res_29580 = futrts_isnan32(x_29579);
                
                bool cond_29581 = !res_29580;
                int32_t res_29582 = btoi_bool_i32(cond_29581);
                int32_t res_29578 = add32(res_29582, redout_29938);
                int32_t redout_tmp_31336 = res_29578;
                
                redout_29938 = redout_tmp_31336;
            }
            res_29575 = redout_29938;
            
            float acc_29583 = mem_param_30448[0];
            bool cond_29584 = slt64(gtid_29573, m_20400);
            float acc_29585;
            
            if (cond_29584) {
                float x_29586;
                float redout_29940 = acc_29583;
                
                for (int64_t i_29941 = 0; i_29941 < segmap_group_sizze_24075;
                     i_29941++) {
                    int32_t x_29590 = ((__local int32_t *) mem_30453)[i_29941];
                    bool cond_29591 = slt32(x_29590, res_29575);
                    float res_29592;
                    
                    if (cond_29591) {
                        int64_t i_29593 = sext_i32_i64(x_29590);
                        float res_29594 = ((__global
                                            float *) mem_30439)[i_29593 *
                                                                m_20400 +
                                                                gtid_29573];
                        
                        res_29592 = res_29594;
                    } else {
                        res_29592 = 0.0F;
                    }
                    
                    float res_29595 = res_29592 * res_29592;
                    float res_29589 = res_29595 + redout_29940;
                    float redout_tmp_31337 = res_29589;
                    
                    redout_29940 = redout_tmp_31337;
                }
                x_29586 = redout_29940;
                acc_29585 = x_29586;
            } else {
                acc_29585 = acc_29583;
            }
            mem_30456[0] = acc_29585;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31334[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_31334[i_2] = mem_30456[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_30448[i_3] = mem_param_tmp_31334[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_30463[i_4] = mem_param_30448[i_4];
    
    __local char *mem_30466;
    
    mem_30466 = (__local char *) mem_30466_backing_5;
    
    float mem_30469[1];
    float mem_30657[1];
    
    if (cond_29607) {
        mem_30657[0] = accs_mem_30463[0];
    } else {
        int64_t binop_x_29617 = segmap_group_sizze_24075 *
                num_whole_tiles_29485;
        int64_t ltid_29608 = sext_i32_i64(ltid_pre_31333);
        int32_t ltid_flat_29609 = local_tid_31329;
        
        if (slt64(ltid_29608, segmap_group_sizze_24075)) {
            int64_t j_29618 = ltid_29608 + binop_x_29617;
            bool cond_29630 = slt64(j_29618, res_20413);
            int32_t pre_29631;
            
            if (cond_29630) {
                int32_t index_primexp_29889 = sext_i64_i32(j_29618);
                
                pre_29631 = index_primexp_29889;
            } else {
                pre_29631 = 0;
            }
            ((__local int32_t *) mem_30466)[ltid_29608] = pre_29631;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_29636 = sext_i32_i64(ltid_pre_31333);
        int32_t ltid_flat_29637 = local_tid_31329;
        
        if (slt64(ltid_29636, segmap_group_sizze_24075)) {
            int64_t gtid_29644 = binop_x_29572 + ltid_29636;
            int32_t res_29646;
            int32_t redout_29942 = 0;
            
            for (int32_t i_29965 = 0; i_29965 < n_20404; i_29965++) {
                int64_t i_29943 = sext_i32_i64(i_29965);
                float x_29650 = ((__global float *) mem_30436)[i_29943 *
                                                               m_20400 +
                                                               gtid_29644];
                bool res_29651;
                
                res_29651 = futrts_isnan32(x_29650);
                
                bool cond_29652 = !res_29651;
                int32_t res_29653 = btoi_bool_i32(cond_29652);
                int32_t res_29649 = add32(res_29653, redout_29942);
                int32_t redout_tmp_31338 = res_29649;
                
                redout_29942 = redout_tmp_31338;
            }
            res_29646 = redout_29942;
            
            float acc_29654 = accs_mem_30463[0];
            bool cond_29655 = slt64(gtid_29644, m_20400);
            float acc_29656;
            
            if (cond_29655) {
                float x_29657;
                float redout_29944 = acc_29654;
                
                for (int64_t i_29945 = 0; i_29945 < residual_input_29606;
                     i_29945++) {
                    int32_t x_29661 = ((__local int32_t *) mem_30466)[i_29945];
                    bool cond_29662 = slt32(x_29661, res_29646);
                    float res_29663;
                    
                    if (cond_29662) {
                        int64_t i_29664 = sext_i32_i64(x_29661);
                        float res_29665 = ((__global
                                            float *) mem_30439)[i_29664 *
                                                                m_20400 +
                                                                gtid_29644];
                        
                        res_29663 = res_29665;
                    } else {
                        res_29663 = 0.0F;
                    }
                    
                    float res_29666 = res_29663 * res_29663;
                    float res_29660 = res_29666 + redout_29944;
                    float redout_tmp_31339 = res_29660;
                    
                    redout_29944 = redout_tmp_31339;
                }
                x_29657 = redout_29944;
                acc_29656 = x_29657;
            } else {
                acc_29656 = acc_29654;
            }
            mem_30469[0] = acc_29656;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30657[0] = mem_30469[0];
    }
    
    int32_t mem_30477[1];
    int32_t mem_30479[1];
    float mem_30481[1];
    int64_t ltid_29669 = sext_i32_i64(ltid_pre_31333);
    int32_t ltid_flat_29670 = local_tid_31329;
    
    if (slt64(ltid_29669, segmap_group_sizze_24075)) {
        int64_t gtid_29680 = binop_x_29572 + ltid_29669;
        bool cond_29682 = slt64(gtid_29680, m_20400);
        int32_t postlude_29683;
        int32_t postlude_29684;
        float postlude_29685;
        
        if (cond_29682) {
            float res_29681 = mem_30657[0];
            int32_t res_29687;
            int32_t redout_29946 = 0;
            
            for (int32_t i_29966 = 0; i_29966 < n_20404; i_29966++) {
                int64_t i_29947 = sext_i32_i64(i_29966);
                float x_29691 = ((__global float *) mem_30436)[i_29947 *
                                                               m_20400 +
                                                               gtid_29680];
                bool res_29692;
                
                res_29692 = futrts_isnan32(x_29691);
                
                bool cond_29693 = !res_29692;
                int32_t res_29694 = btoi_bool_i32(cond_29693);
                int32_t res_29690 = add32(res_29694, redout_29946);
                int32_t redout_tmp_31340 = res_29690;
                
                redout_29946 = redout_tmp_31340;
            }
            res_29687 = redout_29946;
            
            int32_t r32_arg_29695 = sub32(res_29687, k2p2_20415);
            float res_29696 = sitofp_i32_f32(r32_arg_29695);
            float sqrt_arg_29697 = res_29681 / res_29696;
            float res_29698;
            
            res_29698 = futrts_sqrt32(sqrt_arg_29697);
            
            float res_29699 = sitofp_i32_f32(res_29687);
            float t32_arg_29700 = hfrac_20406 * res_29699;
            int32_t res_29701 = fptosi_f32_i32(t32_arg_29700);
            
            postlude_29683 = res_29701;
            postlude_29684 = res_29687;
            postlude_29685 = res_29698;
        } else {
            postlude_29683 = 0;
            postlude_29684 = 0;
            postlude_29685 = 0.0F;
        }
        mem_30477[0] = postlude_29683;
        mem_30479[0] = postlude_29684;
        mem_30481[0] = postlude_29685;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    if (slt64(sext_i32_i64(local_tid_31329) + segmap_group_sizze_24075 *
              sext_i32_i64(group_tid_31330), m_20400)) {
        ((__global int32_t *) mem_30483)[sext_i32_i64(local_tid_31329) +
                                         segmap_group_sizze_24075 *
                                         sext_i32_i64(group_tid_31330)] =
            mem_30477[0];
    }
    if (slt64(sext_i32_i64(local_tid_31329) + segmap_group_sizze_24075 *
              sext_i32_i64(group_tid_31330), m_20400)) {
        ((__global int32_t *) mem_30485)[sext_i32_i64(local_tid_31329) +
                                         segmap_group_sizze_24075 *
                                         sext_i32_i64(group_tid_31330)] =
            mem_30479[0];
    }
    if (slt64(sext_i32_i64(local_tid_31329) + segmap_group_sizze_24075 *
              sext_i32_i64(group_tid_31330), m_20400)) {
        ((__global float *) mem_30487)[sext_i32_i64(local_tid_31329) +
                                       segmap_group_sizze_24075 *
                                       sext_i32_i64(group_tid_31330)] =
            mem_30481[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_24075
}
__kernel void mainDetailedzisegmap_intragroup_29709(__global
                                                    int *global_failure,
                                                    __local volatile
                                                    int64_t *mem_30548_backing_aligned_0,
                                                    __local volatile
                                                    int64_t *mem_30535_backing_aligned_1,
                                                    int64_t N_20399,
                                                    int64_t m_20400,
                                                    int64_t res_20761,
                                                    int64_t num_whole_tiles_29729,
                                                    int64_t residual_input_29828,
                                                    unsigned char cond_29829,
                                                    __global
                                                    unsigned char *res_mem_30432,
                                                    __global
                                                    unsigned char *res_mem_30511,
                                                    __global
                                                    unsigned char *res_mem_30512,
                                                    __global
                                                    unsigned char *mem_30558)
{
    #define segmap_group_sizze_24312 (mainDetailedzisegmap_group_sizze_24293)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict mem_30548_backing_5 = (__local volatile
                                                           char *) mem_30548_backing_aligned_0;
    __local volatile char *restrict mem_30535_backing_0 = (__local volatile
                                                           char *) mem_30535_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31514;
    int32_t local_tid_31515;
    int64_t group_sizze_31518;
    int32_t wave_sizze_31517;
    int32_t group_tid_31516;
    
    global_tid_31514 = get_global_id(0);
    local_tid_31515 = get_local_id(0);
    group_sizze_31518 = get_local_size(0);
    wave_sizze_31517 = LOCKSTEP_WIDTH;
    group_tid_31516 = get_group_id(0);
    
    int32_t gid_flat_29709;
    
    gid_flat_29709 = group_tid_31516;
    
    int32_t ltid_pre_31519;
    
    ltid_pre_31519 = local_tid_31515;
    
    int64_t gid_29708;
    
    gid_29708 = sext_i32_i64(group_tid_31516);
    
    int64_t binop_x_29718;
    
    binop_x_29718 = segmap_group_sizze_24312 * gid_29708;
    
    int32_t mem_30520[1];
    int32_t mem_30522[1];
    int64_t ltid_29710 = sext_i32_i64(ltid_pre_31519);
    int32_t ltid_flat_29711 = local_tid_31515;
    
    if (slt64(ltid_29710, segmap_group_sizze_24312)) {
        int64_t gtid_29719 = ltid_29710 + binop_x_29718;
        bool cond_29720 = slt64(gtid_29719, m_20400);
        int32_t pre_29721;
        int32_t pre_29722;
        
        if (cond_29720) {
            int32_t x_29723 = ((__global int32_t *) res_mem_30512)[gtid_29719];
            int32_t x_29724 = ((__global int32_t *) res_mem_30511)[gtid_29719];
            
            pre_29721 = x_29723;
            pre_29722 = x_29724;
        } else {
            pre_29721 = 0;
            pre_29722 = 0;
        }
        mem_30520[0] = pre_29721;
        mem_30522[0] = pre_29722;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    float mem_30525[1];
    int64_t ltid_29730 = sext_i32_i64(ltid_pre_31519);
    int32_t ltid_flat_29731 = local_tid_31515;
    
    if (slt64(ltid_29730, segmap_group_sizze_24312)) {
        mem_30525[0] = 0.0F;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    __local char *mem_30535;
    
    mem_30535 = (__local char *) mem_30535_backing_0;
    
    float accs_mem_30545[1];
    float mem_param_30530[1];
    
    for (int32_t i_1 = 0; i_1 < 1; i_1++)
        mem_param_30530[i_1] = mem_30525[i_1];
    for (int64_t tile_id_29737 = 0; tile_id_29737 < num_whole_tiles_29729;
         tile_id_29737++) {
        int64_t binop_x_29786 = segmap_group_sizze_24312 * tile_id_29737;
        int64_t ltid_29738 = sext_i32_i64(ltid_pre_31519);
        int32_t ltid_flat_29739 = local_tid_31515;
        
        if (slt64(ltid_29738, segmap_group_sizze_24312)) {
            int64_t j_29787 = ltid_29738 + binop_x_29786;
            bool cond_29792 = slt64(j_29787, res_20761);
            int32_t pre_29793;
            
            if (cond_29792) {
                int32_t index_primexp_29890 = sext_i64_i32(j_29787);
                
                pre_29793 = index_primexp_29890;
            } else {
                pre_29793 = 0;
            }
            ((__local int32_t *) mem_30535)[ltid_29738] = pre_29793;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_30538[1];
        int64_t ltid_29758 = sext_i32_i64(ltid_pre_31519);
        int32_t ltid_flat_29759 = local_tid_31515;
        
        if (slt64(ltid_29758, segmap_group_sizze_24312)) {
            int64_t gtid_29798 = binop_x_29718 + ltid_29758;
            float acc_29801 = mem_param_30530[0];
            bool cond_29802 = slt64(gtid_29798, m_20400);
            float acc_29803;
            
            if (cond_29802) {
                int32_t x_29799 = mem_30520[0];
                int32_t x_29800 = mem_30522[0];
                float x_29804;
                float redout_29948 = acc_29801;
                
                for (int64_t i_29949 = 0; i_29949 < segmap_group_sizze_24312;
                     i_29949++) {
                    int32_t x_29808 = ((__local int32_t *) mem_30535)[i_29949];
                    bool cond_29809 = slt32(x_29808, x_29800);
                    float res_29810;
                    
                    if (cond_29809) {
                        int32_t x_29811 = add32(x_29799, x_29808);
                        int32_t x_29812 = sub32(x_29811, x_29800);
                        int32_t i_29813 = add32(1, x_29812);
                        int64_t i_29814 = sext_i32_i64(i_29813);
                        float res_29815 = ((__global
                                            float *) res_mem_30432)[gtid_29798 *
                                                                    N_20399 +
                                                                    i_29814];
                        
                        res_29810 = res_29815;
                    } else {
                        res_29810 = 0.0F;
                    }
                    
                    float res_29807 = res_29810 + redout_29948;
                    float redout_tmp_31522 = res_29807;
                    
                    redout_29948 = redout_tmp_31522;
                }
                x_29804 = redout_29948;
                acc_29803 = x_29804;
            } else {
                acc_29803 = acc_29801;
            }
            mem_30538[0] = acc_29803;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        float mem_param_tmp_31520[1];
        
        for (int32_t i_2 = 0; i_2 < 1; i_2++)
            mem_param_tmp_31520[i_2] = mem_30538[i_2];
        for (int32_t i_3 = 0; i_3 < 1; i_3++)
            mem_param_30530[i_3] = mem_param_tmp_31520[i_3];
    }
    for (int32_t i_4 = 0; i_4 < 1; i_4++)
        accs_mem_30545[i_4] = mem_param_30530[i_4];
    
    __local char *mem_30548;
    
    mem_30548 = (__local char *) mem_30548_backing_5;
    
    float mem_30551[1];
    float mem_30666[1];
    
    if (cond_29829) {
        mem_30666[0] = accs_mem_30545[0];
    } else {
        int64_t binop_x_29839 = segmap_group_sizze_24312 *
                num_whole_tiles_29729;
        int64_t ltid_29830 = sext_i32_i64(ltid_pre_31519);
        int32_t ltid_flat_29831 = local_tid_31515;
        
        if (slt64(ltid_29830, segmap_group_sizze_24312)) {
            int64_t j_29840 = ltid_29830 + binop_x_29839;
            bool cond_29845 = slt64(j_29840, res_20761);
            int32_t pre_29846;
            
            if (cond_29845) {
                int32_t index_primexp_29891 = sext_i64_i32(j_29840);
                
                pre_29846 = index_primexp_29891;
            } else {
                pre_29846 = 0;
            }
            ((__local int32_t *) mem_30548)[ltid_29830] = pre_29846;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int64_t ltid_29851 = sext_i32_i64(ltid_pre_31519);
        int32_t ltid_flat_29852 = local_tid_31515;
        
        if (slt64(ltid_29851, segmap_group_sizze_24312)) {
            int64_t gtid_29859 = binop_x_29718 + ltid_29851;
            float acc_29862 = accs_mem_30545[0];
            bool cond_29863 = slt64(gtid_29859, m_20400);
            float acc_29864;
            
            if (cond_29863) {
                int32_t x_29860 = mem_30520[0];
                int32_t x_29861 = mem_30522[0];
                float x_29865;
                float redout_29950 = acc_29862;
                
                for (int64_t i_29951 = 0; i_29951 < residual_input_29828;
                     i_29951++) {
                    int32_t x_29869 = ((__local int32_t *) mem_30548)[i_29951];
                    bool cond_29870 = slt32(x_29869, x_29861);
                    float res_29871;
                    
                    if (cond_29870) {
                        int32_t x_29872 = add32(x_29860, x_29869);
                        int32_t x_29873 = sub32(x_29872, x_29861);
                        int32_t i_29874 = add32(1, x_29873);
                        int64_t i_29875 = sext_i32_i64(i_29874);
                        float res_29876 = ((__global
                                            float *) res_mem_30432)[gtid_29859 *
                                                                    N_20399 +
                                                                    i_29875];
                        
                        res_29871 = res_29876;
                    } else {
                        res_29871 = 0.0F;
                    }
                    
                    float res_29868 = res_29871 + redout_29950;
                    float redout_tmp_31523 = res_29868;
                    
                    redout_29950 = redout_tmp_31523;
                }
                x_29865 = redout_29950;
                acc_29864 = x_29865;
            } else {
                acc_29864 = acc_29862;
            }
            mem_30551[0] = acc_29864;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_30666[0] = mem_30551[0];
    }
    if (slt64(sext_i32_i64(local_tid_31515) + segmap_group_sizze_24312 *
              sext_i32_i64(group_tid_31516), m_20400)) {
        ((__global float *) mem_30558)[sext_i32_i64(local_tid_31515) +
                                       segmap_group_sizze_24312 *
                                       sext_i32_i64(group_tid_31516)] =
            mem_30666[0];
    }
    
  error_6:
    return;
    #undef segmap_group_sizze_24312
}
__kernel void mainDetailedzisegred_large_22161(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_30875_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_30873_backing_aligned_1,
                                               int64_t N_20399, int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t res_20419,
                                               int64_t num_groups_22300,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *binop_p_mem_29982,
                                               __global
                                               unsigned char *mem_30065,
                                               __global
                                               unsigned char *mem_30070,
                                               int64_t groups_per_segment_30859,
                                               int64_t elements_per_thread_30860,
                                               int64_t virt_num_groups_30861,
                                               int64_t threads_per_segment_30863,
                                               __global
                                               unsigned char *group_res_arr_mem_30864,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_30866)
{
    #define segred_group_sizze_22299 (mainDetailedzisegred_group_sizze_22155)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_30875_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_30875_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_30873_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30873_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30868;
    int32_t local_tid_30869;
    int64_t group_sizze_30872;
    int32_t wave_sizze_30871;
    int32_t group_tid_30870;
    
    global_tid_30868 = get_global_id(0);
    local_tid_30869 = get_local_id(0);
    group_sizze_30872 = get_local_size(0);
    wave_sizze_30871 = LOCKSTEP_WIDTH;
    group_tid_30870 = get_group_id(0);
    
    int32_t phys_tid_22161;
    
    phys_tid_22161 = global_tid_30868;
    
    __local char *red_arr_mem_30873;
    
    red_arr_mem_30873 = (__local char *) red_arr_mem_30873_backing_0;
    
    __local char *sync_arr_mem_30875;
    
    sync_arr_mem_30875 = (__local char *) sync_arr_mem_30875_backing_1;
    
    int32_t phys_group_id_30877;
    
    phys_group_id_30877 = get_group_id(0);
    for (int32_t i_30878 = 0; i_30878 <
         sdiv_up32(sext_i64_i32(virt_num_groups_30861) - phys_group_id_30877,
                   sext_i64_i32(num_groups_22300)); i_30878++) {
        int32_t virt_group_id_30879 = phys_group_id_30877 + i_30878 *
                sext_i64_i32(num_groups_22300);
        int32_t flat_segment_id_30880 = squot32(virt_group_id_30879,
                                                sext_i64_i32(groups_per_segment_30859));
        int64_t global_tid_30881 = srem64(sext_i32_i64(virt_group_id_30879) *
                                          segred_group_sizze_22299 +
                                          sext_i32_i64(local_tid_30869),
                                          segred_group_sizze_22299 *
                                          groups_per_segment_30859);
        int64_t gtid_22148 = squot64(sext_i32_i64(flat_segment_id_30880),
                                     res_20419 * res_20419);
        int64_t gtid_22149 = squot64(sext_i32_i64(flat_segment_id_30880) -
                                     squot64(sext_i32_i64(flat_segment_id_30880),
                                             res_20419 * res_20419) *
                                     (res_20419 * res_20419), res_20419);
        int64_t gtid_22150 = sext_i32_i64(flat_segment_id_30880) -
                squot64(sext_i32_i64(flat_segment_id_30880), res_20419 *
                        res_20419) * (res_20419 * res_20419) -
                squot64(sext_i32_i64(flat_segment_id_30880) -
                        squot64(sext_i32_i64(flat_segment_id_30880), res_20419 *
                                res_20419) * (res_20419 * res_20419),
                        res_20419) * res_20419;
        int64_t gtid_22160;
        float x_acc_30882;
        int64_t chunk_sizze_30883;
        
        chunk_sizze_30883 = smin64(elements_per_thread_30860,
                                   sdiv_up64(res_20413 -
                                             sext_i32_i64(sext_i64_i32(global_tid_30881)),
                                             threads_per_segment_30863));
        
        float x_22303;
        float x_22304;
        
        // neutral-initialise the accumulators
        {
            x_acc_30882 = 0.0F;
        }
        for (int64_t i_30887 = 0; i_30887 < chunk_sizze_30883; i_30887++) {
            gtid_22160 = sext_i32_i64(sext_i64_i32(global_tid_30881)) +
                threads_per_segment_30863 * i_30887;
            // apply map function
            {
                float x_22309 = ((__global
                                  float *) images_mem_29973)[gtid_22148 *
                                                             N_20401 +
                                                             gtid_22160];
                float x_22310 = ((__global
                                  float *) binop_p_mem_29982)[gtid_22149 *
                                                              N_20399 +
                                                              gtid_22160];
                float x_22311 = ((__global float *) mem_30065)[gtid_22150 *
                                                               N_20399 +
                                                               gtid_22160];
                float x_22312 = x_22310 * x_22311;
                bool res_22313;
                
                res_22313 = futrts_isnan32(x_22309);
                
                float y_22314;
                
                if (res_22313) {
                    y_22314 = 0.0F;
                } else {
                    y_22314 = 1.0F;
                }
                
                float res_22315 = x_22312 * y_22314;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_22303 = x_acc_30882;
                }
                // load new values
                {
                    x_22304 = res_22315;
                }
                // apply reduction operator
                {
                    float res_22305 = x_22303 + x_22304;
                    
                    // store in accumulator
                    {
                        x_acc_30882 = res_22305;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_22303 = x_acc_30882;
            ((__local
              float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                x_22303;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_30888;
        int32_t skip_waves_30889;
        
        skip_waves_30889 = 1;
        
        float x_30884;
        float x_30885;
        
        offset_30888 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_30869,
                      sext_i64_i32(segred_group_sizze_22299))) {
                x_30884 = ((__local
                            float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                        offset_30888)];
            }
        }
        offset_30888 = 1;
        while (slt32(offset_30888, wave_sizze_30871)) {
            if (slt32(local_tid_30869 + offset_30888,
                      sext_i64_i32(segred_group_sizze_22299)) &&
                ((local_tid_30869 - squot32(local_tid_30869, wave_sizze_30871) *
                  wave_sizze_30871) & (2 * offset_30888 - 1)) == 0) {
                // read array element
                {
                    x_30885 = ((volatile __local
                                float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                            offset_30888)];
                }
                // apply reduction operation
                {
                    float res_30886 = x_30884 + x_30885;
                    
                    x_30884 = res_30886;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                        x_30884;
                }
            }
            offset_30888 *= 2;
        }
        while (slt32(skip_waves_30889,
                     squot32(sext_i64_i32(segred_group_sizze_22299) +
                             wave_sizze_30871 - 1, wave_sizze_30871))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_30888 = skip_waves_30889 * wave_sizze_30871;
            if (slt32(local_tid_30869 + offset_30888,
                      sext_i64_i32(segred_group_sizze_22299)) &&
                ((local_tid_30869 - squot32(local_tid_30869, wave_sizze_30871) *
                  wave_sizze_30871) == 0 && (squot32(local_tid_30869,
                                                     wave_sizze_30871) & (2 *
                                                                          skip_waves_30889 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_30885 = ((__local
                                float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                            offset_30888)];
                }
                // apply reduction operation
                {
                    float res_30886 = x_30884 + x_30885;
                    
                    x_30884 = res_30886;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                        x_30884;
                }
            }
            skip_waves_30889 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_30869) == 0) {
                x_acc_30882 = x_30884;
            }
        }
        if (groups_per_segment_30859 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_30869 == 0) {
                    ((__global float *) mem_30070)[gtid_22148 * (res_20419 *
                                                                 res_20419) +
                                                   gtid_22149 * res_20419 +
                                                   gtid_22150] = x_acc_30882;
                }
            }
        } else {
            int32_t old_counter_30890;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_30869 == 0) {
                    ((__global
                      float *) group_res_arr_mem_30864)[sext_i32_i64(virt_group_id_30879) *
                                                        segred_group_sizze_22299] =
                        x_acc_30882;
                    mem_fence_global();
                    old_counter_30890 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_30866)[sext_i32_i64(srem32(flat_segment_id_30880,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_30875)[0] =
                        old_counter_30890 == groups_per_segment_30859 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_30891;
            
            is_last_group_30891 = ((__local bool *) sync_arr_mem_30875)[0];
            if (is_last_group_30891) {
                if (local_tid_30869 == 0) {
                    old_counter_30890 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_30866)[sext_i32_i64(srem32(flat_segment_id_30880,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_30859));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_30892 =
                            sdiv_up64(groups_per_segment_30859,
                                      segred_group_sizze_22299);
                    
                    x_22303 = 0.0F;
                    for (int64_t i_30893 = 0; i_30893 < read_per_thread_30892;
                         i_30893++) {
                        int64_t group_res_id_30894 =
                                sext_i32_i64(local_tid_30869) *
                                read_per_thread_30892 + i_30893;
                        int64_t index_of_group_res_30895 =
                                sext_i32_i64(flat_segment_id_30880) *
                                groups_per_segment_30859 + group_res_id_30894;
                        
                        if (slt64(group_res_id_30894,
                                  groups_per_segment_30859)) {
                            x_22304 = ((__global
                                        float *) group_res_arr_mem_30864)[index_of_group_res_30895 *
                                                                          segred_group_sizze_22299];
                            
                            float res_22305;
                            
                            res_22305 = x_22303 + x_22304;
                            x_22303 = res_22305;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                    x_22303;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_30896;
                    int32_t skip_waves_30897;
                    
                    skip_waves_30897 = 1;
                    
                    float x_30884;
                    float x_30885;
                    
                    offset_30896 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_30869,
                                  sext_i64_i32(segred_group_sizze_22299))) {
                            x_30884 = ((__local
                                        float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                                    offset_30896)];
                        }
                    }
                    offset_30896 = 1;
                    while (slt32(offset_30896, wave_sizze_30871)) {
                        if (slt32(local_tid_30869 + offset_30896,
                                  sext_i64_i32(segred_group_sizze_22299)) &&
                            ((local_tid_30869 - squot32(local_tid_30869,
                                                        wave_sizze_30871) *
                              wave_sizze_30871) & (2 * offset_30896 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_30885 = ((volatile __local
                                            float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                                        offset_30896)];
                            }
                            // apply reduction operation
                            {
                                float res_30886 = x_30884 + x_30885;
                                
                                x_30884 = res_30886;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                                    x_30884;
                            }
                        }
                        offset_30896 *= 2;
                    }
                    while (slt32(skip_waves_30897,
                                 squot32(sext_i64_i32(segred_group_sizze_22299) +
                                         wave_sizze_30871 - 1,
                                         wave_sizze_30871))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_30896 = skip_waves_30897 * wave_sizze_30871;
                        if (slt32(local_tid_30869 + offset_30896,
                                  sext_i64_i32(segred_group_sizze_22299)) &&
                            ((local_tid_30869 - squot32(local_tid_30869,
                                                        wave_sizze_30871) *
                              wave_sizze_30871) == 0 &&
                             (squot32(local_tid_30869, wave_sizze_30871) & (2 *
                                                                            skip_waves_30897 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_30885 = ((__local
                                            float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869 +
                                                                        offset_30896)];
                            }
                            // apply reduction operation
                            {
                                float res_30886 = x_30884 + x_30885;
                                
                                x_30884 = res_30886;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_30873)[sext_i32_i64(local_tid_30869)] =
                                    x_30884;
                            }
                        }
                        skip_waves_30897 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_30869 == 0) {
                            ((__global float *) mem_30070)[gtid_22148 *
                                                           (res_20419 *
                                                            res_20419) +
                                                           gtid_22149 *
                                                           res_20419 +
                                                           gtid_22150] =
                                x_30884;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_22299
}
__kernel void mainDetailedzisegred_large_23334(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31029_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31027_backing_aligned_1,
                                               int64_t N_20399, int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t res_20419,
                                               int64_t num_groups_23387,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *binop_p_mem_29982,
                                               __global
                                               unsigned char *mem_30251,
                                               int64_t groups_per_segment_31013,
                                               int64_t elements_per_thread_31014,
                                               int64_t virt_num_groups_31015,
                                               int64_t threads_per_segment_31017,
                                               __global
                                               unsigned char *group_res_arr_mem_31018,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31020)
{
    #define segred_group_sizze_23386 (mainDetailedzisegred_group_sizze_23328)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31029_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31029_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31027_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31027_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31022;
    int32_t local_tid_31023;
    int64_t group_sizze_31026;
    int32_t wave_sizze_31025;
    int32_t group_tid_31024;
    
    global_tid_31022 = get_global_id(0);
    local_tid_31023 = get_local_id(0);
    group_sizze_31026 = get_local_size(0);
    wave_sizze_31025 = LOCKSTEP_WIDTH;
    group_tid_31024 = get_group_id(0);
    
    int32_t phys_tid_23334;
    
    phys_tid_23334 = global_tid_31022;
    
    __local char *red_arr_mem_31027;
    
    red_arr_mem_31027 = (__local char *) red_arr_mem_31027_backing_0;
    
    __local char *sync_arr_mem_31029;
    
    sync_arr_mem_31029 = (__local char *) sync_arr_mem_31029_backing_1;
    
    int32_t phys_group_id_31031;
    
    phys_group_id_31031 = get_group_id(0);
    for (int32_t i_31032 = 0; i_31032 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31015) - phys_group_id_31031,
                   sext_i64_i32(num_groups_23387)); i_31032++) {
        int32_t virt_group_id_31033 = phys_group_id_31031 + i_31032 *
                sext_i64_i32(num_groups_23387);
        int32_t flat_segment_id_31034 = squot32(virt_group_id_31033,
                                                sext_i64_i32(groups_per_segment_31013));
        int64_t global_tid_31035 = srem64(sext_i32_i64(virt_group_id_31033) *
                                          segred_group_sizze_23386 +
                                          sext_i32_i64(local_tid_31023),
                                          segred_group_sizze_23386 *
                                          groups_per_segment_31013);
        int64_t gtid_23323 = squot64(sext_i32_i64(flat_segment_id_31034),
                                     res_20419);
        int64_t gtid_23324 = sext_i32_i64(flat_segment_id_31034) -
                squot64(sext_i32_i64(flat_segment_id_31034), res_20419) *
                res_20419;
        int64_t gtid_23333;
        float x_acc_31036;
        int64_t chunk_sizze_31037;
        
        chunk_sizze_31037 = smin64(elements_per_thread_31014,
                                   sdiv_up64(res_20413 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31035)),
                                             threads_per_segment_31017));
        
        float x_23390;
        float x_23391;
        
        // neutral-initialise the accumulators
        {
            x_acc_31036 = 0.0F;
        }
        for (int64_t i_31041 = 0; i_31041 < chunk_sizze_31037; i_31041++) {
            gtid_23333 = sext_i32_i64(sext_i64_i32(global_tid_31035)) +
                threads_per_segment_31017 * i_31041;
            // apply map function
            {
                float x_23396 = ((__global
                                  float *) images_mem_29973)[gtid_23323 *
                                                             N_20401 +
                                                             gtid_23333];
                bool res_23397;
                
                res_23397 = futrts_isnan32(x_23396);
                
                float res_23398;
                
                if (res_23397) {
                    res_23398 = 0.0F;
                } else {
                    float x_23395 = ((__global
                                      float *) binop_p_mem_29982)[gtid_23324 *
                                                                  N_20399 +
                                                                  gtid_23333];
                    float res_23399 = x_23395 * x_23396;
                    
                    res_23398 = res_23399;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_23390 = x_acc_31036;
                }
                // load new values
                {
                    x_23391 = res_23398;
                }
                // apply reduction operator
                {
                    float res_23392 = x_23390 + x_23391;
                    
                    // store in accumulator
                    {
                        x_acc_31036 = res_23392;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_23390 = x_acc_31036;
            ((__local
              float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                x_23390;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31042;
        int32_t skip_waves_31043;
        
        skip_waves_31043 = 1;
        
        float x_31038;
        float x_31039;
        
        offset_31042 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31023,
                      sext_i64_i32(segred_group_sizze_23386))) {
                x_31038 = ((__local
                            float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                        offset_31042)];
            }
        }
        offset_31042 = 1;
        while (slt32(offset_31042, wave_sizze_31025)) {
            if (slt32(local_tid_31023 + offset_31042,
                      sext_i64_i32(segred_group_sizze_23386)) &&
                ((local_tid_31023 - squot32(local_tid_31023, wave_sizze_31025) *
                  wave_sizze_31025) & (2 * offset_31042 - 1)) == 0) {
                // read array element
                {
                    x_31039 = ((volatile __local
                                float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                            offset_31042)];
                }
                // apply reduction operation
                {
                    float res_31040 = x_31038 + x_31039;
                    
                    x_31038 = res_31040;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                        x_31038;
                }
            }
            offset_31042 *= 2;
        }
        while (slt32(skip_waves_31043,
                     squot32(sext_i64_i32(segred_group_sizze_23386) +
                             wave_sizze_31025 - 1, wave_sizze_31025))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31042 = skip_waves_31043 * wave_sizze_31025;
            if (slt32(local_tid_31023 + offset_31042,
                      sext_i64_i32(segred_group_sizze_23386)) &&
                ((local_tid_31023 - squot32(local_tid_31023, wave_sizze_31025) *
                  wave_sizze_31025) == 0 && (squot32(local_tid_31023,
                                                     wave_sizze_31025) & (2 *
                                                                          skip_waves_31043 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31039 = ((__local
                                float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                            offset_31042)];
                }
                // apply reduction operation
                {
                    float res_31040 = x_31038 + x_31039;
                    
                    x_31038 = res_31040;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                        x_31038;
                }
            }
            skip_waves_31043 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31023) == 0) {
                x_acc_31036 = x_31038;
            }
        }
        if (groups_per_segment_31013 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31023 == 0) {
                    ((__global float *) mem_30251)[gtid_23323 * res_20419 +
                                                   gtid_23324] = x_acc_31036;
                }
            }
        } else {
            int32_t old_counter_31044;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31023 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31018)[sext_i32_i64(virt_group_id_31033) *
                                                        segred_group_sizze_23386] =
                        x_acc_31036;
                    mem_fence_global();
                    old_counter_31044 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31020)[sext_i32_i64(srem32(flat_segment_id_31034,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31029)[0] =
                        old_counter_31044 == groups_per_segment_31013 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31045;
            
            is_last_group_31045 = ((__local bool *) sync_arr_mem_31029)[0];
            if (is_last_group_31045) {
                if (local_tid_31023 == 0) {
                    old_counter_31044 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31020)[sext_i32_i64(srem32(flat_segment_id_31034,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31013));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31046 =
                            sdiv_up64(groups_per_segment_31013,
                                      segred_group_sizze_23386);
                    
                    x_23390 = 0.0F;
                    for (int64_t i_31047 = 0; i_31047 < read_per_thread_31046;
                         i_31047++) {
                        int64_t group_res_id_31048 =
                                sext_i32_i64(local_tid_31023) *
                                read_per_thread_31046 + i_31047;
                        int64_t index_of_group_res_31049 =
                                sext_i32_i64(flat_segment_id_31034) *
                                groups_per_segment_31013 + group_res_id_31048;
                        
                        if (slt64(group_res_id_31048,
                                  groups_per_segment_31013)) {
                            x_23391 = ((__global
                                        float *) group_res_arr_mem_31018)[index_of_group_res_31049 *
                                                                          segred_group_sizze_23386];
                            
                            float res_23392;
                            
                            res_23392 = x_23390 + x_23391;
                            x_23390 = res_23392;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                    x_23390;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31050;
                    int32_t skip_waves_31051;
                    
                    skip_waves_31051 = 1;
                    
                    float x_31038;
                    float x_31039;
                    
                    offset_31050 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31023,
                                  sext_i64_i32(segred_group_sizze_23386))) {
                            x_31038 = ((__local
                                        float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                                    offset_31050)];
                        }
                    }
                    offset_31050 = 1;
                    while (slt32(offset_31050, wave_sizze_31025)) {
                        if (slt32(local_tid_31023 + offset_31050,
                                  sext_i64_i32(segred_group_sizze_23386)) &&
                            ((local_tid_31023 - squot32(local_tid_31023,
                                                        wave_sizze_31025) *
                              wave_sizze_31025) & (2 * offset_31050 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31039 = ((volatile __local
                                            float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                                        offset_31050)];
                            }
                            // apply reduction operation
                            {
                                float res_31040 = x_31038 + x_31039;
                                
                                x_31038 = res_31040;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                                    x_31038;
                            }
                        }
                        offset_31050 *= 2;
                    }
                    while (slt32(skip_waves_31051,
                                 squot32(sext_i64_i32(segred_group_sizze_23386) +
                                         wave_sizze_31025 - 1,
                                         wave_sizze_31025))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31050 = skip_waves_31051 * wave_sizze_31025;
                        if (slt32(local_tid_31023 + offset_31050,
                                  sext_i64_i32(segred_group_sizze_23386)) &&
                            ((local_tid_31023 - squot32(local_tid_31023,
                                                        wave_sizze_31025) *
                              wave_sizze_31025) == 0 &&
                             (squot32(local_tid_31023, wave_sizze_31025) & (2 *
                                                                            skip_waves_31051 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31039 = ((__local
                                            float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023 +
                                                                        offset_31050)];
                            }
                            // apply reduction operation
                            {
                                float res_31040 = x_31038 + x_31039;
                                
                                x_31038 = res_31040;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31027)[sext_i32_i64(local_tid_31023)] =
                                    x_31038;
                            }
                        }
                        skip_waves_31051 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31023 == 0) {
                            ((__global float *) mem_30251)[gtid_23323 *
                                                           res_20419 +
                                                           gtid_23324] =
                                x_31038;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23386
}
__kernel void mainDetailedzisegred_large_23471(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31110_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31108_backing_aligned_1,
                                               int64_t res_20419,
                                               int64_t num_groups_23520,
                                               __global
                                               unsigned char *res_mem_30166,
                                               __global
                                               unsigned char *res_mem_30257,
                                               __global
                                               unsigned char *mem_30294,
                                               int64_t groups_per_segment_31094,
                                               int64_t elements_per_thread_31095,
                                               int64_t virt_num_groups_31096,
                                               int64_t threads_per_segment_31098,
                                               __global
                                               unsigned char *group_res_arr_mem_31099,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31101)
{
    #define segred_group_sizze_23519 (mainDetailedzisegred_group_sizze_23465)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31110_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31110_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31108_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31108_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31103;
    int32_t local_tid_31104;
    int64_t group_sizze_31107;
    int32_t wave_sizze_31106;
    int32_t group_tid_31105;
    
    global_tid_31103 = get_global_id(0);
    local_tid_31104 = get_local_id(0);
    group_sizze_31107 = get_local_size(0);
    wave_sizze_31106 = LOCKSTEP_WIDTH;
    group_tid_31105 = get_group_id(0);
    
    int32_t phys_tid_23471;
    
    phys_tid_23471 = global_tid_31103;
    
    __local char *red_arr_mem_31108;
    
    red_arr_mem_31108 = (__local char *) red_arr_mem_31108_backing_0;
    
    __local char *sync_arr_mem_31110;
    
    sync_arr_mem_31110 = (__local char *) sync_arr_mem_31110_backing_1;
    
    int32_t phys_group_id_31112;
    
    phys_group_id_31112 = get_group_id(0);
    for (int32_t i_31113 = 0; i_31113 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31096) - phys_group_id_31112,
                   sext_i64_i32(num_groups_23520)); i_31113++) {
        int32_t virt_group_id_31114 = phys_group_id_31112 + i_31113 *
                sext_i64_i32(num_groups_23520);
        int32_t flat_segment_id_31115 = squot32(virt_group_id_31114,
                                                sext_i64_i32(groups_per_segment_31094));
        int64_t global_tid_31116 = srem64(sext_i32_i64(virt_group_id_31114) *
                                          segred_group_sizze_23519 +
                                          sext_i32_i64(local_tid_31104),
                                          segred_group_sizze_23519 *
                                          groups_per_segment_31094);
        int64_t gtid_23460 = squot64(sext_i32_i64(flat_segment_id_31115),
                                     res_20419);
        int64_t gtid_23461 = sext_i32_i64(flat_segment_id_31115) -
                squot64(sext_i32_i64(flat_segment_id_31115), res_20419) *
                res_20419;
        int64_t gtid_23470;
        float x_acc_31117;
        int64_t chunk_sizze_31118;
        
        chunk_sizze_31118 = smin64(elements_per_thread_31095,
                                   sdiv_up64(res_20419 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31116)),
                                             threads_per_segment_31098));
        
        float x_23523;
        float x_23524;
        
        // neutral-initialise the accumulators
        {
            x_acc_31117 = 0.0F;
        }
        for (int64_t i_31122 = 0; i_31122 < chunk_sizze_31118; i_31122++) {
            gtid_23470 = sext_i32_i64(sext_i64_i32(global_tid_31116)) +
                threads_per_segment_31098 * i_31122;
            // apply map function
            {
                float x_23529 = ((__global float *) res_mem_30257)[gtid_23460 *
                                                                   res_20419 +
                                                                   gtid_23470];
                float x_23530 = ((__global float *) res_mem_30166)[gtid_23460 *
                                                                   (res_20419 *
                                                                    res_20419) +
                                                                   gtid_23461 *
                                                                   res_20419 +
                                                                   gtid_23470];
                float res_23531 = x_23529 * x_23530;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_23523 = x_acc_31117;
                }
                // load new values
                {
                    x_23524 = res_23531;
                }
                // apply reduction operator
                {
                    float res_23525 = x_23523 + x_23524;
                    
                    // store in accumulator
                    {
                        x_acc_31117 = res_23525;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_23523 = x_acc_31117;
            ((__local
              float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                x_23523;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31123;
        int32_t skip_waves_31124;
        
        skip_waves_31124 = 1;
        
        float x_31119;
        float x_31120;
        
        offset_31123 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31104,
                      sext_i64_i32(segred_group_sizze_23519))) {
                x_31119 = ((__local
                            float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                        offset_31123)];
            }
        }
        offset_31123 = 1;
        while (slt32(offset_31123, wave_sizze_31106)) {
            if (slt32(local_tid_31104 + offset_31123,
                      sext_i64_i32(segred_group_sizze_23519)) &&
                ((local_tid_31104 - squot32(local_tid_31104, wave_sizze_31106) *
                  wave_sizze_31106) & (2 * offset_31123 - 1)) == 0) {
                // read array element
                {
                    x_31120 = ((volatile __local
                                float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                            offset_31123)];
                }
                // apply reduction operation
                {
                    float res_31121 = x_31119 + x_31120;
                    
                    x_31119 = res_31121;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                        x_31119;
                }
            }
            offset_31123 *= 2;
        }
        while (slt32(skip_waves_31124,
                     squot32(sext_i64_i32(segred_group_sizze_23519) +
                             wave_sizze_31106 - 1, wave_sizze_31106))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31123 = skip_waves_31124 * wave_sizze_31106;
            if (slt32(local_tid_31104 + offset_31123,
                      sext_i64_i32(segred_group_sizze_23519)) &&
                ((local_tid_31104 - squot32(local_tid_31104, wave_sizze_31106) *
                  wave_sizze_31106) == 0 && (squot32(local_tid_31104,
                                                     wave_sizze_31106) & (2 *
                                                                          skip_waves_31124 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31120 = ((__local
                                float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                            offset_31123)];
                }
                // apply reduction operation
                {
                    float res_31121 = x_31119 + x_31120;
                    
                    x_31119 = res_31121;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                        x_31119;
                }
            }
            skip_waves_31124 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31104) == 0) {
                x_acc_31117 = x_31119;
            }
        }
        if (groups_per_segment_31094 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31104 == 0) {
                    ((__global float *) mem_30294)[gtid_23460 * res_20419 +
                                                   gtid_23461] = x_acc_31117;
                }
            }
        } else {
            int32_t old_counter_31125;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31104 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31099)[sext_i32_i64(virt_group_id_31114) *
                                                        segred_group_sizze_23519] =
                        x_acc_31117;
                    mem_fence_global();
                    old_counter_31125 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31101)[sext_i32_i64(srem32(flat_segment_id_31115,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31110)[0] =
                        old_counter_31125 == groups_per_segment_31094 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31126;
            
            is_last_group_31126 = ((__local bool *) sync_arr_mem_31110)[0];
            if (is_last_group_31126) {
                if (local_tid_31104 == 0) {
                    old_counter_31125 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31101)[sext_i32_i64(srem32(flat_segment_id_31115,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31094));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31127 =
                            sdiv_up64(groups_per_segment_31094,
                                      segred_group_sizze_23519);
                    
                    x_23523 = 0.0F;
                    for (int64_t i_31128 = 0; i_31128 < read_per_thread_31127;
                         i_31128++) {
                        int64_t group_res_id_31129 =
                                sext_i32_i64(local_tid_31104) *
                                read_per_thread_31127 + i_31128;
                        int64_t index_of_group_res_31130 =
                                sext_i32_i64(flat_segment_id_31115) *
                                groups_per_segment_31094 + group_res_id_31129;
                        
                        if (slt64(group_res_id_31129,
                                  groups_per_segment_31094)) {
                            x_23524 = ((__global
                                        float *) group_res_arr_mem_31099)[index_of_group_res_31130 *
                                                                          segred_group_sizze_23519];
                            
                            float res_23525;
                            
                            res_23525 = x_23523 + x_23524;
                            x_23523 = res_23525;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                    x_23523;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31131;
                    int32_t skip_waves_31132;
                    
                    skip_waves_31132 = 1;
                    
                    float x_31119;
                    float x_31120;
                    
                    offset_31131 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31104,
                                  sext_i64_i32(segred_group_sizze_23519))) {
                            x_31119 = ((__local
                                        float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                                    offset_31131)];
                        }
                    }
                    offset_31131 = 1;
                    while (slt32(offset_31131, wave_sizze_31106)) {
                        if (slt32(local_tid_31104 + offset_31131,
                                  sext_i64_i32(segred_group_sizze_23519)) &&
                            ((local_tid_31104 - squot32(local_tid_31104,
                                                        wave_sizze_31106) *
                              wave_sizze_31106) & (2 * offset_31131 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31120 = ((volatile __local
                                            float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                                        offset_31131)];
                            }
                            // apply reduction operation
                            {
                                float res_31121 = x_31119 + x_31120;
                                
                                x_31119 = res_31121;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                                    x_31119;
                            }
                        }
                        offset_31131 *= 2;
                    }
                    while (slt32(skip_waves_31132,
                                 squot32(sext_i64_i32(segred_group_sizze_23519) +
                                         wave_sizze_31106 - 1,
                                         wave_sizze_31106))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31131 = skip_waves_31132 * wave_sizze_31106;
                        if (slt32(local_tid_31104 + offset_31131,
                                  sext_i64_i32(segred_group_sizze_23519)) &&
                            ((local_tid_31104 - squot32(local_tid_31104,
                                                        wave_sizze_31106) *
                              wave_sizze_31106) == 0 &&
                             (squot32(local_tid_31104, wave_sizze_31106) & (2 *
                                                                            skip_waves_31132 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31120 = ((__local
                                            float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104 +
                                                                        offset_31131)];
                            }
                            // apply reduction operation
                            {
                                float res_31121 = x_31119 + x_31120;
                                
                                x_31119 = res_31121;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31108)[sext_i32_i64(local_tid_31104)] =
                                    x_31119;
                            }
                        }
                        skip_waves_31132 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31104 == 0) {
                            ((__global float *) mem_30294)[gtid_23460 *
                                                           res_20419 +
                                                           gtid_23461] =
                                x_31119;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23519
}
__kernel void mainDetailedzisegred_large_23601(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31198_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31196_backing_aligned_1,
                                               int64_t N_20399,
                                               int64_t res_20419,
                                               int64_t num_groups_23648,
                                               __global
                                               unsigned char *mem_29989,
                                               __global
                                               unsigned char *res_mem_30300,
                                               __global
                                               unsigned char *mem_30388,
                                               int64_t groups_per_segment_31182,
                                               int64_t elements_per_thread_31183,
                                               int64_t virt_num_groups_31184,
                                               int64_t threads_per_segment_31186,
                                               __global
                                               unsigned char *group_res_arr_mem_31187,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31189)
{
    #define segred_group_sizze_23647 (mainDetailedzisegred_group_sizze_23595)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31198_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31198_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31196_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31196_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31191;
    int32_t local_tid_31192;
    int64_t group_sizze_31195;
    int32_t wave_sizze_31194;
    int32_t group_tid_31193;
    
    global_tid_31191 = get_global_id(0);
    local_tid_31192 = get_local_id(0);
    group_sizze_31195 = get_local_size(0);
    wave_sizze_31194 = LOCKSTEP_WIDTH;
    group_tid_31193 = get_group_id(0);
    
    int32_t phys_tid_23601;
    
    phys_tid_23601 = global_tid_31191;
    
    __local char *red_arr_mem_31196;
    
    red_arr_mem_31196 = (__local char *) red_arr_mem_31196_backing_0;
    
    __local char *sync_arr_mem_31198;
    
    sync_arr_mem_31198 = (__local char *) sync_arr_mem_31198_backing_1;
    
    int32_t phys_group_id_31200;
    
    phys_group_id_31200 = get_group_id(0);
    for (int32_t i_31201 = 0; i_31201 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31184) - phys_group_id_31200,
                   sext_i64_i32(num_groups_23648)); i_31201++) {
        int32_t virt_group_id_31202 = phys_group_id_31200 + i_31201 *
                sext_i64_i32(num_groups_23648);
        int32_t flat_segment_id_31203 = squot32(virt_group_id_31202,
                                                sext_i64_i32(groups_per_segment_31182));
        int64_t global_tid_31204 = srem64(sext_i32_i64(virt_group_id_31202) *
                                          segred_group_sizze_23647 +
                                          sext_i32_i64(local_tid_31192),
                                          segred_group_sizze_23647 *
                                          groups_per_segment_31182);
        int64_t gtid_23590 = squot64(sext_i32_i64(flat_segment_id_31203),
                                     N_20399);
        int64_t gtid_23591 = sext_i32_i64(flat_segment_id_31203) -
                squot64(sext_i32_i64(flat_segment_id_31203), N_20399) * N_20399;
        int64_t gtid_23600;
        float x_acc_31205;
        int64_t chunk_sizze_31206;
        
        chunk_sizze_31206 = smin64(elements_per_thread_31183,
                                   sdiv_up64(res_20419 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31204)),
                                             threads_per_segment_31186));
        
        float x_23651;
        float x_23652;
        
        // neutral-initialise the accumulators
        {
            x_acc_31205 = 0.0F;
        }
        for (int64_t i_31210 = 0; i_31210 < chunk_sizze_31206; i_31210++) {
            gtid_23600 = sext_i32_i64(sext_i64_i32(global_tid_31204)) +
                threads_per_segment_31186 * i_31210;
            // apply map function
            {
                float x_23656 = ((__global float *) res_mem_30300)[gtid_23590 *
                                                                   res_20419 +
                                                                   gtid_23600];
                float x_23657 = ((__global float *) mem_29989)[gtid_23591 *
                                                               res_20419 +
                                                               gtid_23600];
                float res_23658 = x_23656 * x_23657;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_23651 = x_acc_31205;
                }
                // load new values
                {
                    x_23652 = res_23658;
                }
                // apply reduction operator
                {
                    float res_23653 = x_23651 + x_23652;
                    
                    // store in accumulator
                    {
                        x_acc_31205 = res_23653;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_23651 = x_acc_31205;
            ((__local
              float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                x_23651;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31211;
        int32_t skip_waves_31212;
        
        skip_waves_31212 = 1;
        
        float x_31207;
        float x_31208;
        
        offset_31211 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31192,
                      sext_i64_i32(segred_group_sizze_23647))) {
                x_31207 = ((__local
                            float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                        offset_31211)];
            }
        }
        offset_31211 = 1;
        while (slt32(offset_31211, wave_sizze_31194)) {
            if (slt32(local_tid_31192 + offset_31211,
                      sext_i64_i32(segred_group_sizze_23647)) &&
                ((local_tid_31192 - squot32(local_tid_31192, wave_sizze_31194) *
                  wave_sizze_31194) & (2 * offset_31211 - 1)) == 0) {
                // read array element
                {
                    x_31208 = ((volatile __local
                                float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                            offset_31211)];
                }
                // apply reduction operation
                {
                    float res_31209 = x_31207 + x_31208;
                    
                    x_31207 = res_31209;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                        x_31207;
                }
            }
            offset_31211 *= 2;
        }
        while (slt32(skip_waves_31212,
                     squot32(sext_i64_i32(segred_group_sizze_23647) +
                             wave_sizze_31194 - 1, wave_sizze_31194))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31211 = skip_waves_31212 * wave_sizze_31194;
            if (slt32(local_tid_31192 + offset_31211,
                      sext_i64_i32(segred_group_sizze_23647)) &&
                ((local_tid_31192 - squot32(local_tid_31192, wave_sizze_31194) *
                  wave_sizze_31194) == 0 && (squot32(local_tid_31192,
                                                     wave_sizze_31194) & (2 *
                                                                          skip_waves_31212 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31208 = ((__local
                                float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                            offset_31211)];
                }
                // apply reduction operation
                {
                    float res_31209 = x_31207 + x_31208;
                    
                    x_31207 = res_31209;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                        x_31207;
                }
            }
            skip_waves_31212 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31192) == 0) {
                x_acc_31205 = x_31207;
            }
        }
        if (groups_per_segment_31182 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31192 == 0) {
                    ((__global float *) mem_30388)[gtid_23590 * N_20399 +
                                                   gtid_23591] = x_acc_31205;
                }
            }
        } else {
            int32_t old_counter_31213;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31192 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31187)[sext_i32_i64(virt_group_id_31202) *
                                                        segred_group_sizze_23647] =
                        x_acc_31205;
                    mem_fence_global();
                    old_counter_31213 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31189)[sext_i32_i64(srem32(flat_segment_id_31203,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31198)[0] =
                        old_counter_31213 == groups_per_segment_31182 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31214;
            
            is_last_group_31214 = ((__local bool *) sync_arr_mem_31198)[0];
            if (is_last_group_31214) {
                if (local_tid_31192 == 0) {
                    old_counter_31213 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31189)[sext_i32_i64(srem32(flat_segment_id_31203,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31182));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31215 =
                            sdiv_up64(groups_per_segment_31182,
                                      segred_group_sizze_23647);
                    
                    x_23651 = 0.0F;
                    for (int64_t i_31216 = 0; i_31216 < read_per_thread_31215;
                         i_31216++) {
                        int64_t group_res_id_31217 =
                                sext_i32_i64(local_tid_31192) *
                                read_per_thread_31215 + i_31216;
                        int64_t index_of_group_res_31218 =
                                sext_i32_i64(flat_segment_id_31203) *
                                groups_per_segment_31182 + group_res_id_31217;
                        
                        if (slt64(group_res_id_31217,
                                  groups_per_segment_31182)) {
                            x_23652 = ((__global
                                        float *) group_res_arr_mem_31187)[index_of_group_res_31218 *
                                                                          segred_group_sizze_23647];
                            
                            float res_23653;
                            
                            res_23653 = x_23651 + x_23652;
                            x_23651 = res_23653;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                    x_23651;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31219;
                    int32_t skip_waves_31220;
                    
                    skip_waves_31220 = 1;
                    
                    float x_31207;
                    float x_31208;
                    
                    offset_31219 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31192,
                                  sext_i64_i32(segred_group_sizze_23647))) {
                            x_31207 = ((__local
                                        float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                                    offset_31219)];
                        }
                    }
                    offset_31219 = 1;
                    while (slt32(offset_31219, wave_sizze_31194)) {
                        if (slt32(local_tid_31192 + offset_31219,
                                  sext_i64_i32(segred_group_sizze_23647)) &&
                            ((local_tid_31192 - squot32(local_tid_31192,
                                                        wave_sizze_31194) *
                              wave_sizze_31194) & (2 * offset_31219 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31208 = ((volatile __local
                                            float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                                        offset_31219)];
                            }
                            // apply reduction operation
                            {
                                float res_31209 = x_31207 + x_31208;
                                
                                x_31207 = res_31209;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                                    x_31207;
                            }
                        }
                        offset_31219 *= 2;
                    }
                    while (slt32(skip_waves_31220,
                                 squot32(sext_i64_i32(segred_group_sizze_23647) +
                                         wave_sizze_31194 - 1,
                                         wave_sizze_31194))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31219 = skip_waves_31220 * wave_sizze_31194;
                        if (slt32(local_tid_31192 + offset_31219,
                                  sext_i64_i32(segred_group_sizze_23647)) &&
                            ((local_tid_31192 - squot32(local_tid_31192,
                                                        wave_sizze_31194) *
                              wave_sizze_31194) == 0 &&
                             (squot32(local_tid_31192, wave_sizze_31194) & (2 *
                                                                            skip_waves_31220 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31208 = ((__local
                                            float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192 +
                                                                        offset_31219)];
                            }
                            // apply reduction operation
                            {
                                float res_31209 = x_31207 + x_31208;
                                
                                x_31207 = res_31209;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31196)[sext_i32_i64(local_tid_31192)] =
                                    x_31207;
                            }
                        }
                        skip_waves_31220 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31192 == 0) {
                            ((__global float *) mem_30388)[gtid_23590 *
                                                           N_20399 +
                                                           gtid_23591] =
                                x_31207;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23647
}
__kernel void mainDetailedzisegred_large_24167(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31452_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31450_backing_aligned_1,
                                               int64_t N_20399,
                                               int64_t res_20413,
                                               int64_t num_groups_24214,
                                               __global
                                               unsigned char *res_mem_30432,
                                               __global
                                               unsigned char *mem_30499,
                                               __global
                                               unsigned char *mem_30502,
                                               int64_t groups_per_segment_31436,
                                               int64_t elements_per_thread_31437,
                                               int64_t virt_num_groups_31438,
                                               int64_t threads_per_segment_31440,
                                               __global
                                               unsigned char *group_res_arr_mem_31441,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31443)
{
    #define segred_group_sizze_24213 (mainDetailedzisegred_group_sizze_24161)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31452_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31452_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31450_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31450_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31445;
    int32_t local_tid_31446;
    int64_t group_sizze_31449;
    int32_t wave_sizze_31448;
    int32_t group_tid_31447;
    
    global_tid_31445 = get_global_id(0);
    local_tid_31446 = get_local_id(0);
    group_sizze_31449 = get_local_size(0);
    wave_sizze_31448 = LOCKSTEP_WIDTH;
    group_tid_31447 = get_group_id(0);
    
    int32_t phys_tid_24167;
    
    phys_tid_24167 = global_tid_31445;
    
    __local char *red_arr_mem_31450;
    
    red_arr_mem_31450 = (__local char *) red_arr_mem_31450_backing_0;
    
    __local char *sync_arr_mem_31452;
    
    sync_arr_mem_31452 = (__local char *) sync_arr_mem_31452_backing_1;
    
    int32_t phys_group_id_31454;
    
    phys_group_id_31454 = get_group_id(0);
    for (int32_t i_31455 = 0; i_31455 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31438) - phys_group_id_31454,
                   sext_i64_i32(num_groups_24214)); i_31455++) {
        int32_t virt_group_id_31456 = phys_group_id_31454 + i_31455 *
                sext_i64_i32(num_groups_24214);
        int32_t flat_segment_id_31457 = squot32(virt_group_id_31456,
                                                sext_i64_i32(groups_per_segment_31436));
        int64_t global_tid_31458 = srem64(sext_i32_i64(virt_group_id_31456) *
                                          segred_group_sizze_24213 +
                                          sext_i32_i64(local_tid_31446),
                                          segred_group_sizze_24213 *
                                          groups_per_segment_31436);
        int64_t gtid_24158 = sext_i32_i64(flat_segment_id_31457);
        int64_t gtid_24166;
        float x_acc_31459;
        int64_t chunk_sizze_31460;
        
        chunk_sizze_31460 = smin64(elements_per_thread_31437,
                                   sdiv_up64(res_20413 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31458)),
                                             threads_per_segment_31440));
        
        float x_24217;
        float x_24218;
        
        // neutral-initialise the accumulators
        {
            x_acc_31459 = 0.0F;
        }
        for (int64_t i_31464 = 0; i_31464 < chunk_sizze_31460; i_31464++) {
            gtid_24166 = sext_i32_i64(sext_i64_i32(global_tid_31458)) +
                threads_per_segment_31440 * i_31464;
            // apply map function
            {
                int32_t res_24221 = ((__global
                                      int32_t *) mem_30499)[gtid_24158];
                int32_t index_primexp_28754 = sext_i64_i32(gtid_24166);
                bool cond_24223 = slt32(index_primexp_28754, res_24221);
                float res_24224;
                
                if (cond_24223) {
                    int64_t i_24225 = sext_i32_i64(index_primexp_28754);
                    float res_24226 = ((__global
                                        float *) res_mem_30432)[gtid_24158 *
                                                                N_20399 +
                                                                i_24225];
                    
                    res_24224 = res_24226;
                } else {
                    res_24224 = 0.0F;
                }
                
                float res_24227 = res_24224 * res_24224;
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_24217 = x_acc_31459;
                }
                // load new values
                {
                    x_24218 = res_24227;
                }
                // apply reduction operator
                {
                    float res_24219 = x_24217 + x_24218;
                    
                    // store in accumulator
                    {
                        x_acc_31459 = res_24219;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_24217 = x_acc_31459;
            ((__local
              float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                x_24217;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31465;
        int32_t skip_waves_31466;
        
        skip_waves_31466 = 1;
        
        float x_31461;
        float x_31462;
        
        offset_31465 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31446,
                      sext_i64_i32(segred_group_sizze_24213))) {
                x_31461 = ((__local
                            float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                        offset_31465)];
            }
        }
        offset_31465 = 1;
        while (slt32(offset_31465, wave_sizze_31448)) {
            if (slt32(local_tid_31446 + offset_31465,
                      sext_i64_i32(segred_group_sizze_24213)) &&
                ((local_tid_31446 - squot32(local_tid_31446, wave_sizze_31448) *
                  wave_sizze_31448) & (2 * offset_31465 - 1)) == 0) {
                // read array element
                {
                    x_31462 = ((volatile __local
                                float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                            offset_31465)];
                }
                // apply reduction operation
                {
                    float res_31463 = x_31461 + x_31462;
                    
                    x_31461 = res_31463;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                        x_31461;
                }
            }
            offset_31465 *= 2;
        }
        while (slt32(skip_waves_31466,
                     squot32(sext_i64_i32(segred_group_sizze_24213) +
                             wave_sizze_31448 - 1, wave_sizze_31448))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31465 = skip_waves_31466 * wave_sizze_31448;
            if (slt32(local_tid_31446 + offset_31465,
                      sext_i64_i32(segred_group_sizze_24213)) &&
                ((local_tid_31446 - squot32(local_tid_31446, wave_sizze_31448) *
                  wave_sizze_31448) == 0 && (squot32(local_tid_31446,
                                                     wave_sizze_31448) & (2 *
                                                                          skip_waves_31466 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31462 = ((__local
                                float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                            offset_31465)];
                }
                // apply reduction operation
                {
                    float res_31463 = x_31461 + x_31462;
                    
                    x_31461 = res_31463;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                        x_31461;
                }
            }
            skip_waves_31466 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31446) == 0) {
                x_acc_31459 = x_31461;
            }
        }
        if (groups_per_segment_31436 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31446 == 0) {
                    ((__global float *) mem_30502)[gtid_24158] = x_acc_31459;
                }
            }
        } else {
            int32_t old_counter_31467;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31446 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31441)[sext_i32_i64(virt_group_id_31456) *
                                                        segred_group_sizze_24213] =
                        x_acc_31459;
                    mem_fence_global();
                    old_counter_31467 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31443)[sext_i32_i64(srem32(flat_segment_id_31457,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31452)[0] =
                        old_counter_31467 == groups_per_segment_31436 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31468;
            
            is_last_group_31468 = ((__local bool *) sync_arr_mem_31452)[0];
            if (is_last_group_31468) {
                if (local_tid_31446 == 0) {
                    old_counter_31467 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31443)[sext_i32_i64(srem32(flat_segment_id_31457,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31436));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31469 =
                            sdiv_up64(groups_per_segment_31436,
                                      segred_group_sizze_24213);
                    
                    x_24217 = 0.0F;
                    for (int64_t i_31470 = 0; i_31470 < read_per_thread_31469;
                         i_31470++) {
                        int64_t group_res_id_31471 =
                                sext_i32_i64(local_tid_31446) *
                                read_per_thread_31469 + i_31470;
                        int64_t index_of_group_res_31472 =
                                sext_i32_i64(flat_segment_id_31457) *
                                groups_per_segment_31436 + group_res_id_31471;
                        
                        if (slt64(group_res_id_31471,
                                  groups_per_segment_31436)) {
                            x_24218 = ((__global
                                        float *) group_res_arr_mem_31441)[index_of_group_res_31472 *
                                                                          segred_group_sizze_24213];
                            
                            float res_24219;
                            
                            res_24219 = x_24217 + x_24218;
                            x_24217 = res_24219;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                    x_24217;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31473;
                    int32_t skip_waves_31474;
                    
                    skip_waves_31474 = 1;
                    
                    float x_31461;
                    float x_31462;
                    
                    offset_31473 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31446,
                                  sext_i64_i32(segred_group_sizze_24213))) {
                            x_31461 = ((__local
                                        float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                                    offset_31473)];
                        }
                    }
                    offset_31473 = 1;
                    while (slt32(offset_31473, wave_sizze_31448)) {
                        if (slt32(local_tid_31446 + offset_31473,
                                  sext_i64_i32(segred_group_sizze_24213)) &&
                            ((local_tid_31446 - squot32(local_tid_31446,
                                                        wave_sizze_31448) *
                              wave_sizze_31448) & (2 * offset_31473 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31462 = ((volatile __local
                                            float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                                        offset_31473)];
                            }
                            // apply reduction operation
                            {
                                float res_31463 = x_31461 + x_31462;
                                
                                x_31461 = res_31463;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                                    x_31461;
                            }
                        }
                        offset_31473 *= 2;
                    }
                    while (slt32(skip_waves_31474,
                                 squot32(sext_i64_i32(segred_group_sizze_24213) +
                                         wave_sizze_31448 - 1,
                                         wave_sizze_31448))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31473 = skip_waves_31474 * wave_sizze_31448;
                        if (slt32(local_tid_31446 + offset_31473,
                                  sext_i64_i32(segred_group_sizze_24213)) &&
                            ((local_tid_31446 - squot32(local_tid_31446,
                                                        wave_sizze_31448) *
                              wave_sizze_31448) == 0 &&
                             (squot32(local_tid_31446, wave_sizze_31448) & (2 *
                                                                            skip_waves_31474 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31462 = ((__local
                                            float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446 +
                                                                        offset_31473)];
                            }
                            // apply reduction operation
                            {
                                float res_31463 = x_31461 + x_31462;
                                
                                x_31461 = res_31463;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31450)[sext_i32_i64(local_tid_31446)] =
                                    x_31461;
                            }
                        }
                        skip_waves_31474 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31446 == 0) {
                            ((__global float *) mem_30502)[gtid_24158] =
                                x_31461;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24213
}
__kernel void mainDetailedzisegred_large_24188(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31392_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31390_backing_aligned_1,
                                               int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t num_groups_24200,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *mem_30499,
                                               int64_t groups_per_segment_31376,
                                               int64_t elements_per_thread_31377,
                                               int64_t virt_num_groups_31378,
                                               int64_t threads_per_segment_31380,
                                               __global
                                               unsigned char *group_res_arr_mem_31381,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31383)
{
    #define segred_group_sizze_24199 (mainDetailedzisegred_group_sizze_24182)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31392_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31392_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31390_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31390_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31385;
    int32_t local_tid_31386;
    int64_t group_sizze_31389;
    int32_t wave_sizze_31388;
    int32_t group_tid_31387;
    
    global_tid_31385 = get_global_id(0);
    local_tid_31386 = get_local_id(0);
    group_sizze_31389 = get_local_size(0);
    wave_sizze_31388 = LOCKSTEP_WIDTH;
    group_tid_31387 = get_group_id(0);
    
    int32_t phys_tid_24188;
    
    phys_tid_24188 = global_tid_31385;
    
    __local char *red_arr_mem_31390;
    
    red_arr_mem_31390 = (__local char *) red_arr_mem_31390_backing_0;
    
    __local char *sync_arr_mem_31392;
    
    sync_arr_mem_31392 = (__local char *) sync_arr_mem_31392_backing_1;
    
    int32_t phys_group_id_31394;
    
    phys_group_id_31394 = get_group_id(0);
    for (int32_t i_31395 = 0; i_31395 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31378) - phys_group_id_31394,
                   sext_i64_i32(num_groups_24200)); i_31395++) {
        int32_t virt_group_id_31396 = phys_group_id_31394 + i_31395 *
                sext_i64_i32(num_groups_24200);
        int32_t flat_segment_id_31397 = squot32(virt_group_id_31396,
                                                sext_i64_i32(groups_per_segment_31376));
        int64_t global_tid_31398 = srem64(sext_i32_i64(virt_group_id_31396) *
                                          segred_group_sizze_24199 +
                                          sext_i32_i64(local_tid_31386),
                                          segred_group_sizze_24199 *
                                          groups_per_segment_31376);
        int64_t gtid_24179 = sext_i32_i64(flat_segment_id_31397);
        int64_t gtid_24187;
        int32_t x_acc_31399;
        int64_t chunk_sizze_31400;
        
        chunk_sizze_31400 = smin64(elements_per_thread_31377,
                                   sdiv_up64(res_20413 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31398)),
                                             threads_per_segment_31380));
        
        int32_t x_24203;
        int32_t x_24204;
        
        // neutral-initialise the accumulators
        {
            x_acc_31399 = 0;
        }
        for (int64_t i_31404 = 0; i_31404 < chunk_sizze_31400; i_31404++) {
            gtid_24187 = sext_i32_i64(sext_i64_i32(global_tid_31398)) +
                threads_per_segment_31380 * i_31404;
            // apply map function
            {
                float x_24207 = ((__global
                                  float *) images_mem_29973)[gtid_24179 *
                                                             N_20401 +
                                                             gtid_24187];
                bool res_24208;
                
                res_24208 = futrts_isnan32(x_24207);
                
                bool cond_24209 = !res_24208;
                int32_t res_24210 = btoi_bool_i32(cond_24209);
                
                // save map-out results
                { }
                // load accumulator
                {
                    x_24203 = x_acc_31399;
                }
                // load new values
                {
                    x_24204 = res_24210;
                }
                // apply reduction operator
                {
                    int32_t res_24205 = add32(x_24203, x_24204);
                    
                    // store in accumulator
                    {
                        x_acc_31399 = res_24205;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_24203 = x_acc_31399;
            ((__local
              int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                x_24203;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31405;
        int32_t skip_waves_31406;
        
        skip_waves_31406 = 1;
        
        int32_t x_31401;
        int32_t x_31402;
        
        offset_31405 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31386,
                      sext_i64_i32(segred_group_sizze_24199))) {
                x_31401 = ((__local
                            int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                          offset_31405)];
            }
        }
        offset_31405 = 1;
        while (slt32(offset_31405, wave_sizze_31388)) {
            if (slt32(local_tid_31386 + offset_31405,
                      sext_i64_i32(segred_group_sizze_24199)) &&
                ((local_tid_31386 - squot32(local_tid_31386, wave_sizze_31388) *
                  wave_sizze_31388) & (2 * offset_31405 - 1)) == 0) {
                // read array element
                {
                    x_31402 = ((volatile __local
                                int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                              offset_31405)];
                }
                // apply reduction operation
                {
                    int32_t res_31403 = add32(x_31401, x_31402);
                    
                    x_31401 = res_31403;
                }
                // write result of operation
                {
                    ((volatile __local
                      int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                        x_31401;
                }
            }
            offset_31405 *= 2;
        }
        while (slt32(skip_waves_31406,
                     squot32(sext_i64_i32(segred_group_sizze_24199) +
                             wave_sizze_31388 - 1, wave_sizze_31388))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31405 = skip_waves_31406 * wave_sizze_31388;
            if (slt32(local_tid_31386 + offset_31405,
                      sext_i64_i32(segred_group_sizze_24199)) &&
                ((local_tid_31386 - squot32(local_tid_31386, wave_sizze_31388) *
                  wave_sizze_31388) == 0 && (squot32(local_tid_31386,
                                                     wave_sizze_31388) & (2 *
                                                                          skip_waves_31406 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31402 = ((__local
                                int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                              offset_31405)];
                }
                // apply reduction operation
                {
                    int32_t res_31403 = add32(x_31401, x_31402);
                    
                    x_31401 = res_31403;
                }
                // write result of operation
                {
                    ((__local
                      int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                        x_31401;
                }
            }
            skip_waves_31406 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31386) == 0) {
                x_acc_31399 = x_31401;
            }
        }
        if (groups_per_segment_31376 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31386 == 0) {
                    ((__global int32_t *) mem_30499)[gtid_24179] = x_acc_31399;
                }
            }
        } else {
            int32_t old_counter_31407;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31386 == 0) {
                    ((__global
                      int32_t *) group_res_arr_mem_31381)[sext_i32_i64(virt_group_id_31396) *
                                                          segred_group_sizze_24199] =
                        x_acc_31399;
                    mem_fence_global();
                    old_counter_31407 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31383)[sext_i32_i64(srem32(flat_segment_id_31397,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31392)[0] =
                        old_counter_31407 == groups_per_segment_31376 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31408;
            
            is_last_group_31408 = ((__local bool *) sync_arr_mem_31392)[0];
            if (is_last_group_31408) {
                if (local_tid_31386 == 0) {
                    old_counter_31407 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31383)[sext_i32_i64(srem32(flat_segment_id_31397,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31376));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31409 =
                            sdiv_up64(groups_per_segment_31376,
                                      segred_group_sizze_24199);
                    
                    x_24203 = 0;
                    for (int64_t i_31410 = 0; i_31410 < read_per_thread_31409;
                         i_31410++) {
                        int64_t group_res_id_31411 =
                                sext_i32_i64(local_tid_31386) *
                                read_per_thread_31409 + i_31410;
                        int64_t index_of_group_res_31412 =
                                sext_i32_i64(flat_segment_id_31397) *
                                groups_per_segment_31376 + group_res_id_31411;
                        
                        if (slt64(group_res_id_31411,
                                  groups_per_segment_31376)) {
                            x_24204 = ((__global
                                        int32_t *) group_res_arr_mem_31381)[index_of_group_res_31412 *
                                                                            segred_group_sizze_24199];
                            
                            int32_t res_24205;
                            
                            res_24205 = add32(x_24203, x_24204);
                            x_24203 = res_24205;
                        }
                    }
                }
                ((__local
                  int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                    x_24203;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31413;
                    int32_t skip_waves_31414;
                    
                    skip_waves_31414 = 1;
                    
                    int32_t x_31401;
                    int32_t x_31402;
                    
                    offset_31413 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31386,
                                  sext_i64_i32(segred_group_sizze_24199))) {
                            x_31401 = ((__local
                                        int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                                      offset_31413)];
                        }
                    }
                    offset_31413 = 1;
                    while (slt32(offset_31413, wave_sizze_31388)) {
                        if (slt32(local_tid_31386 + offset_31413,
                                  sext_i64_i32(segred_group_sizze_24199)) &&
                            ((local_tid_31386 - squot32(local_tid_31386,
                                                        wave_sizze_31388) *
                              wave_sizze_31388) & (2 * offset_31413 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31402 = ((volatile __local
                                            int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                                          offset_31413)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_31403 = add32(x_31401, x_31402);
                                
                                x_31401 = res_31403;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                                    x_31401;
                            }
                        }
                        offset_31413 *= 2;
                    }
                    while (slt32(skip_waves_31414,
                                 squot32(sext_i64_i32(segred_group_sizze_24199) +
                                         wave_sizze_31388 - 1,
                                         wave_sizze_31388))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31413 = skip_waves_31414 * wave_sizze_31388;
                        if (slt32(local_tid_31386 + offset_31413,
                                  sext_i64_i32(segred_group_sizze_24199)) &&
                            ((local_tid_31386 - squot32(local_tid_31386,
                                                        wave_sizze_31388) *
                              wave_sizze_31388) == 0 &&
                             (squot32(local_tid_31386, wave_sizze_31388) & (2 *
                                                                            skip_waves_31414 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31402 = ((__local
                                            int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386 +
                                                                          offset_31413)];
                            }
                            // apply reduction operation
                            {
                                int32_t res_31403 = add32(x_31401, x_31402);
                                
                                x_31401 = res_31403;
                            }
                            // write result of operation
                            {
                                ((__local
                                  int32_t *) red_arr_mem_31390)[sext_i32_i64(local_tid_31386)] =
                                    x_31401;
                            }
                        }
                        skip_waves_31414 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31386 == 0) {
                            ((__global int32_t *) mem_30499)[gtid_24179] =
                                x_31401;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24199
}
__kernel void mainDetailedzisegred_large_24339(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31561_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31559_backing_aligned_1,
                                               int64_t N_20399,
                                               int64_t res_20761,
                                               int64_t num_groups_24357,
                                               __global
                                               unsigned char *res_mem_30432,
                                               __global
                                               unsigned char *res_mem_30511,
                                               __global
                                               unsigned char *res_mem_30512,
                                               __global
                                               unsigned char *mem_30561,
                                               int64_t groups_per_segment_31545,
                                               int64_t elements_per_thread_31546,
                                               int64_t virt_num_groups_31547,
                                               int64_t threads_per_segment_31549,
                                               __global
                                               unsigned char *group_res_arr_mem_31550,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31552)
{
    #define segred_group_sizze_24356 (mainDetailedzisegred_group_sizze_24333)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31561_backing_1 =
                          (__local volatile
                           char *) sync_arr_mem_31561_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31559_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31559_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31554;
    int32_t local_tid_31555;
    int64_t group_sizze_31558;
    int32_t wave_sizze_31557;
    int32_t group_tid_31556;
    
    global_tid_31554 = get_global_id(0);
    local_tid_31555 = get_local_id(0);
    group_sizze_31558 = get_local_size(0);
    wave_sizze_31557 = LOCKSTEP_WIDTH;
    group_tid_31556 = get_group_id(0);
    
    int32_t phys_tid_24339;
    
    phys_tid_24339 = global_tid_31554;
    
    __local char *red_arr_mem_31559;
    
    red_arr_mem_31559 = (__local char *) red_arr_mem_31559_backing_0;
    
    __local char *sync_arr_mem_31561;
    
    sync_arr_mem_31561 = (__local char *) sync_arr_mem_31561_backing_1;
    
    int32_t phys_group_id_31563;
    
    phys_group_id_31563 = get_group_id(0);
    for (int32_t i_31564 = 0; i_31564 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31547) - phys_group_id_31563,
                   sext_i64_i32(num_groups_24357)); i_31564++) {
        int32_t virt_group_id_31565 = phys_group_id_31563 + i_31564 *
                sext_i64_i32(num_groups_24357);
        int32_t flat_segment_id_31566 = squot32(virt_group_id_31565,
                                                sext_i64_i32(groups_per_segment_31545));
        int64_t global_tid_31567 = srem64(sext_i32_i64(virt_group_id_31565) *
                                          segred_group_sizze_24356 +
                                          sext_i32_i64(local_tid_31555),
                                          segred_group_sizze_24356 *
                                          groups_per_segment_31545);
        int64_t gtid_24330 = sext_i32_i64(flat_segment_id_31566);
        int64_t gtid_24338;
        float x_acc_31568;
        int64_t chunk_sizze_31569;
        
        chunk_sizze_31569 = smin64(elements_per_thread_31546,
                                   sdiv_up64(res_20761 -
                                             sext_i32_i64(sext_i64_i32(global_tid_31567)),
                                             threads_per_segment_31549));
        
        float x_24360;
        float x_24361;
        
        // neutral-initialise the accumulators
        {
            x_acc_31568 = 0.0F;
        }
        for (int64_t i_31573 = 0; i_31573 < chunk_sizze_31569; i_31573++) {
            gtid_24338 = sext_i32_i64(sext_i64_i32(global_tid_31567)) +
                threads_per_segment_31549 * i_31573;
            // apply map function
            {
                int32_t x_24365 = ((__global
                                    int32_t *) res_mem_30511)[gtid_24330];
                int32_t index_primexp_28759 = sext_i64_i32(gtid_24338);
                bool cond_24367 = slt32(index_primexp_28759, x_24365);
                float res_24368;
                
                if (cond_24367) {
                    int32_t x_24364 = ((__global
                                        int32_t *) res_mem_30512)[gtid_24330];
                    int32_t x_24369 = add32(x_24364, index_primexp_28759);
                    int32_t x_24370 = sub32(x_24369, x_24365);
                    int32_t i_24371 = add32(1, x_24370);
                    int64_t i_24372 = sext_i32_i64(i_24371);
                    float res_24373 = ((__global
                                        float *) res_mem_30432)[gtid_24330 *
                                                                N_20399 +
                                                                i_24372];
                    
                    res_24368 = res_24373;
                } else {
                    res_24368 = 0.0F;
                }
                // save map-out results
                { }
                // load accumulator
                {
                    x_24360 = x_acc_31568;
                }
                // load new values
                {
                    x_24361 = res_24368;
                }
                // apply reduction operator
                {
                    float res_24362 = x_24360 + x_24361;
                    
                    // store in accumulator
                    {
                        x_acc_31568 = res_24362;
                    }
                }
            }
        }
        // to reduce current chunk, first store our result in memory
        {
            x_24360 = x_acc_31568;
            ((__local
              float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                x_24360;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        
        int32_t offset_31574;
        int32_t skip_waves_31575;
        
        skip_waves_31575 = 1;
        
        float x_31570;
        float x_31571;
        
        offset_31574 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31555,
                      sext_i64_i32(segred_group_sizze_24356))) {
                x_31570 = ((__local
                            float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                        offset_31574)];
            }
        }
        offset_31574 = 1;
        while (slt32(offset_31574, wave_sizze_31557)) {
            if (slt32(local_tid_31555 + offset_31574,
                      sext_i64_i32(segred_group_sizze_24356)) &&
                ((local_tid_31555 - squot32(local_tid_31555, wave_sizze_31557) *
                  wave_sizze_31557) & (2 * offset_31574 - 1)) == 0) {
                // read array element
                {
                    x_31571 = ((volatile __local
                                float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                            offset_31574)];
                }
                // apply reduction operation
                {
                    float res_31572 = x_31570 + x_31571;
                    
                    x_31570 = res_31572;
                }
                // write result of operation
                {
                    ((volatile __local
                      float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                        x_31570;
                }
            }
            offset_31574 *= 2;
        }
        while (slt32(skip_waves_31575,
                     squot32(sext_i64_i32(segred_group_sizze_24356) +
                             wave_sizze_31557 - 1, wave_sizze_31557))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31574 = skip_waves_31575 * wave_sizze_31557;
            if (slt32(local_tid_31555 + offset_31574,
                      sext_i64_i32(segred_group_sizze_24356)) &&
                ((local_tid_31555 - squot32(local_tid_31555, wave_sizze_31557) *
                  wave_sizze_31557) == 0 && (squot32(local_tid_31555,
                                                     wave_sizze_31557) & (2 *
                                                                          skip_waves_31575 -
                                                                          1)) ==
                 0)) {
                // read array element
                {
                    x_31571 = ((__local
                                float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                            offset_31574)];
                }
                // apply reduction operation
                {
                    float res_31572 = x_31570 + x_31571;
                    
                    x_31570 = res_31572;
                }
                // write result of operation
                {
                    ((__local
                      float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                        x_31570;
                }
            }
            skip_waves_31575 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // first thread saves the result in accumulator
        {
            if (sext_i32_i64(local_tid_31555) == 0) {
                x_acc_31568 = x_31570;
            }
        }
        if (groups_per_segment_31545 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31555 == 0) {
                    ((__global float *) mem_30561)[gtid_24330] = x_acc_31568;
                }
            }
        } else {
            int32_t old_counter_31576;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31555 == 0) {
                    ((__global
                      float *) group_res_arr_mem_31550)[sext_i32_i64(virt_group_id_31565) *
                                                        segred_group_sizze_24356] =
                        x_acc_31568;
                    mem_fence_global();
                    old_counter_31576 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31552)[sext_i32_i64(srem32(flat_segment_id_31566,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31561)[0] =
                        old_counter_31576 == groups_per_segment_31545 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31577;
            
            is_last_group_31577 = ((__local bool *) sync_arr_mem_31561)[0];
            if (is_last_group_31577) {
                if (local_tid_31555 == 0) {
                    old_counter_31576 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31552)[sext_i32_i64(srem32(flat_segment_id_31566,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31545));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31578 =
                            sdiv_up64(groups_per_segment_31545,
                                      segred_group_sizze_24356);
                    
                    x_24360 = 0.0F;
                    for (int64_t i_31579 = 0; i_31579 < read_per_thread_31578;
                         i_31579++) {
                        int64_t group_res_id_31580 =
                                sext_i32_i64(local_tid_31555) *
                                read_per_thread_31578 + i_31579;
                        int64_t index_of_group_res_31581 =
                                sext_i32_i64(flat_segment_id_31566) *
                                groups_per_segment_31545 + group_res_id_31580;
                        
                        if (slt64(group_res_id_31580,
                                  groups_per_segment_31545)) {
                            x_24361 = ((__global
                                        float *) group_res_arr_mem_31550)[index_of_group_res_31581 *
                                                                          segred_group_sizze_24356];
                            
                            float res_24362;
                            
                            res_24362 = x_24360 + x_24361;
                            x_24360 = res_24362;
                        }
                    }
                }
                ((__local
                  float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                    x_24360;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31582;
                    int32_t skip_waves_31583;
                    
                    skip_waves_31583 = 1;
                    
                    float x_31570;
                    float x_31571;
                    
                    offset_31582 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31555,
                                  sext_i64_i32(segred_group_sizze_24356))) {
                            x_31570 = ((__local
                                        float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                                    offset_31582)];
                        }
                    }
                    offset_31582 = 1;
                    while (slt32(offset_31582, wave_sizze_31557)) {
                        if (slt32(local_tid_31555 + offset_31582,
                                  sext_i64_i32(segred_group_sizze_24356)) &&
                            ((local_tid_31555 - squot32(local_tid_31555,
                                                        wave_sizze_31557) *
                              wave_sizze_31557) & (2 * offset_31582 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31571 = ((volatile __local
                                            float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                                        offset_31582)];
                            }
                            // apply reduction operation
                            {
                                float res_31572 = x_31570 + x_31571;
                                
                                x_31570 = res_31572;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                                    x_31570;
                            }
                        }
                        offset_31582 *= 2;
                    }
                    while (slt32(skip_waves_31583,
                                 squot32(sext_i64_i32(segred_group_sizze_24356) +
                                         wave_sizze_31557 - 1,
                                         wave_sizze_31557))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31582 = skip_waves_31583 * wave_sizze_31557;
                        if (slt32(local_tid_31555 + offset_31582,
                                  sext_i64_i32(segred_group_sizze_24356)) &&
                            ((local_tid_31555 - squot32(local_tid_31555,
                                                        wave_sizze_31557) *
                              wave_sizze_31557) == 0 &&
                             (squot32(local_tid_31555, wave_sizze_31557) & (2 *
                                                                            skip_waves_31583 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31571 = ((__local
                                            float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555 +
                                                                        offset_31582)];
                            }
                            // apply reduction operation
                            {
                                float res_31572 = x_31570 + x_31571;
                                
                                x_31570 = res_31572;
                            }
                            // write result of operation
                            {
                                ((__local
                                  float *) red_arr_mem_31559)[sext_i32_i64(local_tid_31555)] =
                                    x_31570;
                            }
                        }
                        skip_waves_31583 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31555 == 0) {
                            ((__global float *) mem_30561)[gtid_24330] =
                                x_31570;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24356
}
__kernel void mainDetailedzisegred_large_24938(__global int *global_failure,
                                               __local volatile
                                               int64_t *sync_arr_mem_31742_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31740_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_31738_backing_aligned_2,
                                               __local volatile
                                               int64_t *red_arr_mem_31736_backing_aligned_3,
                                               int64_t iota32_arg_20783,
                                               int64_t num_groups_25111,
                                               __global
                                               unsigned char *mem_30567,
                                               __global
                                               unsigned char *mem_30593,
                                               __global
                                               unsigned char *mem_30595,
                                               __global
                                               unsigned char *mem_30599,
                                               __global
                                               unsigned char *mem_30602,
                                               __global
                                               unsigned char *mem_30604,
                                               __global
                                               unsigned char *mem_30606,
                                               __global
                                               unsigned char *mem_30609,
                                               int64_t groups_per_segment_31718,
                                               int64_t elements_per_thread_31719,
                                               int64_t virt_num_groups_31720,
                                               __global
                                               unsigned char *group_res_arr_mem_31723,
                                               __global
                                               unsigned char *group_res_arr_mem_31725,
                                               __global
                                               unsigned char *group_res_arr_mem_31727,
                                               __global
                                               unsigned char *mainDetailedzicounter_mem_31729)
{
    #define segred_group_sizze_25110 (mainDetailedzisegred_group_sizze_24932)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict sync_arr_mem_31742_backing_3 =
                          (__local volatile
                           char *) sync_arr_mem_31742_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31740_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31740_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31738_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31738_backing_aligned_2;
    __local volatile char *restrict red_arr_mem_31736_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31736_backing_aligned_3;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31731;
    int32_t local_tid_31732;
    int64_t group_sizze_31735;
    int32_t wave_sizze_31734;
    int32_t group_tid_31733;
    
    global_tid_31731 = get_global_id(0);
    local_tid_31732 = get_local_id(0);
    group_sizze_31735 = get_local_size(0);
    wave_sizze_31734 = LOCKSTEP_WIDTH;
    group_tid_31733 = get_group_id(0);
    
    int32_t phys_tid_24938;
    
    phys_tid_24938 = global_tid_31731;
    
    __local char *red_arr_mem_31736;
    
    red_arr_mem_31736 = (__local char *) red_arr_mem_31736_backing_0;
    
    __local char *red_arr_mem_31738;
    
    red_arr_mem_31738 = (__local char *) red_arr_mem_31738_backing_1;
    
    __local char *red_arr_mem_31740;
    
    red_arr_mem_31740 = (__local char *) red_arr_mem_31740_backing_2;
    
    __local char *sync_arr_mem_31742;
    
    sync_arr_mem_31742 = (__local char *) sync_arr_mem_31742_backing_3;
    
    int32_t phys_group_id_31744;
    
    phys_group_id_31744 = get_group_id(0);
    for (int32_t i_31745 = 0; i_31745 <
         sdiv_up32(sext_i64_i32(virt_num_groups_31720) - phys_group_id_31744,
                   sext_i64_i32(num_groups_25111)); i_31745++) {
        int32_t virt_group_id_31746 = phys_group_id_31744 + i_31745 *
                sext_i64_i32(num_groups_25111);
        int32_t flat_segment_id_31747 = squot32(virt_group_id_31746,
                                                sext_i64_i32(groups_per_segment_31718));
        int64_t global_tid_31748 = srem64(sext_i32_i64(virt_group_id_31746) *
                                          segred_group_sizze_25110 +
                                          sext_i32_i64(local_tid_31732),
                                          segred_group_sizze_25110 *
                                          groups_per_segment_31718);
        int64_t gtid_24929 = sext_i32_i64(flat_segment_id_31747);
        int64_t gtid_24937;
        bool x_acc_31749;
        int32_t x_acc_31750;
        float x_acc_31751;
        int64_t chunk_sizze_31752;
        int64_t starting_point_31753;
        
        starting_point_31753 = sext_i32_i64(sext_i64_i32(global_tid_31748)) *
            elements_per_thread_31719;
        
        int64_t remaining_elements_31754;
        
        remaining_elements_31754 = iota32_arg_20783 - starting_point_31753;
        if (sle64(remaining_elements_31754, 0) || sle64(iota32_arg_20783,
                                                        starting_point_31753)) {
            chunk_sizze_31752 = 0;
        } else {
            if (slt64(iota32_arg_20783,
                      (sext_i32_i64(sext_i64_i32(global_tid_31748)) + 1) *
                      elements_per_thread_31719)) {
                chunk_sizze_31752 = iota32_arg_20783 -
                    sext_i32_i64(sext_i64_i32(global_tid_31748)) *
                    elements_per_thread_31719;
            } else {
                chunk_sizze_31752 = elements_per_thread_31719;
            }
        }
        
        bool x_25117;
        int32_t x_25118;
        float x_25119;
        bool x_25120;
        int32_t x_25121;
        float x_25122;
        
        // neutral-initialise the accumulators
        {
            x_acc_31749 = 0;
            x_acc_31750 = -1;
            x_acc_31751 = 0.0F;
        }
        for (int64_t i_31769 = 0; i_31769 < elements_per_thread_31719;
             i_31769++) {
            gtid_24937 = sext_i32_i64(local_tid_31732) +
                (sext_i32_i64(squot32(sext_i64_i32(global_tid_31748),
                                      sext_i64_i32(segred_group_sizze_25110))) *
                 elements_per_thread_31719 + i_31769) *
                segred_group_sizze_25110;
            if (slt64(gtid_24937, iota32_arg_20783)) {
                // apply map function
                {
                    int32_t y_25131 = ((__global
                                        int32_t *) mem_30595)[gtid_24929];
                    float y_25132 = ((__global float *) mem_30593)[gtid_24929];
                    float x_25136 = ((__global float *) mem_30599)[gtid_24929 *
                                                                   iota32_arg_20783 +
                                                                   gtid_24937];
                    float x_25137 = ((__global float *) mem_30567)[gtid_24937];
                    int32_t index_primexp_28776 = sext_i64_i32(gtid_24937);
                    float res_25140 = x_25136 / y_25132;
                    bool cond_25141 = slt32(index_primexp_28776, y_25131);
                    bool res_25142;
                    
                    res_25142 = futrts_isnan32(res_25140);
                    
                    bool res_25143 = !res_25142;
                    bool x_25144 = cond_25141 && res_25143;
                    float res_25145 = (float) fabs(res_25140);
                    bool res_25146 = x_25137 < res_25145;
                    bool x_25147 = x_25144 && res_25146;
                    float res_25148;
                    
                    if (cond_25141) {
                        res_25148 = res_25140;
                    } else {
                        res_25148 = 0.0F;
                    }
                    // save map-out results
                    {
                        ((__global float *) mem_30609)[gtid_24929 *
                                                       iota32_arg_20783 +
                                                       gtid_24937] = res_25140;
                    }
                    // load accumulator
                    {
                        x_25117 = x_acc_31749;
                        x_25118 = x_acc_31750;
                        x_25119 = x_acc_31751;
                    }
                    // load new values
                    {
                        x_25120 = x_25147;
                        x_25121 = index_primexp_28776;
                        x_25122 = res_25148;
                    }
                    // apply reduction operator
                    {
                        bool res_25123;
                        int32_t res_25124;
                        
                        if (x_25117) {
                            res_25123 = x_25117;
                            res_25124 = x_25118;
                        } else {
                            bool x_25125 = x_25120 && x_25120;
                            bool x_25126 = !x_25120;
                            bool y_25127 = x_25117 && x_25126;
                            bool res_25128 = x_25125 || y_25127;
                            int32_t res_25129;
                            
                            if (x_25120) {
                                res_25129 = x_25121;
                            } else {
                                res_25129 = x_25118;
                            }
                            res_25123 = res_25128;
                            res_25124 = res_25129;
                        }
                        
                        float res_25130 = x_25119 + x_25122;
                        
                        // store in accumulator
                        {
                            x_acc_31749 = res_25123;
                            x_acc_31750 = res_25124;
                            x_acc_31751 = res_25130;
                        }
                    }
                }
            }
            // to reduce current chunk, first store our result in memory
            {
                x_25117 = x_acc_31749;
                x_25118 = x_acc_31750;
                x_25119 = x_acc_31751;
                ((__local
                  bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                    x_25117;
                ((__local
                  int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                    x_25118;
                ((__local
                  float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                    x_25119;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            
            int32_t offset_31770;
            int32_t skip_waves_31771;
            
            skip_waves_31771 = 1;
            
            bool x_31755;
            int32_t x_31756;
            float x_31757;
            bool x_31758;
            int32_t x_31759;
            float x_31760;
            
            offset_31770 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31732,
                          sext_i64_i32(segred_group_sizze_25110))) {
                    x_31755 = ((__local
                                bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                           offset_31770)];
                    x_31756 = ((__local
                                int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                              offset_31770)];
                    x_31757 = ((__local
                                float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                            offset_31770)];
                }
            }
            offset_31770 = 1;
            while (slt32(offset_31770, wave_sizze_31734)) {
                if (slt32(local_tid_31732 + offset_31770,
                          sext_i64_i32(segred_group_sizze_25110)) &&
                    ((local_tid_31732 - squot32(local_tid_31732,
                                                wave_sizze_31734) *
                      wave_sizze_31734) & (2 * offset_31770 - 1)) == 0) {
                    // read array element
                    {
                        x_31758 = ((volatile __local
                                    bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                               offset_31770)];
                        x_31759 = ((volatile __local
                                    int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                                  offset_31770)];
                        x_31760 = ((volatile __local
                                    float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                                offset_31770)];
                    }
                    // apply reduction operation
                    {
                        bool res_31761;
                        int32_t res_31762;
                        
                        if (x_31755) {
                            res_31761 = x_31755;
                            res_31762 = x_31756;
                        } else {
                            bool x_31763 = x_31758 && x_31758;
                            bool x_31764 = !x_31758;
                            bool y_31765 = x_31755 && x_31764;
                            bool res_31766 = x_31763 || y_31765;
                            int32_t res_31767;
                            
                            if (x_31758) {
                                res_31767 = x_31759;
                            } else {
                                res_31767 = x_31756;
                            }
                            res_31761 = res_31766;
                            res_31762 = res_31767;
                        }
                        
                        float res_31768 = x_31757 + x_31760;
                        
                        x_31755 = res_31761;
                        x_31756 = res_31762;
                        x_31757 = res_31768;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                            x_31755;
                        ((volatile __local
                          int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                            x_31756;
                        ((volatile __local
                          float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                            x_31757;
                    }
                }
                offset_31770 *= 2;
            }
            while (slt32(skip_waves_31771,
                         squot32(sext_i64_i32(segred_group_sizze_25110) +
                                 wave_sizze_31734 - 1, wave_sizze_31734))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_31770 = skip_waves_31771 * wave_sizze_31734;
                if (slt32(local_tid_31732 + offset_31770,
                          sext_i64_i32(segred_group_sizze_25110)) &&
                    ((local_tid_31732 - squot32(local_tid_31732,
                                                wave_sizze_31734) *
                      wave_sizze_31734) == 0 && (squot32(local_tid_31732,
                                                         wave_sizze_31734) &
                                                 (2 * skip_waves_31771 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_31758 = ((__local
                                    bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                               offset_31770)];
                        x_31759 = ((__local
                                    int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                                  offset_31770)];
                        x_31760 = ((__local
                                    float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                                offset_31770)];
                    }
                    // apply reduction operation
                    {
                        bool res_31761;
                        int32_t res_31762;
                        
                        if (x_31755) {
                            res_31761 = x_31755;
                            res_31762 = x_31756;
                        } else {
                            bool x_31763 = x_31758 && x_31758;
                            bool x_31764 = !x_31758;
                            bool y_31765 = x_31755 && x_31764;
                            bool res_31766 = x_31763 || y_31765;
                            int32_t res_31767;
                            
                            if (x_31758) {
                                res_31767 = x_31759;
                            } else {
                                res_31767 = x_31756;
                            }
                            res_31761 = res_31766;
                            res_31762 = res_31767;
                        }
                        
                        float res_31768 = x_31757 + x_31760;
                        
                        x_31755 = res_31761;
                        x_31756 = res_31762;
                        x_31757 = res_31768;
                    }
                    // write result of operation
                    {
                        ((__local
                          bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                            x_31755;
                        ((__local
                          int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                            x_31756;
                        ((__local
                          float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                            x_31757;
                    }
                }
                skip_waves_31771 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // first thread saves the result in accumulator
            {
                if (sext_i32_i64(local_tid_31732) == 0) {
                    x_acc_31749 = x_31755;
                    x_acc_31750 = x_31756;
                    x_acc_31751 = x_31757;
                }
            }
            // first thread keeps accumulator; others reset to neutral element
            {
                if (!(sext_i32_i64(local_tid_31732) == 0)) {
                    x_acc_31749 = 0;
                    x_acc_31750 = -1;
                    x_acc_31751 = 0.0F;
                }
            }
        }
        x_25117 = x_acc_31749;
        x_25118 = x_acc_31750;
        x_25119 = x_acc_31751;
        if (groups_per_segment_31718 == 1) {
            // first thread in group saves final result to memory
            {
                if (local_tid_31732 == 0) {
                    ((__global bool *) mem_30602)[gtid_24929] = x_acc_31749;
                    ((__global int32_t *) mem_30604)[gtid_24929] = x_acc_31750;
                    ((__global float *) mem_30606)[gtid_24929] = x_acc_31751;
                }
            }
        } else {
            int32_t old_counter_31772;
            
            // first thread in group saves group result to global memory
            {
                if (local_tid_31732 == 0) {
                    ((__global
                      bool *) group_res_arr_mem_31723)[sext_i32_i64(virt_group_id_31746) *
                                                       segred_group_sizze_25110] =
                        x_acc_31749;
                    ((__global
                      int32_t *) group_res_arr_mem_31725)[sext_i32_i64(virt_group_id_31746) *
                                                          segred_group_sizze_25110] =
                        x_acc_31750;
                    ((__global
                      float *) group_res_arr_mem_31727)[sext_i32_i64(virt_group_id_31746) *
                                                        segred_group_sizze_25110] =
                        x_acc_31751;
                    mem_fence_global();
                    old_counter_31772 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31729)[sext_i32_i64(srem32(flat_segment_id_31747,
                                                                                                             10240))],
                                              (int) 1);
                    ((__local bool *) sync_arr_mem_31742)[0] =
                        old_counter_31772 == groups_per_segment_31718 - 1;
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            
            bool is_last_group_31773;
            
            is_last_group_31773 = ((__local bool *) sync_arr_mem_31742)[0];
            if (is_last_group_31773) {
                if (local_tid_31732 == 0) {
                    old_counter_31772 =
                        atomic_add_i32_global(&((volatile __global
                                                 int *) mainDetailedzicounter_mem_31729)[sext_i32_i64(srem32(flat_segment_id_31747,
                                                                                                             10240))],
                                              (int) (0 -
                                                     groups_per_segment_31718));
                }
                // read in the per-group-results
                {
                    int64_t read_per_thread_31774 =
                            sdiv_up64(groups_per_segment_31718,
                                      segred_group_sizze_25110);
                    
                    x_25117 = 0;
                    x_25118 = -1;
                    x_25119 = 0.0F;
                    for (int64_t i_31775 = 0; i_31775 < read_per_thread_31774;
                         i_31775++) {
                        int64_t group_res_id_31776 =
                                sext_i32_i64(local_tid_31732) *
                                read_per_thread_31774 + i_31775;
                        int64_t index_of_group_res_31777 =
                                sext_i32_i64(flat_segment_id_31747) *
                                groups_per_segment_31718 + group_res_id_31776;
                        
                        if (slt64(group_res_id_31776,
                                  groups_per_segment_31718)) {
                            x_25120 = ((__global
                                        bool *) group_res_arr_mem_31723)[index_of_group_res_31777 *
                                                                         segred_group_sizze_25110];
                            x_25121 = ((__global
                                        int32_t *) group_res_arr_mem_31725)[index_of_group_res_31777 *
                                                                            segred_group_sizze_25110];
                            x_25122 = ((__global
                                        float *) group_res_arr_mem_31727)[index_of_group_res_31777 *
                                                                          segred_group_sizze_25110];
                            
                            bool res_25123;
                            int32_t res_25124;
                            
                            if (x_25117) {
                                res_25123 = x_25117;
                                res_25124 = x_25118;
                            } else {
                                bool x_25125 = x_25120 && x_25120;
                                bool x_25126 = !x_25120;
                                bool y_25127 = x_25117 && x_25126;
                                bool res_25128 = x_25125 || y_25127;
                                int32_t res_25129;
                                
                                if (x_25120) {
                                    res_25129 = x_25121;
                                } else {
                                    res_25129 = x_25118;
                                }
                                res_25123 = res_25128;
                                res_25124 = res_25129;
                            }
                            
                            float res_25130 = x_25119 + x_25122;
                            
                            x_25117 = res_25123;
                            x_25118 = res_25124;
                            x_25119 = res_25130;
                        }
                    }
                }
                ((__local
                  bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                    x_25117;
                ((__local
                  int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                    x_25118;
                ((__local
                  float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                    x_25119;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-group results
                {
                    int32_t offset_31778;
                    int32_t skip_waves_31779;
                    
                    skip_waves_31779 = 1;
                    
                    bool x_31755;
                    int32_t x_31756;
                    float x_31757;
                    bool x_31758;
                    int32_t x_31759;
                    float x_31760;
                    
                    offset_31778 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31732,
                                  sext_i64_i32(segred_group_sizze_25110))) {
                            x_31755 = ((__local
                                        bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                                   offset_31778)];
                            x_31756 = ((__local
                                        int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                                      offset_31778)];
                            x_31757 = ((__local
                                        float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                                    offset_31778)];
                        }
                    }
                    offset_31778 = 1;
                    while (slt32(offset_31778, wave_sizze_31734)) {
                        if (slt32(local_tid_31732 + offset_31778,
                                  sext_i64_i32(segred_group_sizze_25110)) &&
                            ((local_tid_31732 - squot32(local_tid_31732,
                                                        wave_sizze_31734) *
                              wave_sizze_31734) & (2 * offset_31778 - 1)) ==
                            0) {
                            // read array element
                            {
                                x_31758 = ((volatile __local
                                            bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                                       offset_31778)];
                                x_31759 = ((volatile __local
                                            int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                                          offset_31778)];
                                x_31760 = ((volatile __local
                                            float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                                        offset_31778)];
                            }
                            // apply reduction operation
                            {
                                bool res_31761;
                                int32_t res_31762;
                                
                                if (x_31755) {
                                    res_31761 = x_31755;
                                    res_31762 = x_31756;
                                } else {
                                    bool x_31763 = x_31758 && x_31758;
                                    bool x_31764 = !x_31758;
                                    bool y_31765 = x_31755 && x_31764;
                                    bool res_31766 = x_31763 || y_31765;
                                    int32_t res_31767;
                                    
                                    if (x_31758) {
                                        res_31767 = x_31759;
                                    } else {
                                        res_31767 = x_31756;
                                    }
                                    res_31761 = res_31766;
                                    res_31762 = res_31767;
                                }
                                
                                float res_31768 = x_31757 + x_31760;
                                
                                x_31755 = res_31761;
                                x_31756 = res_31762;
                                x_31757 = res_31768;
                            }
                            // write result of operation
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                                    x_31755;
                                ((volatile __local
                                  int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                                    x_31756;
                                ((volatile __local
                                  float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                                    x_31757;
                            }
                        }
                        offset_31778 *= 2;
                    }
                    while (slt32(skip_waves_31779,
                                 squot32(sext_i64_i32(segred_group_sizze_25110) +
                                         wave_sizze_31734 - 1,
                                         wave_sizze_31734))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31778 = skip_waves_31779 * wave_sizze_31734;
                        if (slt32(local_tid_31732 + offset_31778,
                                  sext_i64_i32(segred_group_sizze_25110)) &&
                            ((local_tid_31732 - squot32(local_tid_31732,
                                                        wave_sizze_31734) *
                              wave_sizze_31734) == 0 &&
                             (squot32(local_tid_31732, wave_sizze_31734) & (2 *
                                                                            skip_waves_31779 -
                                                                            1)) ==
                             0)) {
                            // read array element
                            {
                                x_31758 = ((__local
                                            bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732 +
                                                                       offset_31778)];
                                x_31759 = ((__local
                                            int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732 +
                                                                          offset_31778)];
                                x_31760 = ((__local
                                            float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732 +
                                                                        offset_31778)];
                            }
                            // apply reduction operation
                            {
                                bool res_31761;
                                int32_t res_31762;
                                
                                if (x_31755) {
                                    res_31761 = x_31755;
                                    res_31762 = x_31756;
                                } else {
                                    bool x_31763 = x_31758 && x_31758;
                                    bool x_31764 = !x_31758;
                                    bool y_31765 = x_31755 && x_31764;
                                    bool res_31766 = x_31763 || y_31765;
                                    int32_t res_31767;
                                    
                                    if (x_31758) {
                                        res_31767 = x_31759;
                                    } else {
                                        res_31767 = x_31756;
                                    }
                                    res_31761 = res_31766;
                                    res_31762 = res_31767;
                                }
                                
                                float res_31768 = x_31757 + x_31760;
                                
                                x_31755 = res_31761;
                                x_31756 = res_31762;
                                x_31757 = res_31768;
                            }
                            // write result of operation
                            {
                                ((__local
                                  bool *) red_arr_mem_31736)[sext_i32_i64(local_tid_31732)] =
                                    x_31755;
                                ((__local
                                  int32_t *) red_arr_mem_31738)[sext_i32_i64(local_tid_31732)] =
                                    x_31756;
                                ((__local
                                  float *) red_arr_mem_31740)[sext_i32_i64(local_tid_31732)] =
                                    x_31757;
                            }
                        }
                        skip_waves_31779 *= 2;
                    }
                    // and back to memory with the final result
                    {
                        if (local_tid_31732 == 0) {
                            ((__global bool *) mem_30602)[gtid_24929] = x_31755;
                            ((__global int32_t *) mem_30604)[gtid_24929] =
                                x_31756;
                            ((__global float *) mem_30606)[gtid_24929] =
                                x_31757;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_25110
}
__kernel void mainDetailedzisegred_nonseg_24257(__global int *global_failure,
                                                __local volatile
                                                int64_t *red_arr_mem_31495_backing_aligned_0,
                                                __local volatile
                                                int64_t *sync_arr_mem_31493_backing_aligned_1,
                                                int64_t m_20400,
                                                int64_t num_groups_24252,
                                                __global
                                                unsigned char *res_mem_30511,
                                                __global
                                                unsigned char *mem_30516,
                                                __global
                                                unsigned char *mainDetailedzicounter_mem_31483,
                                                __global
                                                unsigned char *group_res_arr_mem_31485,
                                                int64_t num_threads_31487)
{
    #define segred_group_sizze_24250 (mainDetailedzisegred_group_sizze_24249)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31495_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31495_backing_aligned_0;
    __local volatile char *restrict sync_arr_mem_31493_backing_0 =
                          (__local volatile
                           char *) sync_arr_mem_31493_backing_aligned_1;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31488;
    int32_t local_tid_31489;
    int64_t group_sizze_31492;
    int32_t wave_sizze_31491;
    int32_t group_tid_31490;
    
    global_tid_31488 = get_global_id(0);
    local_tid_31489 = get_local_id(0);
    group_sizze_31492 = get_local_size(0);
    wave_sizze_31491 = LOCKSTEP_WIDTH;
    group_tid_31490 = get_group_id(0);
    
    int32_t phys_tid_24257;
    
    phys_tid_24257 = global_tid_31488;
    
    __local char *sync_arr_mem_31493;
    
    sync_arr_mem_31493 = (__local char *) sync_arr_mem_31493_backing_0;
    
    __local char *red_arr_mem_31495;
    
    red_arr_mem_31495 = (__local char *) red_arr_mem_31495_backing_1;
    
    int64_t dummy_24255;
    
    dummy_24255 = 0;
    
    int64_t gtid_24256;
    
    gtid_24256 = 0;
    
    int32_t x_acc_31497;
    int64_t chunk_sizze_31498;
    
    chunk_sizze_31498 = smin64(sdiv_up64(m_20400,
                                         sext_i32_i64(sext_i64_i32(segred_group_sizze_24250 *
                                         num_groups_24252))),
                               sdiv_up64(m_20400 - sext_i32_i64(phys_tid_24257),
                                         num_threads_31487));
    
    int32_t x_20757;
    int32_t x_20758;
    
    // neutral-initialise the accumulators
    {
        x_acc_31497 = 0;
    }
    for (int64_t i_31502 = 0; i_31502 < chunk_sizze_31498; i_31502++) {
        gtid_24256 = sext_i32_i64(phys_tid_24257) + num_threads_31487 * i_31502;
        // apply map function
        {
            int32_t x_20760 = ((__global int32_t *) res_mem_30511)[gtid_24256];
            
            // save map-out results
            { }
            // load accumulator
            {
                x_20757 = x_acc_31497;
            }
            // load new values
            {
                x_20758 = x_20760;
            }
            // apply reduction operator
            {
                int32_t res_20759 = smax32(x_20757, x_20758);
                
                // store in accumulator
                {
                    x_acc_31497 = res_20759;
                }
            }
        }
    }
    // to reduce current chunk, first store our result in memory
    {
        x_20757 = x_acc_31497;
        ((__local int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
            x_20757;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t offset_31503;
    int32_t skip_waves_31504;
    
    skip_waves_31504 = 1;
    
    int32_t x_31499;
    int32_t x_31500;
    
    offset_31503 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_31489, sext_i64_i32(segred_group_sizze_24250))) {
            x_31499 = ((__local
                        int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                      offset_31503)];
        }
    }
    offset_31503 = 1;
    while (slt32(offset_31503, wave_sizze_31491)) {
        if (slt32(local_tid_31489 + offset_31503,
                  sext_i64_i32(segred_group_sizze_24250)) && ((local_tid_31489 -
                                                               squot32(local_tid_31489,
                                                                       wave_sizze_31491) *
                                                               wave_sizze_31491) &
                                                              (2 *
                                                               offset_31503 -
                                                               1)) == 0) {
            // read array element
            {
                x_31500 = ((volatile __local
                            int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                          offset_31503)];
            }
            // apply reduction operation
            {
                int32_t res_31501 = smax32(x_31499, x_31500);
                
                x_31499 = res_31501;
            }
            // write result of operation
            {
                ((volatile __local
                  int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
                    x_31499;
            }
        }
        offset_31503 *= 2;
    }
    while (slt32(skip_waves_31504,
                 squot32(sext_i64_i32(segred_group_sizze_24250) +
                         wave_sizze_31491 - 1, wave_sizze_31491))) {
        barrier(CLK_LOCAL_MEM_FENCE);
        offset_31503 = skip_waves_31504 * wave_sizze_31491;
        if (slt32(local_tid_31489 + offset_31503,
                  sext_i64_i32(segred_group_sizze_24250)) && ((local_tid_31489 -
                                                               squot32(local_tid_31489,
                                                                       wave_sizze_31491) *
                                                               wave_sizze_31491) ==
                                                              0 &&
                                                              (squot32(local_tid_31489,
                                                                       wave_sizze_31491) &
                                                               (2 *
                                                                skip_waves_31504 -
                                                                1)) == 0)) {
            // read array element
            {
                x_31500 = ((__local
                            int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                          offset_31503)];
            }
            // apply reduction operation
            {
                int32_t res_31501 = smax32(x_31499, x_31500);
                
                x_31499 = res_31501;
            }
            // write result of operation
            {
                ((__local
                  int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
                    x_31499;
            }
        }
        skip_waves_31504 *= 2;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // first thread saves the result in accumulator
    {
        if (sext_i32_i64(local_tid_31489) == 0) {
            x_acc_31497 = x_31499;
        }
    }
    
    int32_t old_counter_31505;
    
    // first thread in group saves group result to global memory
    {
        if (local_tid_31489 == 0) {
            ((__global
              int32_t *) group_res_arr_mem_31485)[sext_i32_i64(group_tid_31490) *
                                                  segred_group_sizze_24250] =
                x_acc_31497;
            mem_fence_global();
            old_counter_31505 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_31483)[0],
                                                      (int) 1);
            ((__local bool *) sync_arr_mem_31493)[0] = old_counter_31505 ==
                num_groups_24252 - 1;
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    
    bool is_last_group_31506;
    
    is_last_group_31506 = ((__local bool *) sync_arr_mem_31493)[0];
    if (is_last_group_31506) {
        if (local_tid_31489 == 0) {
            old_counter_31505 = atomic_add_i32_global(&((volatile __global
                                                         int *) mainDetailedzicounter_mem_31483)[0],
                                                      (int) (0 -
                                                             num_groups_24252));
        }
        // read in the per-group-results
        {
            int64_t read_per_thread_31507 = sdiv_up64(num_groups_24252,
                                                      segred_group_sizze_24250);
            
            x_20757 = 0;
            for (int64_t i_31508 = 0; i_31508 < read_per_thread_31507;
                 i_31508++) {
                int64_t group_res_id_31509 = sext_i32_i64(local_tid_31489) *
                        read_per_thread_31507 + i_31508;
                int64_t index_of_group_res_31510 = group_res_id_31509;
                
                if (slt64(group_res_id_31509, num_groups_24252)) {
                    x_20758 = ((__global
                                int32_t *) group_res_arr_mem_31485)[index_of_group_res_31510 *
                                                                    segred_group_sizze_24250];
                    
                    int32_t res_20759;
                    
                    res_20759 = smax32(x_20757, x_20758);
                    x_20757 = res_20759;
                }
            }
        }
        ((__local int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
            x_20757;
        barrier(CLK_LOCAL_MEM_FENCE);
        // reduce the per-group results
        {
            int32_t offset_31511;
            int32_t skip_waves_31512;
            
            skip_waves_31512 = 1;
            
            int32_t x_31499;
            int32_t x_31500;
            
            offset_31511 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31489,
                          sext_i64_i32(segred_group_sizze_24250))) {
                    x_31499 = ((__local
                                int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                              offset_31511)];
                }
            }
            offset_31511 = 1;
            while (slt32(offset_31511, wave_sizze_31491)) {
                if (slt32(local_tid_31489 + offset_31511,
                          sext_i64_i32(segred_group_sizze_24250)) &&
                    ((local_tid_31489 - squot32(local_tid_31489,
                                                wave_sizze_31491) *
                      wave_sizze_31491) & (2 * offset_31511 - 1)) == 0) {
                    // read array element
                    {
                        x_31500 = ((volatile __local
                                    int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                                  offset_31511)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_31501 = smax32(x_31499, x_31500);
                        
                        x_31499 = res_31501;
                    }
                    // write result of operation
                    {
                        ((volatile __local
                          int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
                            x_31499;
                    }
                }
                offset_31511 *= 2;
            }
            while (slt32(skip_waves_31512,
                         squot32(sext_i64_i32(segred_group_sizze_24250) +
                                 wave_sizze_31491 - 1, wave_sizze_31491))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_31511 = skip_waves_31512 * wave_sizze_31491;
                if (slt32(local_tid_31489 + offset_31511,
                          sext_i64_i32(segred_group_sizze_24250)) &&
                    ((local_tid_31489 - squot32(local_tid_31489,
                                                wave_sizze_31491) *
                      wave_sizze_31491) == 0 && (squot32(local_tid_31489,
                                                         wave_sizze_31491) &
                                                 (2 * skip_waves_31512 - 1)) ==
                     0)) {
                    // read array element
                    {
                        x_31500 = ((__local
                                    int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489 +
                                                                  offset_31511)];
                    }
                    // apply reduction operation
                    {
                        int32_t res_31501 = smax32(x_31499, x_31500);
                        
                        x_31499 = res_31501;
                    }
                    // write result of operation
                    {
                        ((__local
                          int32_t *) red_arr_mem_31495)[sext_i32_i64(local_tid_31489)] =
                            x_31499;
                    }
                }
                skip_waves_31512 *= 2;
            }
            // and back to memory with the final result
            {
                if (local_tid_31489 == 0) {
                    ((__global int32_t *) mem_30516)[0] = x_31499;
                }
            }
        }
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24250
}
__kernel void mainDetailedzisegred_small_22161(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_30845_backing_aligned_0,
                                               int64_t N_20399, int64_t m_20400,
                                               int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t res_20419,
                                               int64_t num_groups_22300,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *binop_p_mem_29982,
                                               __global
                                               unsigned char *mem_30065,
                                               __global
                                               unsigned char *mem_30070,
                                               int64_t segment_sizze_nonzzero_30838)
{
    #define segred_group_sizze_22299 (mainDetailedzisegred_group_sizze_22155)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_30845_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30845_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30840;
    int32_t local_tid_30841;
    int64_t group_sizze_30844;
    int32_t wave_sizze_30843;
    int32_t group_tid_30842;
    
    global_tid_30840 = get_global_id(0);
    local_tid_30841 = get_local_id(0);
    group_sizze_30844 = get_local_size(0);
    wave_sizze_30843 = LOCKSTEP_WIDTH;
    group_tid_30842 = get_group_id(0);
    
    int32_t phys_tid_22161;
    
    phys_tid_22161 = global_tid_30840;
    
    __local char *red_arr_mem_30845;
    
    red_arr_mem_30845 = (__local char *) red_arr_mem_30845_backing_0;
    
    int32_t phys_group_id_30847;
    
    phys_group_id_30847 = get_group_id(0);
    for (int32_t i_30848 = 0; i_30848 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400 * res_20419 * res_20419,
                                          squot64(segred_group_sizze_22299,
                                                  segment_sizze_nonzzero_30838))) -
                   phys_group_id_30847, sext_i64_i32(num_groups_22300));
         i_30848++) {
        int32_t virt_group_id_30849 = phys_group_id_30847 + i_30848 *
                sext_i64_i32(num_groups_22300);
        int64_t gtid_22148 = squot64(squot64(sext_i32_i64(local_tid_30841),
                                             segment_sizze_nonzzero_30838) +
                                     sext_i32_i64(virt_group_id_30849) *
                                     squot64(segred_group_sizze_22299,
                                             segment_sizze_nonzzero_30838),
                                     res_20419 * res_20419);
        int64_t gtid_22149 = squot64(squot64(sext_i32_i64(local_tid_30841),
                                             segment_sizze_nonzzero_30838) +
                                     sext_i32_i64(virt_group_id_30849) *
                                     squot64(segred_group_sizze_22299,
                                             segment_sizze_nonzzero_30838) -
                                     squot64(squot64(sext_i32_i64(local_tid_30841),
                                                     segment_sizze_nonzzero_30838) +
                                             sext_i32_i64(virt_group_id_30849) *
                                             squot64(segred_group_sizze_22299,
                                                     segment_sizze_nonzzero_30838),
                                             res_20419 * res_20419) *
                                     (res_20419 * res_20419), res_20419);
        int64_t gtid_22150 = squot64(sext_i32_i64(local_tid_30841),
                                     segment_sizze_nonzzero_30838) +
                sext_i32_i64(virt_group_id_30849) *
                squot64(segred_group_sizze_22299,
                        segment_sizze_nonzzero_30838) -
                squot64(squot64(sext_i32_i64(local_tid_30841),
                                segment_sizze_nonzzero_30838) +
                        sext_i32_i64(virt_group_id_30849) *
                        squot64(segred_group_sizze_22299,
                                segment_sizze_nonzzero_30838), res_20419 *
                        res_20419) * (res_20419 * res_20419) -
                squot64(squot64(sext_i32_i64(local_tid_30841),
                                segment_sizze_nonzzero_30838) +
                        sext_i32_i64(virt_group_id_30849) *
                        squot64(segred_group_sizze_22299,
                                segment_sizze_nonzzero_30838) -
                        squot64(squot64(sext_i32_i64(local_tid_30841),
                                        segment_sizze_nonzzero_30838) +
                                sext_i32_i64(virt_group_id_30849) *
                                squot64(segred_group_sizze_22299,
                                        segment_sizze_nonzzero_30838),
                                res_20419 * res_20419) * (res_20419 *
                                                          res_20419),
                        res_20419) * res_20419;
        int64_t gtid_22160 = srem64(sext_i32_i64(local_tid_30841), res_20413);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20413) && (((slt64(gtid_22148, m_20400) &&
                                          slt64(gtid_22149, res_20419)) &&
                                         slt64(gtid_22150, res_20419)) &&
                                        slt64(sext_i32_i64(local_tid_30841),
                                              res_20413 *
                                              squot64(segred_group_sizze_22299,
                                                      segment_sizze_nonzzero_30838)))) {
                float x_22309 = ((__global
                                  float *) images_mem_29973)[gtid_22148 *
                                                             N_20401 +
                                                             gtid_22160];
                float x_22310 = ((__global
                                  float *) binop_p_mem_29982)[gtid_22149 *
                                                              N_20399 +
                                                              gtid_22160];
                float x_22311 = ((__global float *) mem_30065)[gtid_22150 *
                                                               N_20399 +
                                                               gtid_22160];
                float x_22312 = x_22310 * x_22311;
                bool res_22313;
                
                res_22313 = futrts_isnan32(x_22309);
                
                float y_22314;
                
                if (res_22313) {
                    y_22314 = 0.0F;
                } else {
                    y_22314 = 1.0F;
                }
                
                float res_22315 = x_22312 * y_22314;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                        res_22315;
                }
            } else {
                ((__local
                  float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20413)) {
            // perform segmented scan to imitate reduction
            {
                float x_22303;
                float x_22304;
                float x_30850;
                float x_30851;
                bool ltid_in_bounds_30853;
                
                ltid_in_bounds_30853 = slt64(sext_i32_i64(local_tid_30841),
                                             res_20413 *
                                             squot64(segred_group_sizze_22299,
                                                     segment_sizze_nonzzero_30838));
                
                int32_t skip_threads_30854;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_30853) {
                        x_22304 = ((volatile __local
                                    float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)];
                        if ((local_tid_30841 - squot32(local_tid_30841, 32) *
                             32) == 0) {
                            x_22303 = x_22304;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_30854 = 1;
                    while (slt32(skip_threads_30854, 32)) {
                        if (sle32(skip_threads_30854, local_tid_30841 -
                                  squot32(local_tid_30841, 32) * 32) &&
                            ltid_in_bounds_30853) {
                            // read operands
                            {
                                x_22303 = ((volatile __local
                                            float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841) -
                                                                        sext_i32_i64(skip_threads_30854)];
                            }
                            // perform operation
                            {
                                bool inactive_30855 =
                                     slt64(srem64(sext_i32_i64(local_tid_30841),
                                                  res_20413),
                                           sext_i32_i64(local_tid_30841) -
                                           sext_i32_i64(local_tid_30841 -
                                           skip_threads_30854));
                                
                                if (inactive_30855) {
                                    x_22303 = x_22304;
                                }
                                if (!inactive_30855) {
                                    float res_22305 = x_22303 + x_22304;
                                    
                                    x_22303 = res_22305;
                                }
                            }
                        }
                        if (sle32(wave_sizze_30843, skip_threads_30854)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_30854, local_tid_30841 -
                                  squot32(local_tid_30841, 32) * 32) &&
                            ltid_in_bounds_30853) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                                    x_22303;
                                x_22304 = x_22303;
                            }
                        }
                        if (sle32(wave_sizze_30843, skip_threads_30854)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_30854 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_30841 - squot32(local_tid_30841, 32) * 32) ==
                        31 && ltid_in_bounds_30853) {
                        ((volatile __local
                          float *) red_arr_mem_30845)[sext_i32_i64(squot32(local_tid_30841,
                                                                           32))] =
                            x_22303;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_30856;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_30841, 32) == 0 &&
                            ltid_in_bounds_30853) {
                            x_30851 = ((volatile __local
                                        float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)];
                            if ((local_tid_30841 - squot32(local_tid_30841,
                                                           32) * 32) == 0) {
                                x_30850 = x_30851;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_30856 = 1;
                        while (slt32(skip_threads_30856, 32)) {
                            if (sle32(skip_threads_30856, local_tid_30841 -
                                      squot32(local_tid_30841, 32) * 32) &&
                                (squot32(local_tid_30841, 32) == 0 &&
                                 ltid_in_bounds_30853)) {
                                // read operands
                                {
                                    x_30850 = ((volatile __local
                                                float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841) -
                                                                            sext_i32_i64(skip_threads_30856)];
                                }
                                // perform operation
                                {
                                    bool inactive_30857 =
                                         slt64(srem64(sext_i32_i64(local_tid_30841 *
                                                      32 + 32 - 1), res_20413),
                                               sext_i32_i64(local_tid_30841 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_30841 -
                                                             skip_threads_30856) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_30857) {
                                        x_30850 = x_30851;
                                    }
                                    if (!inactive_30857) {
                                        float res_30852 = x_30850 + x_30851;
                                        
                                        x_30850 = res_30852;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_30843, skip_threads_30856)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_30856, local_tid_30841 -
                                      squot32(local_tid_30841, 32) * 32) &&
                                (squot32(local_tid_30841, 32) == 0 &&
                                 ltid_in_bounds_30853)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                                        x_30850;
                                    x_30851 = x_30850;
                                }
                            }
                            if (sle32(wave_sizze_30843, skip_threads_30856)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_30856 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_30841, 32) == 0 ||
                          !ltid_in_bounds_30853)) {
                        // read operands
                        {
                            x_22304 = x_22303;
                            x_22303 = ((__local
                                        float *) red_arr_mem_30845)[sext_i32_i64(squot32(local_tid_30841,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_30858 =
                                 slt64(srem64(sext_i32_i64(local_tid_30841),
                                              res_20413),
                                       sext_i32_i64(local_tid_30841) -
                                       sext_i32_i64(squot32(local_tid_30841,
                                                            32) * 32 - 1));
                            
                            if (inactive_30858) {
                                x_22303 = x_22304;
                            }
                            if (!inactive_30858) {
                                float res_22305 = x_22303 + x_22304;
                                
                                x_22303 = res_22305;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                                x_22303;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_30841, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_30845)[sext_i32_i64(local_tid_30841)] =
                            x_22304;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_30849) *
                      squot64(segred_group_sizze_22299,
                              segment_sizze_nonzzero_30838) +
                      sext_i32_i64(local_tid_30841), m_20400 * res_20419 *
                      res_20419) && slt64(sext_i32_i64(local_tid_30841),
                                          squot64(segred_group_sizze_22299,
                                                  segment_sizze_nonzzero_30838))) {
                ((__global
                  float *) mem_30070)[squot64(sext_i32_i64(virt_group_id_30849) *
                                              squot64(segred_group_sizze_22299,
                                                      segment_sizze_nonzzero_30838) +
                                              sext_i32_i64(local_tid_30841),
                                              res_20419 * res_20419) *
                                      (res_20419 * res_20419) +
                                      squot64(sext_i32_i64(virt_group_id_30849) *
                                              squot64(segred_group_sizze_22299,
                                                      segment_sizze_nonzzero_30838) +
                                              sext_i32_i64(local_tid_30841) -
                                              squot64(sext_i32_i64(virt_group_id_30849) *
                                                      squot64(segred_group_sizze_22299,
                                                              segment_sizze_nonzzero_30838) +
                                                      sext_i32_i64(local_tid_30841),
                                                      res_20419 * res_20419) *
                                              (res_20419 * res_20419),
                                              res_20419) * res_20419 +
                                      (sext_i32_i64(virt_group_id_30849) *
                                       squot64(segred_group_sizze_22299,
                                               segment_sizze_nonzzero_30838) +
                                       sext_i32_i64(local_tid_30841) -
                                       squot64(sext_i32_i64(virt_group_id_30849) *
                                               squot64(segred_group_sizze_22299,
                                                       segment_sizze_nonzzero_30838) +
                                               sext_i32_i64(local_tid_30841),
                                               res_20419 * res_20419) *
                                       (res_20419 * res_20419) -
                                       squot64(sext_i32_i64(virt_group_id_30849) *
                                               squot64(segred_group_sizze_22299,
                                                       segment_sizze_nonzzero_30838) +
                                               sext_i32_i64(local_tid_30841) -
                                               squot64(sext_i32_i64(virt_group_id_30849) *
                                                       squot64(segred_group_sizze_22299,
                                                               segment_sizze_nonzzero_30838) +
                                                       sext_i32_i64(local_tid_30841),
                                                       res_20419 * res_20419) *
                                               (res_20419 * res_20419),
                                               res_20419) * res_20419)] =
                    ((__local
                      float *) red_arr_mem_30845)[(sext_i32_i64(local_tid_30841) +
                                                   1) *
                                                  segment_sizze_nonzzero_30838 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_22299
}
__kernel void mainDetailedzisegred_small_23334(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_30999_backing_aligned_0,
                                               int64_t N_20399, int64_t m_20400,
                                               int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t res_20419,
                                               int64_t num_groups_23387,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *binop_p_mem_29982,
                                               __global
                                               unsigned char *mem_30251,
                                               int64_t segment_sizze_nonzzero_30992)
{
    #define segred_group_sizze_23386 (mainDetailedzisegred_group_sizze_23328)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_30999_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_30999_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30994;
    int32_t local_tid_30995;
    int64_t group_sizze_30998;
    int32_t wave_sizze_30997;
    int32_t group_tid_30996;
    
    global_tid_30994 = get_global_id(0);
    local_tid_30995 = get_local_id(0);
    group_sizze_30998 = get_local_size(0);
    wave_sizze_30997 = LOCKSTEP_WIDTH;
    group_tid_30996 = get_group_id(0);
    
    int32_t phys_tid_23334;
    
    phys_tid_23334 = global_tid_30994;
    
    __local char *red_arr_mem_30999;
    
    red_arr_mem_30999 = (__local char *) red_arr_mem_30999_backing_0;
    
    int32_t phys_group_id_31001;
    
    phys_group_id_31001 = get_group_id(0);
    for (int32_t i_31002 = 0; i_31002 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400 * res_20419,
                                          squot64(segred_group_sizze_23386,
                                                  segment_sizze_nonzzero_30992))) -
                   phys_group_id_31001, sext_i64_i32(num_groups_23387));
         i_31002++) {
        int32_t virt_group_id_31003 = phys_group_id_31001 + i_31002 *
                sext_i64_i32(num_groups_23387);
        int64_t gtid_23323 = squot64(squot64(sext_i32_i64(local_tid_30995),
                                             segment_sizze_nonzzero_30992) +
                                     sext_i32_i64(virt_group_id_31003) *
                                     squot64(segred_group_sizze_23386,
                                             segment_sizze_nonzzero_30992),
                                     res_20419);
        int64_t gtid_23324 = squot64(sext_i32_i64(local_tid_30995),
                                     segment_sizze_nonzzero_30992) +
                sext_i32_i64(virt_group_id_31003) *
                squot64(segred_group_sizze_23386,
                        segment_sizze_nonzzero_30992) -
                squot64(squot64(sext_i32_i64(local_tid_30995),
                                segment_sizze_nonzzero_30992) +
                        sext_i32_i64(virt_group_id_31003) *
                        squot64(segred_group_sizze_23386,
                                segment_sizze_nonzzero_30992), res_20419) *
                res_20419;
        int64_t gtid_23333 = srem64(sext_i32_i64(local_tid_30995), res_20413);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20413) && ((slt64(gtid_23323, m_20400) &&
                                         slt64(gtid_23324, res_20419)) &&
                                        slt64(sext_i32_i64(local_tid_30995),
                                              res_20413 *
                                              squot64(segred_group_sizze_23386,
                                                      segment_sizze_nonzzero_30992)))) {
                float x_23396 = ((__global
                                  float *) images_mem_29973)[gtid_23323 *
                                                             N_20401 +
                                                             gtid_23333];
                bool res_23397;
                
                res_23397 = futrts_isnan32(x_23396);
                
                float res_23398;
                
                if (res_23397) {
                    res_23398 = 0.0F;
                } else {
                    float x_23395 = ((__global
                                      float *) binop_p_mem_29982)[gtid_23324 *
                                                                  N_20399 +
                                                                  gtid_23333];
                    float res_23399 = x_23395 * x_23396;
                    
                    res_23398 = res_23399;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                        res_23398;
                }
            } else {
                ((__local
                  float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20413)) {
            // perform segmented scan to imitate reduction
            {
                float x_23390;
                float x_23391;
                float x_31004;
                float x_31005;
                bool ltid_in_bounds_31007;
                
                ltid_in_bounds_31007 = slt64(sext_i32_i64(local_tid_30995),
                                             res_20413 *
                                             squot64(segred_group_sizze_23386,
                                                     segment_sizze_nonzzero_30992));
                
                int32_t skip_threads_31008;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31007) {
                        x_23391 = ((volatile __local
                                    float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)];
                        if ((local_tid_30995 - squot32(local_tid_30995, 32) *
                             32) == 0) {
                            x_23390 = x_23391;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31008 = 1;
                    while (slt32(skip_threads_31008, 32)) {
                        if (sle32(skip_threads_31008, local_tid_30995 -
                                  squot32(local_tid_30995, 32) * 32) &&
                            ltid_in_bounds_31007) {
                            // read operands
                            {
                                x_23390 = ((volatile __local
                                            float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995) -
                                                                        sext_i32_i64(skip_threads_31008)];
                            }
                            // perform operation
                            {
                                bool inactive_31009 =
                                     slt64(srem64(sext_i32_i64(local_tid_30995),
                                                  res_20413),
                                           sext_i32_i64(local_tid_30995) -
                                           sext_i32_i64(local_tid_30995 -
                                           skip_threads_31008));
                                
                                if (inactive_31009) {
                                    x_23390 = x_23391;
                                }
                                if (!inactive_31009) {
                                    float res_23392 = x_23390 + x_23391;
                                    
                                    x_23390 = res_23392;
                                }
                            }
                        }
                        if (sle32(wave_sizze_30997, skip_threads_31008)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31008, local_tid_30995 -
                                  squot32(local_tid_30995, 32) * 32) &&
                            ltid_in_bounds_31007) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                                    x_23390;
                                x_23391 = x_23390;
                            }
                        }
                        if (sle32(wave_sizze_30997, skip_threads_31008)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31008 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_30995 - squot32(local_tid_30995, 32) * 32) ==
                        31 && ltid_in_bounds_31007) {
                        ((volatile __local
                          float *) red_arr_mem_30999)[sext_i32_i64(squot32(local_tid_30995,
                                                                           32))] =
                            x_23390;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31010;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_30995, 32) == 0 &&
                            ltid_in_bounds_31007) {
                            x_31005 = ((volatile __local
                                        float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)];
                            if ((local_tid_30995 - squot32(local_tid_30995,
                                                           32) * 32) == 0) {
                                x_31004 = x_31005;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31010 = 1;
                        while (slt32(skip_threads_31010, 32)) {
                            if (sle32(skip_threads_31010, local_tid_30995 -
                                      squot32(local_tid_30995, 32) * 32) &&
                                (squot32(local_tid_30995, 32) == 0 &&
                                 ltid_in_bounds_31007)) {
                                // read operands
                                {
                                    x_31004 = ((volatile __local
                                                float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995) -
                                                                            sext_i32_i64(skip_threads_31010)];
                                }
                                // perform operation
                                {
                                    bool inactive_31011 =
                                         slt64(srem64(sext_i32_i64(local_tid_30995 *
                                                      32 + 32 - 1), res_20413),
                                               sext_i32_i64(local_tid_30995 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_30995 -
                                                             skip_threads_31010) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31011) {
                                        x_31004 = x_31005;
                                    }
                                    if (!inactive_31011) {
                                        float res_31006 = x_31004 + x_31005;
                                        
                                        x_31004 = res_31006;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_30997, skip_threads_31010)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31010, local_tid_30995 -
                                      squot32(local_tid_30995, 32) * 32) &&
                                (squot32(local_tid_30995, 32) == 0 &&
                                 ltid_in_bounds_31007)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                                        x_31004;
                                    x_31005 = x_31004;
                                }
                            }
                            if (sle32(wave_sizze_30997, skip_threads_31010)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31010 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_30995, 32) == 0 ||
                          !ltid_in_bounds_31007)) {
                        // read operands
                        {
                            x_23391 = x_23390;
                            x_23390 = ((__local
                                        float *) red_arr_mem_30999)[sext_i32_i64(squot32(local_tid_30995,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31012 =
                                 slt64(srem64(sext_i32_i64(local_tid_30995),
                                              res_20413),
                                       sext_i32_i64(local_tid_30995) -
                                       sext_i32_i64(squot32(local_tid_30995,
                                                            32) * 32 - 1));
                            
                            if (inactive_31012) {
                                x_23390 = x_23391;
                            }
                            if (!inactive_31012) {
                                float res_23392 = x_23390 + x_23391;
                                
                                x_23390 = res_23392;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                                x_23390;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_30995, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_30999)[sext_i32_i64(local_tid_30995)] =
                            x_23391;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31003) *
                      squot64(segred_group_sizze_23386,
                              segment_sizze_nonzzero_30992) +
                      sext_i32_i64(local_tid_30995), m_20400 * res_20419) &&
                slt64(sext_i32_i64(local_tid_30995),
                      squot64(segred_group_sizze_23386,
                              segment_sizze_nonzzero_30992))) {
                ((__global
                  float *) mem_30251)[squot64(sext_i32_i64(virt_group_id_31003) *
                                              squot64(segred_group_sizze_23386,
                                                      segment_sizze_nonzzero_30992) +
                                              sext_i32_i64(local_tid_30995),
                                              res_20419) * res_20419 +
                                      (sext_i32_i64(virt_group_id_31003) *
                                       squot64(segred_group_sizze_23386,
                                               segment_sizze_nonzzero_30992) +
                                       sext_i32_i64(local_tid_30995) -
                                       squot64(sext_i32_i64(virt_group_id_31003) *
                                               squot64(segred_group_sizze_23386,
                                                       segment_sizze_nonzzero_30992) +
                                               sext_i32_i64(local_tid_30995),
                                               res_20419) * res_20419)] =
                    ((__local
                      float *) red_arr_mem_30999)[(sext_i32_i64(local_tid_30995) +
                                                   1) *
                                                  segment_sizze_nonzzero_30992 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23386
}
__kernel void mainDetailedzisegred_small_23471(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31080_backing_aligned_0,
                                               int64_t m_20400,
                                               int64_t res_20419,
                                               int64_t num_groups_23520,
                                               __global
                                               unsigned char *res_mem_30166,
                                               __global
                                               unsigned char *res_mem_30257,
                                               __global
                                               unsigned char *mem_30294,
                                               int64_t segment_sizze_nonzzero_31073)
{
    #define segred_group_sizze_23519 (mainDetailedzisegred_group_sizze_23465)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31080_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31080_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31075;
    int32_t local_tid_31076;
    int64_t group_sizze_31079;
    int32_t wave_sizze_31078;
    int32_t group_tid_31077;
    
    global_tid_31075 = get_global_id(0);
    local_tid_31076 = get_local_id(0);
    group_sizze_31079 = get_local_size(0);
    wave_sizze_31078 = LOCKSTEP_WIDTH;
    group_tid_31077 = get_group_id(0);
    
    int32_t phys_tid_23471;
    
    phys_tid_23471 = global_tid_31075;
    
    __local char *red_arr_mem_31080;
    
    red_arr_mem_31080 = (__local char *) red_arr_mem_31080_backing_0;
    
    int32_t phys_group_id_31082;
    
    phys_group_id_31082 = get_group_id(0);
    for (int32_t i_31083 = 0; i_31083 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400 * res_20419,
                                          squot64(segred_group_sizze_23519,
                                                  segment_sizze_nonzzero_31073))) -
                   phys_group_id_31082, sext_i64_i32(num_groups_23520));
         i_31083++) {
        int32_t virt_group_id_31084 = phys_group_id_31082 + i_31083 *
                sext_i64_i32(num_groups_23520);
        int64_t gtid_23460 = squot64(squot64(sext_i32_i64(local_tid_31076),
                                             segment_sizze_nonzzero_31073) +
                                     sext_i32_i64(virt_group_id_31084) *
                                     squot64(segred_group_sizze_23519,
                                             segment_sizze_nonzzero_31073),
                                     res_20419);
        int64_t gtid_23461 = squot64(sext_i32_i64(local_tid_31076),
                                     segment_sizze_nonzzero_31073) +
                sext_i32_i64(virt_group_id_31084) *
                squot64(segred_group_sizze_23519,
                        segment_sizze_nonzzero_31073) -
                squot64(squot64(sext_i32_i64(local_tid_31076),
                                segment_sizze_nonzzero_31073) +
                        sext_i32_i64(virt_group_id_31084) *
                        squot64(segred_group_sizze_23519,
                                segment_sizze_nonzzero_31073), res_20419) *
                res_20419;
        int64_t gtid_23470 = srem64(sext_i32_i64(local_tid_31076), res_20419);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20419) && ((slt64(gtid_23460, m_20400) &&
                                         slt64(gtid_23461, res_20419)) &&
                                        slt64(sext_i32_i64(local_tid_31076),
                                              res_20419 *
                                              squot64(segred_group_sizze_23519,
                                                      segment_sizze_nonzzero_31073)))) {
                float x_23529 = ((__global float *) res_mem_30257)[gtid_23460 *
                                                                   res_20419 +
                                                                   gtid_23470];
                float x_23530 = ((__global float *) res_mem_30166)[gtid_23460 *
                                                                   (res_20419 *
                                                                    res_20419) +
                                                                   gtid_23461 *
                                                                   res_20419 +
                                                                   gtid_23470];
                float res_23531 = x_23529 * x_23530;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                        res_23531;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20419)) {
            // perform segmented scan to imitate reduction
            {
                float x_23523;
                float x_23524;
                float x_31085;
                float x_31086;
                bool ltid_in_bounds_31088;
                
                ltid_in_bounds_31088 = slt64(sext_i32_i64(local_tid_31076),
                                             res_20419 *
                                             squot64(segred_group_sizze_23519,
                                                     segment_sizze_nonzzero_31073));
                
                int32_t skip_threads_31089;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31088) {
                        x_23524 = ((volatile __local
                                    float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)];
                        if ((local_tid_31076 - squot32(local_tid_31076, 32) *
                             32) == 0) {
                            x_23523 = x_23524;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31089 = 1;
                    while (slt32(skip_threads_31089, 32)) {
                        if (sle32(skip_threads_31089, local_tid_31076 -
                                  squot32(local_tid_31076, 32) * 32) &&
                            ltid_in_bounds_31088) {
                            // read operands
                            {
                                x_23523 = ((volatile __local
                                            float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076) -
                                                                        sext_i32_i64(skip_threads_31089)];
                            }
                            // perform operation
                            {
                                bool inactive_31090 =
                                     slt64(srem64(sext_i32_i64(local_tid_31076),
                                                  res_20419),
                                           sext_i32_i64(local_tid_31076) -
                                           sext_i32_i64(local_tid_31076 -
                                           skip_threads_31089));
                                
                                if (inactive_31090) {
                                    x_23523 = x_23524;
                                }
                                if (!inactive_31090) {
                                    float res_23525 = x_23523 + x_23524;
                                    
                                    x_23523 = res_23525;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31078, skip_threads_31089)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31089, local_tid_31076 -
                                  squot32(local_tid_31076, 32) * 32) &&
                            ltid_in_bounds_31088) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                                    x_23523;
                                x_23524 = x_23523;
                            }
                        }
                        if (sle32(wave_sizze_31078, skip_threads_31089)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31089 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31076 - squot32(local_tid_31076, 32) * 32) ==
                        31 && ltid_in_bounds_31088) {
                        ((volatile __local
                          float *) red_arr_mem_31080)[sext_i32_i64(squot32(local_tid_31076,
                                                                           32))] =
                            x_23523;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31091;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31076, 32) == 0 &&
                            ltid_in_bounds_31088) {
                            x_31086 = ((volatile __local
                                        float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)];
                            if ((local_tid_31076 - squot32(local_tid_31076,
                                                           32) * 32) == 0) {
                                x_31085 = x_31086;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31091 = 1;
                        while (slt32(skip_threads_31091, 32)) {
                            if (sle32(skip_threads_31091, local_tid_31076 -
                                      squot32(local_tid_31076, 32) * 32) &&
                                (squot32(local_tid_31076, 32) == 0 &&
                                 ltid_in_bounds_31088)) {
                                // read operands
                                {
                                    x_31085 = ((volatile __local
                                                float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076) -
                                                                            sext_i32_i64(skip_threads_31091)];
                                }
                                // perform operation
                                {
                                    bool inactive_31092 =
                                         slt64(srem64(sext_i32_i64(local_tid_31076 *
                                                      32 + 32 - 1), res_20419),
                                               sext_i32_i64(local_tid_31076 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31076 -
                                                             skip_threads_31091) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31092) {
                                        x_31085 = x_31086;
                                    }
                                    if (!inactive_31092) {
                                        float res_31087 = x_31085 + x_31086;
                                        
                                        x_31085 = res_31087;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31078, skip_threads_31091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31091, local_tid_31076 -
                                      squot32(local_tid_31076, 32) * 32) &&
                                (squot32(local_tid_31076, 32) == 0 &&
                                 ltid_in_bounds_31088)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                                        x_31085;
                                    x_31086 = x_31085;
                                }
                            }
                            if (sle32(wave_sizze_31078, skip_threads_31091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31091 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31076, 32) == 0 ||
                          !ltid_in_bounds_31088)) {
                        // read operands
                        {
                            x_23524 = x_23523;
                            x_23523 = ((__local
                                        float *) red_arr_mem_31080)[sext_i32_i64(squot32(local_tid_31076,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31093 =
                                 slt64(srem64(sext_i32_i64(local_tid_31076),
                                              res_20419),
                                       sext_i32_i64(local_tid_31076) -
                                       sext_i32_i64(squot32(local_tid_31076,
                                                            32) * 32 - 1));
                            
                            if (inactive_31093) {
                                x_23523 = x_23524;
                            }
                            if (!inactive_31093) {
                                float res_23525 = x_23523 + x_23524;
                                
                                x_23523 = res_23525;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                                x_23523;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31076, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31080)[sext_i32_i64(local_tid_31076)] =
                            x_23524;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31084) *
                      squot64(segred_group_sizze_23519,
                              segment_sizze_nonzzero_31073) +
                      sext_i32_i64(local_tid_31076), m_20400 * res_20419) &&
                slt64(sext_i32_i64(local_tid_31076),
                      squot64(segred_group_sizze_23519,
                              segment_sizze_nonzzero_31073))) {
                ((__global
                  float *) mem_30294)[squot64(sext_i32_i64(virt_group_id_31084) *
                                              squot64(segred_group_sizze_23519,
                                                      segment_sizze_nonzzero_31073) +
                                              sext_i32_i64(local_tid_31076),
                                              res_20419) * res_20419 +
                                      (sext_i32_i64(virt_group_id_31084) *
                                       squot64(segred_group_sizze_23519,
                                               segment_sizze_nonzzero_31073) +
                                       sext_i32_i64(local_tid_31076) -
                                       squot64(sext_i32_i64(virt_group_id_31084) *
                                               squot64(segred_group_sizze_23519,
                                                       segment_sizze_nonzzero_31073) +
                                               sext_i32_i64(local_tid_31076),
                                               res_20419) * res_20419)] =
                    ((__local
                      float *) red_arr_mem_31080)[(sext_i32_i64(local_tid_31076) +
                                                   1) *
                                                  segment_sizze_nonzzero_31073 -
                                                  1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23519
}
__kernel void mainDetailedzisegred_small_23601(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31168_backing_aligned_0,
                                               int64_t N_20399, int64_t m_20400,
                                               int64_t res_20419,
                                               int64_t num_groups_23648,
                                               __global
                                               unsigned char *mem_29989,
                                               __global
                                               unsigned char *res_mem_30300,
                                               __global
                                               unsigned char *mem_30388,
                                               int64_t segment_sizze_nonzzero_31161)
{
    #define segred_group_sizze_23647 (mainDetailedzisegred_group_sizze_23595)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31168_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31168_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31163;
    int32_t local_tid_31164;
    int64_t group_sizze_31167;
    int32_t wave_sizze_31166;
    int32_t group_tid_31165;
    
    global_tid_31163 = get_global_id(0);
    local_tid_31164 = get_local_id(0);
    group_sizze_31167 = get_local_size(0);
    wave_sizze_31166 = LOCKSTEP_WIDTH;
    group_tid_31165 = get_group_id(0);
    
    int32_t phys_tid_23601;
    
    phys_tid_23601 = global_tid_31163;
    
    __local char *red_arr_mem_31168;
    
    red_arr_mem_31168 = (__local char *) red_arr_mem_31168_backing_0;
    
    int32_t phys_group_id_31170;
    
    phys_group_id_31170 = get_group_id(0);
    for (int32_t i_31171 = 0; i_31171 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400 * N_20399,
                                          squot64(segred_group_sizze_23647,
                                                  segment_sizze_nonzzero_31161))) -
                   phys_group_id_31170, sext_i64_i32(num_groups_23648));
         i_31171++) {
        int32_t virt_group_id_31172 = phys_group_id_31170 + i_31171 *
                sext_i64_i32(num_groups_23648);
        int64_t gtid_23590 = squot64(squot64(sext_i32_i64(local_tid_31164),
                                             segment_sizze_nonzzero_31161) +
                                     sext_i32_i64(virt_group_id_31172) *
                                     squot64(segred_group_sizze_23647,
                                             segment_sizze_nonzzero_31161),
                                     N_20399);
        int64_t gtid_23591 = squot64(sext_i32_i64(local_tid_31164),
                                     segment_sizze_nonzzero_31161) +
                sext_i32_i64(virt_group_id_31172) *
                squot64(segred_group_sizze_23647,
                        segment_sizze_nonzzero_31161) -
                squot64(squot64(sext_i32_i64(local_tid_31164),
                                segment_sizze_nonzzero_31161) +
                        sext_i32_i64(virt_group_id_31172) *
                        squot64(segred_group_sizze_23647,
                                segment_sizze_nonzzero_31161), N_20399) *
                N_20399;
        int64_t gtid_23600 = srem64(sext_i32_i64(local_tid_31164), res_20419);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20419) && ((slt64(gtid_23590, m_20400) &&
                                         slt64(gtid_23591, N_20399)) &&
                                        slt64(sext_i32_i64(local_tid_31164),
                                              res_20419 *
                                              squot64(segred_group_sizze_23647,
                                                      segment_sizze_nonzzero_31161)))) {
                float x_23656 = ((__global float *) res_mem_30300)[gtid_23590 *
                                                                   res_20419 +
                                                                   gtid_23600];
                float x_23657 = ((__global float *) mem_29989)[gtid_23591 *
                                                               res_20419 +
                                                               gtid_23600];
                float res_23658 = x_23656 * x_23657;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                        res_23658;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20419)) {
            // perform segmented scan to imitate reduction
            {
                float x_23651;
                float x_23652;
                float x_31173;
                float x_31174;
                bool ltid_in_bounds_31176;
                
                ltid_in_bounds_31176 = slt64(sext_i32_i64(local_tid_31164),
                                             res_20419 *
                                             squot64(segred_group_sizze_23647,
                                                     segment_sizze_nonzzero_31161));
                
                int32_t skip_threads_31177;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31176) {
                        x_23652 = ((volatile __local
                                    float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)];
                        if ((local_tid_31164 - squot32(local_tid_31164, 32) *
                             32) == 0) {
                            x_23651 = x_23652;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31177 = 1;
                    while (slt32(skip_threads_31177, 32)) {
                        if (sle32(skip_threads_31177, local_tid_31164 -
                                  squot32(local_tid_31164, 32) * 32) &&
                            ltid_in_bounds_31176) {
                            // read operands
                            {
                                x_23651 = ((volatile __local
                                            float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164) -
                                                                        sext_i32_i64(skip_threads_31177)];
                            }
                            // perform operation
                            {
                                bool inactive_31178 =
                                     slt64(srem64(sext_i32_i64(local_tid_31164),
                                                  res_20419),
                                           sext_i32_i64(local_tid_31164) -
                                           sext_i32_i64(local_tid_31164 -
                                           skip_threads_31177));
                                
                                if (inactive_31178) {
                                    x_23651 = x_23652;
                                }
                                if (!inactive_31178) {
                                    float res_23653 = x_23651 + x_23652;
                                    
                                    x_23651 = res_23653;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31166, skip_threads_31177)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31177, local_tid_31164 -
                                  squot32(local_tid_31164, 32) * 32) &&
                            ltid_in_bounds_31176) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                                    x_23651;
                                x_23652 = x_23651;
                            }
                        }
                        if (sle32(wave_sizze_31166, skip_threads_31177)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31177 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31164 - squot32(local_tid_31164, 32) * 32) ==
                        31 && ltid_in_bounds_31176) {
                        ((volatile __local
                          float *) red_arr_mem_31168)[sext_i32_i64(squot32(local_tid_31164,
                                                                           32))] =
                            x_23651;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31179;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31164, 32) == 0 &&
                            ltid_in_bounds_31176) {
                            x_31174 = ((volatile __local
                                        float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)];
                            if ((local_tid_31164 - squot32(local_tid_31164,
                                                           32) * 32) == 0) {
                                x_31173 = x_31174;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31179 = 1;
                        while (slt32(skip_threads_31179, 32)) {
                            if (sle32(skip_threads_31179, local_tid_31164 -
                                      squot32(local_tid_31164, 32) * 32) &&
                                (squot32(local_tid_31164, 32) == 0 &&
                                 ltid_in_bounds_31176)) {
                                // read operands
                                {
                                    x_31173 = ((volatile __local
                                                float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164) -
                                                                            sext_i32_i64(skip_threads_31179)];
                                }
                                // perform operation
                                {
                                    bool inactive_31180 =
                                         slt64(srem64(sext_i32_i64(local_tid_31164 *
                                                      32 + 32 - 1), res_20419),
                                               sext_i32_i64(local_tid_31164 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31164 -
                                                             skip_threads_31179) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31180) {
                                        x_31173 = x_31174;
                                    }
                                    if (!inactive_31180) {
                                        float res_31175 = x_31173 + x_31174;
                                        
                                        x_31173 = res_31175;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31166, skip_threads_31179)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31179, local_tid_31164 -
                                      squot32(local_tid_31164, 32) * 32) &&
                                (squot32(local_tid_31164, 32) == 0 &&
                                 ltid_in_bounds_31176)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                                        x_31173;
                                    x_31174 = x_31173;
                                }
                            }
                            if (sle32(wave_sizze_31166, skip_threads_31179)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31179 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31164, 32) == 0 ||
                          !ltid_in_bounds_31176)) {
                        // read operands
                        {
                            x_23652 = x_23651;
                            x_23651 = ((__local
                                        float *) red_arr_mem_31168)[sext_i32_i64(squot32(local_tid_31164,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31181 =
                                 slt64(srem64(sext_i32_i64(local_tid_31164),
                                              res_20419),
                                       sext_i32_i64(local_tid_31164) -
                                       sext_i32_i64(squot32(local_tid_31164,
                                                            32) * 32 - 1));
                            
                            if (inactive_31181) {
                                x_23651 = x_23652;
                            }
                            if (!inactive_31181) {
                                float res_23653 = x_23651 + x_23652;
                                
                                x_23651 = res_23653;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                                x_23651;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31164, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31168)[sext_i32_i64(local_tid_31164)] =
                            x_23652;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31172) *
                      squot64(segred_group_sizze_23647,
                              segment_sizze_nonzzero_31161) +
                      sext_i32_i64(local_tid_31164), m_20400 * N_20399) &&
                slt64(sext_i32_i64(local_tid_31164),
                      squot64(segred_group_sizze_23647,
                              segment_sizze_nonzzero_31161))) {
                ((__global
                  float *) mem_30388)[squot64(sext_i32_i64(virt_group_id_31172) *
                                              squot64(segred_group_sizze_23647,
                                                      segment_sizze_nonzzero_31161) +
                                              sext_i32_i64(local_tid_31164),
                                              N_20399) * N_20399 +
                                      (sext_i32_i64(virt_group_id_31172) *
                                       squot64(segred_group_sizze_23647,
                                               segment_sizze_nonzzero_31161) +
                                       sext_i32_i64(local_tid_31164) -
                                       squot64(sext_i32_i64(virt_group_id_31172) *
                                               squot64(segred_group_sizze_23647,
                                                       segment_sizze_nonzzero_31161) +
                                               sext_i32_i64(local_tid_31164),
                                               N_20399) * N_20399)] = ((__local
                                                                        float *) red_arr_mem_31168)[(sext_i32_i64(local_tid_31164) +
                                                                                                     1) *
                                                                                                    segment_sizze_nonzzero_31161 -
                                                                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_23647
}
__kernel void mainDetailedzisegred_small_24167(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31422_backing_aligned_0,
                                               int64_t N_20399, int64_t m_20400,
                                               int64_t res_20413,
                                               int64_t num_groups_24214,
                                               __global
                                               unsigned char *res_mem_30432,
                                               __global
                                               unsigned char *mem_30499,
                                               __global
                                               unsigned char *mem_30502,
                                               int64_t segment_sizze_nonzzero_31415)
{
    #define segred_group_sizze_24213 (mainDetailedzisegred_group_sizze_24161)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31422_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31422_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31417;
    int32_t local_tid_31418;
    int64_t group_sizze_31421;
    int32_t wave_sizze_31420;
    int32_t group_tid_31419;
    
    global_tid_31417 = get_global_id(0);
    local_tid_31418 = get_local_id(0);
    group_sizze_31421 = get_local_size(0);
    wave_sizze_31420 = LOCKSTEP_WIDTH;
    group_tid_31419 = get_group_id(0);
    
    int32_t phys_tid_24167;
    
    phys_tid_24167 = global_tid_31417;
    
    __local char *red_arr_mem_31422;
    
    red_arr_mem_31422 = (__local char *) red_arr_mem_31422_backing_0;
    
    int32_t phys_group_id_31424;
    
    phys_group_id_31424 = get_group_id(0);
    for (int32_t i_31425 = 0; i_31425 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400,
                                          squot64(segred_group_sizze_24213,
                                                  segment_sizze_nonzzero_31415))) -
                   phys_group_id_31424, sext_i64_i32(num_groups_24214));
         i_31425++) {
        int32_t virt_group_id_31426 = phys_group_id_31424 + i_31425 *
                sext_i64_i32(num_groups_24214);
        int64_t gtid_24158 = squot64(sext_i32_i64(local_tid_31418),
                                     segment_sizze_nonzzero_31415) +
                sext_i32_i64(virt_group_id_31426) *
                squot64(segred_group_sizze_24213, segment_sizze_nonzzero_31415);
        int64_t gtid_24166 = srem64(sext_i32_i64(local_tid_31418), res_20413);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20413) && (slt64(gtid_24158, m_20400) &&
                                        slt64(sext_i32_i64(local_tid_31418),
                                              res_20413 *
                                              squot64(segred_group_sizze_24213,
                                                      segment_sizze_nonzzero_31415)))) {
                int32_t res_24221 = ((__global
                                      int32_t *) mem_30499)[gtid_24158];
                int32_t index_primexp_28754 = sext_i64_i32(gtid_24166);
                bool cond_24223 = slt32(index_primexp_28754, res_24221);
                float res_24224;
                
                if (cond_24223) {
                    int64_t i_24225 = sext_i32_i64(index_primexp_28754);
                    float res_24226 = ((__global
                                        float *) res_mem_30432)[gtid_24158 *
                                                                N_20399 +
                                                                i_24225];
                    
                    res_24224 = res_24226;
                } else {
                    res_24224 = 0.0F;
                }
                
                float res_24227 = res_24224 * res_24224;
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                        res_24227;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20413)) {
            // perform segmented scan to imitate reduction
            {
                float x_24217;
                float x_24218;
                float x_31427;
                float x_31428;
                bool ltid_in_bounds_31430;
                
                ltid_in_bounds_31430 = slt64(sext_i32_i64(local_tid_31418),
                                             res_20413 *
                                             squot64(segred_group_sizze_24213,
                                                     segment_sizze_nonzzero_31415));
                
                int32_t skip_threads_31431;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31430) {
                        x_24218 = ((volatile __local
                                    float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)];
                        if ((local_tid_31418 - squot32(local_tid_31418, 32) *
                             32) == 0) {
                            x_24217 = x_24218;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31431 = 1;
                    while (slt32(skip_threads_31431, 32)) {
                        if (sle32(skip_threads_31431, local_tid_31418 -
                                  squot32(local_tid_31418, 32) * 32) &&
                            ltid_in_bounds_31430) {
                            // read operands
                            {
                                x_24217 = ((volatile __local
                                            float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418) -
                                                                        sext_i32_i64(skip_threads_31431)];
                            }
                            // perform operation
                            {
                                bool inactive_31432 =
                                     slt64(srem64(sext_i32_i64(local_tid_31418),
                                                  res_20413),
                                           sext_i32_i64(local_tid_31418) -
                                           sext_i32_i64(local_tid_31418 -
                                           skip_threads_31431));
                                
                                if (inactive_31432) {
                                    x_24217 = x_24218;
                                }
                                if (!inactive_31432) {
                                    float res_24219 = x_24217 + x_24218;
                                    
                                    x_24217 = res_24219;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31420, skip_threads_31431)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31431, local_tid_31418 -
                                  squot32(local_tid_31418, 32) * 32) &&
                            ltid_in_bounds_31430) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                                    x_24217;
                                x_24218 = x_24217;
                            }
                        }
                        if (sle32(wave_sizze_31420, skip_threads_31431)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31431 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31418 - squot32(local_tid_31418, 32) * 32) ==
                        31 && ltid_in_bounds_31430) {
                        ((volatile __local
                          float *) red_arr_mem_31422)[sext_i32_i64(squot32(local_tid_31418,
                                                                           32))] =
                            x_24217;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31433;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31418, 32) == 0 &&
                            ltid_in_bounds_31430) {
                            x_31428 = ((volatile __local
                                        float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)];
                            if ((local_tid_31418 - squot32(local_tid_31418,
                                                           32) * 32) == 0) {
                                x_31427 = x_31428;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31433 = 1;
                        while (slt32(skip_threads_31433, 32)) {
                            if (sle32(skip_threads_31433, local_tid_31418 -
                                      squot32(local_tid_31418, 32) * 32) &&
                                (squot32(local_tid_31418, 32) == 0 &&
                                 ltid_in_bounds_31430)) {
                                // read operands
                                {
                                    x_31427 = ((volatile __local
                                                float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418) -
                                                                            sext_i32_i64(skip_threads_31433)];
                                }
                                // perform operation
                                {
                                    bool inactive_31434 =
                                         slt64(srem64(sext_i32_i64(local_tid_31418 *
                                                      32 + 32 - 1), res_20413),
                                               sext_i32_i64(local_tid_31418 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31418 -
                                                             skip_threads_31433) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31434) {
                                        x_31427 = x_31428;
                                    }
                                    if (!inactive_31434) {
                                        float res_31429 = x_31427 + x_31428;
                                        
                                        x_31427 = res_31429;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31420, skip_threads_31433)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31433, local_tid_31418 -
                                      squot32(local_tid_31418, 32) * 32) &&
                                (squot32(local_tid_31418, 32) == 0 &&
                                 ltid_in_bounds_31430)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                                        x_31427;
                                    x_31428 = x_31427;
                                }
                            }
                            if (sle32(wave_sizze_31420, skip_threads_31433)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31433 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31418, 32) == 0 ||
                          !ltid_in_bounds_31430)) {
                        // read operands
                        {
                            x_24218 = x_24217;
                            x_24217 = ((__local
                                        float *) red_arr_mem_31422)[sext_i32_i64(squot32(local_tid_31418,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31435 =
                                 slt64(srem64(sext_i32_i64(local_tid_31418),
                                              res_20413),
                                       sext_i32_i64(local_tid_31418) -
                                       sext_i32_i64(squot32(local_tid_31418,
                                                            32) * 32 - 1));
                            
                            if (inactive_31435) {
                                x_24217 = x_24218;
                            }
                            if (!inactive_31435) {
                                float res_24219 = x_24217 + x_24218;
                                
                                x_24217 = res_24219;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                                x_24217;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31418, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31422)[sext_i32_i64(local_tid_31418)] =
                            x_24218;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31426) *
                      squot64(segred_group_sizze_24213,
                              segment_sizze_nonzzero_31415) +
                      sext_i32_i64(local_tid_31418), m_20400) &&
                slt64(sext_i32_i64(local_tid_31418),
                      squot64(segred_group_sizze_24213,
                              segment_sizze_nonzzero_31415))) {
                ((__global
                  float *) mem_30502)[sext_i32_i64(virt_group_id_31426) *
                                      squot64(segred_group_sizze_24213,
                                              segment_sizze_nonzzero_31415) +
                                      sext_i32_i64(local_tid_31418)] = ((__local
                                                                         float *) red_arr_mem_31422)[(sext_i32_i64(local_tid_31418) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31415 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24213
}
__kernel void mainDetailedzisegred_small_24188(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31362_backing_aligned_0,
                                               int64_t m_20400, int64_t N_20401,
                                               int64_t res_20413,
                                               int64_t num_groups_24200,
                                               __global
                                               unsigned char *images_mem_29973,
                                               __global
                                               unsigned char *mem_30499,
                                               int64_t segment_sizze_nonzzero_31355)
{
    #define segred_group_sizze_24199 (mainDetailedzisegred_group_sizze_24182)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31362_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31362_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31357;
    int32_t local_tid_31358;
    int64_t group_sizze_31361;
    int32_t wave_sizze_31360;
    int32_t group_tid_31359;
    
    global_tid_31357 = get_global_id(0);
    local_tid_31358 = get_local_id(0);
    group_sizze_31361 = get_local_size(0);
    wave_sizze_31360 = LOCKSTEP_WIDTH;
    group_tid_31359 = get_group_id(0);
    
    int32_t phys_tid_24188;
    
    phys_tid_24188 = global_tid_31357;
    
    __local char *red_arr_mem_31362;
    
    red_arr_mem_31362 = (__local char *) red_arr_mem_31362_backing_0;
    
    int32_t phys_group_id_31364;
    
    phys_group_id_31364 = get_group_id(0);
    for (int32_t i_31365 = 0; i_31365 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400,
                                          squot64(segred_group_sizze_24199,
                                                  segment_sizze_nonzzero_31355))) -
                   phys_group_id_31364, sext_i64_i32(num_groups_24200));
         i_31365++) {
        int32_t virt_group_id_31366 = phys_group_id_31364 + i_31365 *
                sext_i64_i32(num_groups_24200);
        int64_t gtid_24179 = squot64(sext_i32_i64(local_tid_31358),
                                     segment_sizze_nonzzero_31355) +
                sext_i32_i64(virt_group_id_31366) *
                squot64(segred_group_sizze_24199, segment_sizze_nonzzero_31355);
        int64_t gtid_24187 = srem64(sext_i32_i64(local_tid_31358), res_20413);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20413) && (slt64(gtid_24179, m_20400) &&
                                        slt64(sext_i32_i64(local_tid_31358),
                                              res_20413 *
                                              squot64(segred_group_sizze_24199,
                                                      segment_sizze_nonzzero_31355)))) {
                float x_24207 = ((__global
                                  float *) images_mem_29973)[gtid_24179 *
                                                             N_20401 +
                                                             gtid_24187];
                bool res_24208;
                
                res_24208 = futrts_isnan32(x_24207);
                
                bool cond_24209 = !res_24208;
                int32_t res_24210 = btoi_bool_i32(cond_24209);
                
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                        res_24210;
                }
            } else {
                ((__local
                  int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                    0;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20413)) {
            // perform segmented scan to imitate reduction
            {
                int32_t x_24203;
                int32_t x_24204;
                int32_t x_31367;
                int32_t x_31368;
                bool ltid_in_bounds_31370;
                
                ltid_in_bounds_31370 = slt64(sext_i32_i64(local_tid_31358),
                                             res_20413 *
                                             squot64(segred_group_sizze_24199,
                                                     segment_sizze_nonzzero_31355));
                
                int32_t skip_threads_31371;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31370) {
                        x_24204 = ((volatile __local
                                    int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)];
                        if ((local_tid_31358 - squot32(local_tid_31358, 32) *
                             32) == 0) {
                            x_24203 = x_24204;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31371 = 1;
                    while (slt32(skip_threads_31371, 32)) {
                        if (sle32(skip_threads_31371, local_tid_31358 -
                                  squot32(local_tid_31358, 32) * 32) &&
                            ltid_in_bounds_31370) {
                            // read operands
                            {
                                x_24203 = ((volatile __local
                                            int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358) -
                                                                          sext_i32_i64(skip_threads_31371)];
                            }
                            // perform operation
                            {
                                bool inactive_31372 =
                                     slt64(srem64(sext_i32_i64(local_tid_31358),
                                                  res_20413),
                                           sext_i32_i64(local_tid_31358) -
                                           sext_i32_i64(local_tid_31358 -
                                           skip_threads_31371));
                                
                                if (inactive_31372) {
                                    x_24203 = x_24204;
                                }
                                if (!inactive_31372) {
                                    int32_t res_24205 = add32(x_24203, x_24204);
                                    
                                    x_24203 = res_24205;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31360, skip_threads_31371)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31371, local_tid_31358 -
                                  squot32(local_tid_31358, 32) * 32) &&
                            ltid_in_bounds_31370) {
                            // write result
                            {
                                ((volatile __local
                                  int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                                    x_24203;
                                x_24204 = x_24203;
                            }
                        }
                        if (sle32(wave_sizze_31360, skip_threads_31371)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31371 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31358 - squot32(local_tid_31358, 32) * 32) ==
                        31 && ltid_in_bounds_31370) {
                        ((volatile __local
                          int32_t *) red_arr_mem_31362)[sext_i32_i64(squot32(local_tid_31358,
                                                                             32))] =
                            x_24203;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31373;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31358, 32) == 0 &&
                            ltid_in_bounds_31370) {
                            x_31368 = ((volatile __local
                                        int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)];
                            if ((local_tid_31358 - squot32(local_tid_31358,
                                                           32) * 32) == 0) {
                                x_31367 = x_31368;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31373 = 1;
                        while (slt32(skip_threads_31373, 32)) {
                            if (sle32(skip_threads_31373, local_tid_31358 -
                                      squot32(local_tid_31358, 32) * 32) &&
                                (squot32(local_tid_31358, 32) == 0 &&
                                 ltid_in_bounds_31370)) {
                                // read operands
                                {
                                    x_31367 = ((volatile __local
                                                int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358) -
                                                                              sext_i32_i64(skip_threads_31373)];
                                }
                                // perform operation
                                {
                                    bool inactive_31374 =
                                         slt64(srem64(sext_i32_i64(local_tid_31358 *
                                                      32 + 32 - 1), res_20413),
                                               sext_i32_i64(local_tid_31358 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31358 -
                                                             skip_threads_31373) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31374) {
                                        x_31367 = x_31368;
                                    }
                                    if (!inactive_31374) {
                                        int32_t res_31369 = add32(x_31367,
                                                                  x_31368);
                                        
                                        x_31367 = res_31369;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31360, skip_threads_31373)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31373, local_tid_31358 -
                                      squot32(local_tid_31358, 32) * 32) &&
                                (squot32(local_tid_31358, 32) == 0 &&
                                 ltid_in_bounds_31370)) {
                                // write result
                                {
                                    ((volatile __local
                                      int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                                        x_31367;
                                    x_31368 = x_31367;
                                }
                            }
                            if (sle32(wave_sizze_31360, skip_threads_31373)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31373 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31358, 32) == 0 ||
                          !ltid_in_bounds_31370)) {
                        // read operands
                        {
                            x_24204 = x_24203;
                            x_24203 = ((__local
                                        int32_t *) red_arr_mem_31362)[sext_i32_i64(squot32(local_tid_31358,
                                                                                           32)) -
                                                                      1];
                        }
                        // perform operation
                        {
                            bool inactive_31375 =
                                 slt64(srem64(sext_i32_i64(local_tid_31358),
                                              res_20413),
                                       sext_i32_i64(local_tid_31358) -
                                       sext_i32_i64(squot32(local_tid_31358,
                                                            32) * 32 - 1));
                            
                            if (inactive_31375) {
                                x_24203 = x_24204;
                            }
                            if (!inactive_31375) {
                                int32_t res_24205 = add32(x_24203, x_24204);
                                
                                x_24203 = res_24205;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                                x_24203;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31358, 32) == 0) {
                        ((__local
                          int32_t *) red_arr_mem_31362)[sext_i32_i64(local_tid_31358)] =
                            x_24204;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31366) *
                      squot64(segred_group_sizze_24199,
                              segment_sizze_nonzzero_31355) +
                      sext_i32_i64(local_tid_31358), m_20400) &&
                slt64(sext_i32_i64(local_tid_31358),
                      squot64(segred_group_sizze_24199,
                              segment_sizze_nonzzero_31355))) {
                ((__global
                  int32_t *) mem_30499)[sext_i32_i64(virt_group_id_31366) *
                                        squot64(segred_group_sizze_24199,
                                                segment_sizze_nonzzero_31355) +
                                        sext_i32_i64(local_tid_31358)] =
                    ((__local
                      int32_t *) red_arr_mem_31362)[(sext_i32_i64(local_tid_31358) +
                                                     1) *
                                                    segment_sizze_nonzzero_31355 -
                                                    1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24199
}
__kernel void mainDetailedzisegred_small_24339(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31531_backing_aligned_0,
                                               int64_t N_20399, int64_t m_20400,
                                               int64_t res_20761,
                                               int64_t num_groups_24357,
                                               __global
                                               unsigned char *res_mem_30432,
                                               __global
                                               unsigned char *res_mem_30511,
                                               __global
                                               unsigned char *res_mem_30512,
                                               __global
                                               unsigned char *mem_30561,
                                               int64_t segment_sizze_nonzzero_31524)
{
    #define segred_group_sizze_24356 (mainDetailedzisegred_group_sizze_24333)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31531_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31531_backing_aligned_0;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31526;
    int32_t local_tid_31527;
    int64_t group_sizze_31530;
    int32_t wave_sizze_31529;
    int32_t group_tid_31528;
    
    global_tid_31526 = get_global_id(0);
    local_tid_31527 = get_local_id(0);
    group_sizze_31530 = get_local_size(0);
    wave_sizze_31529 = LOCKSTEP_WIDTH;
    group_tid_31528 = get_group_id(0);
    
    int32_t phys_tid_24339;
    
    phys_tid_24339 = global_tid_31526;
    
    __local char *red_arr_mem_31531;
    
    red_arr_mem_31531 = (__local char *) red_arr_mem_31531_backing_0;
    
    int32_t phys_group_id_31533;
    
    phys_group_id_31533 = get_group_id(0);
    for (int32_t i_31534 = 0; i_31534 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400,
                                          squot64(segred_group_sizze_24356,
                                                  segment_sizze_nonzzero_31524))) -
                   phys_group_id_31533, sext_i64_i32(num_groups_24357));
         i_31534++) {
        int32_t virt_group_id_31535 = phys_group_id_31533 + i_31534 *
                sext_i64_i32(num_groups_24357);
        int64_t gtid_24330 = squot64(sext_i32_i64(local_tid_31527),
                                     segment_sizze_nonzzero_31524) +
                sext_i32_i64(virt_group_id_31535) *
                squot64(segred_group_sizze_24356, segment_sizze_nonzzero_31524);
        int64_t gtid_24338 = srem64(sext_i32_i64(local_tid_31527), res_20761);
        
        // apply map function if in bounds
        {
            if (slt64(0, res_20761) && (slt64(gtid_24330, m_20400) &&
                                        slt64(sext_i32_i64(local_tid_31527),
                                              res_20761 *
                                              squot64(segred_group_sizze_24356,
                                                      segment_sizze_nonzzero_31524)))) {
                int32_t x_24365 = ((__global
                                    int32_t *) res_mem_30511)[gtid_24330];
                int32_t index_primexp_28759 = sext_i64_i32(gtid_24338);
                bool cond_24367 = slt32(index_primexp_28759, x_24365);
                float res_24368;
                
                if (cond_24367) {
                    int32_t x_24364 = ((__global
                                        int32_t *) res_mem_30512)[gtid_24330];
                    int32_t x_24369 = add32(x_24364, index_primexp_28759);
                    int32_t x_24370 = sub32(x_24369, x_24365);
                    int32_t i_24371 = add32(1, x_24370);
                    int64_t i_24372 = sext_i32_i64(i_24371);
                    float res_24373 = ((__global
                                        float *) res_mem_30432)[gtid_24330 *
                                                                N_20399 +
                                                                i_24372];
                    
                    res_24368 = res_24373;
                } else {
                    res_24368 = 0.0F;
                }
                // save map-out results
                { }
                // save results to be reduced
                {
                    ((__local
                      float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                        res_24368;
                }
            } else {
                ((__local
                  float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, res_20761)) {
            // perform segmented scan to imitate reduction
            {
                float x_24360;
                float x_24361;
                float x_31536;
                float x_31537;
                bool ltid_in_bounds_31539;
                
                ltid_in_bounds_31539 = slt64(sext_i32_i64(local_tid_31527),
                                             res_20761 *
                                             squot64(segred_group_sizze_24356,
                                                     segment_sizze_nonzzero_31524));
                
                int32_t skip_threads_31540;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31539) {
                        x_24361 = ((volatile __local
                                    float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)];
                        if ((local_tid_31527 - squot32(local_tid_31527, 32) *
                             32) == 0) {
                            x_24360 = x_24361;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31540 = 1;
                    while (slt32(skip_threads_31540, 32)) {
                        if (sle32(skip_threads_31540, local_tid_31527 -
                                  squot32(local_tid_31527, 32) * 32) &&
                            ltid_in_bounds_31539) {
                            // read operands
                            {
                                x_24360 = ((volatile __local
                                            float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527) -
                                                                        sext_i32_i64(skip_threads_31540)];
                            }
                            // perform operation
                            {
                                bool inactive_31541 =
                                     slt64(srem64(sext_i32_i64(local_tid_31527),
                                                  res_20761),
                                           sext_i32_i64(local_tid_31527) -
                                           sext_i32_i64(local_tid_31527 -
                                           skip_threads_31540));
                                
                                if (inactive_31541) {
                                    x_24360 = x_24361;
                                }
                                if (!inactive_31541) {
                                    float res_24362 = x_24360 + x_24361;
                                    
                                    x_24360 = res_24362;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31529, skip_threads_31540)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31540, local_tid_31527 -
                                  squot32(local_tid_31527, 32) * 32) &&
                            ltid_in_bounds_31539) {
                            // write result
                            {
                                ((volatile __local
                                  float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                                    x_24360;
                                x_24361 = x_24360;
                            }
                        }
                        if (sle32(wave_sizze_31529, skip_threads_31540)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31540 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31527 - squot32(local_tid_31527, 32) * 32) ==
                        31 && ltid_in_bounds_31539) {
                        ((volatile __local
                          float *) red_arr_mem_31531)[sext_i32_i64(squot32(local_tid_31527,
                                                                           32))] =
                            x_24360;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31542;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31527, 32) == 0 &&
                            ltid_in_bounds_31539) {
                            x_31537 = ((volatile __local
                                        float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)];
                            if ((local_tid_31527 - squot32(local_tid_31527,
                                                           32) * 32) == 0) {
                                x_31536 = x_31537;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31542 = 1;
                        while (slt32(skip_threads_31542, 32)) {
                            if (sle32(skip_threads_31542, local_tid_31527 -
                                      squot32(local_tid_31527, 32) * 32) &&
                                (squot32(local_tid_31527, 32) == 0 &&
                                 ltid_in_bounds_31539)) {
                                // read operands
                                {
                                    x_31536 = ((volatile __local
                                                float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527) -
                                                                            sext_i32_i64(skip_threads_31542)];
                                }
                                // perform operation
                                {
                                    bool inactive_31543 =
                                         slt64(srem64(sext_i32_i64(local_tid_31527 *
                                                      32 + 32 - 1), res_20761),
                                               sext_i32_i64(local_tid_31527 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31527 -
                                                             skip_threads_31542) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31543) {
                                        x_31536 = x_31537;
                                    }
                                    if (!inactive_31543) {
                                        float res_31538 = x_31536 + x_31537;
                                        
                                        x_31536 = res_31538;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31529, skip_threads_31542)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31542, local_tid_31527 -
                                      squot32(local_tid_31527, 32) * 32) &&
                                (squot32(local_tid_31527, 32) == 0 &&
                                 ltid_in_bounds_31539)) {
                                // write result
                                {
                                    ((volatile __local
                                      float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                                        x_31536;
                                    x_31537 = x_31536;
                                }
                            }
                            if (sle32(wave_sizze_31529, skip_threads_31542)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31542 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31527, 32) == 0 ||
                          !ltid_in_bounds_31539)) {
                        // read operands
                        {
                            x_24361 = x_24360;
                            x_24360 = ((__local
                                        float *) red_arr_mem_31531)[sext_i32_i64(squot32(local_tid_31527,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31544 =
                                 slt64(srem64(sext_i32_i64(local_tid_31527),
                                              res_20761),
                                       sext_i32_i64(local_tid_31527) -
                                       sext_i32_i64(squot32(local_tid_31527,
                                                            32) * 32 - 1));
                            
                            if (inactive_31544) {
                                x_24360 = x_24361;
                            }
                            if (!inactive_31544) {
                                float res_24362 = x_24360 + x_24361;
                                
                                x_24360 = res_24362;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                                x_24360;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31527, 32) == 0) {
                        ((__local
                          float *) red_arr_mem_31531)[sext_i32_i64(local_tid_31527)] =
                            x_24361;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31535) *
                      squot64(segred_group_sizze_24356,
                              segment_sizze_nonzzero_31524) +
                      sext_i32_i64(local_tid_31527), m_20400) &&
                slt64(sext_i32_i64(local_tid_31527),
                      squot64(segred_group_sizze_24356,
                              segment_sizze_nonzzero_31524))) {
                ((__global
                  float *) mem_30561)[sext_i32_i64(virt_group_id_31535) *
                                      squot64(segred_group_sizze_24356,
                                              segment_sizze_nonzzero_31524) +
                                      sext_i32_i64(local_tid_31527)] = ((__local
                                                                         float *) red_arr_mem_31531)[(sext_i32_i64(local_tid_31527) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31524 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_24356
}
__kernel void mainDetailedzisegred_small_24938(__global int *global_failure,
                                               __local volatile
                                               int64_t *red_arr_mem_31693_backing_aligned_0,
                                               __local volatile
                                               int64_t *red_arr_mem_31691_backing_aligned_1,
                                               __local volatile
                                               int64_t *red_arr_mem_31689_backing_aligned_2,
                                               int64_t m_20400,
                                               int64_t iota32_arg_20783,
                                               int64_t num_groups_25111,
                                               __global
                                               unsigned char *mem_30567,
                                               __global
                                               unsigned char *mem_30593,
                                               __global
                                               unsigned char *mem_30595,
                                               __global
                                               unsigned char *mem_30599,
                                               __global
                                               unsigned char *mem_30602,
                                               __global
                                               unsigned char *mem_30604,
                                               __global
                                               unsigned char *mem_30606,
                                               __global
                                               unsigned char *mem_30609,
                                               int64_t segment_sizze_nonzzero_31682)
{
    #define segred_group_sizze_25110 (mainDetailedzisegred_group_sizze_24932)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    __local volatile char *restrict red_arr_mem_31693_backing_2 =
                          (__local volatile
                           char *) red_arr_mem_31693_backing_aligned_0;
    __local volatile char *restrict red_arr_mem_31691_backing_1 =
                          (__local volatile
                           char *) red_arr_mem_31691_backing_aligned_1;
    __local volatile char *restrict red_arr_mem_31689_backing_0 =
                          (__local volatile
                           char *) red_arr_mem_31689_backing_aligned_2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_31684;
    int32_t local_tid_31685;
    int64_t group_sizze_31688;
    int32_t wave_sizze_31687;
    int32_t group_tid_31686;
    
    global_tid_31684 = get_global_id(0);
    local_tid_31685 = get_local_id(0);
    group_sizze_31688 = get_local_size(0);
    wave_sizze_31687 = LOCKSTEP_WIDTH;
    group_tid_31686 = get_group_id(0);
    
    int32_t phys_tid_24938;
    
    phys_tid_24938 = global_tid_31684;
    
    __local char *red_arr_mem_31689;
    
    red_arr_mem_31689 = (__local char *) red_arr_mem_31689_backing_0;
    
    __local char *red_arr_mem_31691;
    
    red_arr_mem_31691 = (__local char *) red_arr_mem_31691_backing_1;
    
    __local char *red_arr_mem_31693;
    
    red_arr_mem_31693 = (__local char *) red_arr_mem_31693_backing_2;
    
    int32_t phys_group_id_31695;
    
    phys_group_id_31695 = get_group_id(0);
    for (int32_t i_31696 = 0; i_31696 <
         sdiv_up32(sext_i64_i32(sdiv_up64(m_20400,
                                          squot64(segred_group_sizze_25110,
                                                  segment_sizze_nonzzero_31682))) -
                   phys_group_id_31695, sext_i64_i32(num_groups_25111));
         i_31696++) {
        int32_t virt_group_id_31697 = phys_group_id_31695 + i_31696 *
                sext_i64_i32(num_groups_25111);
        int64_t gtid_24929 = squot64(sext_i32_i64(local_tid_31685),
                                     segment_sizze_nonzzero_31682) +
                sext_i32_i64(virt_group_id_31697) *
                squot64(segred_group_sizze_25110, segment_sizze_nonzzero_31682);
        int64_t gtid_24937 = srem64(sext_i32_i64(local_tid_31685),
                                    iota32_arg_20783);
        
        // apply map function if in bounds
        {
            if (slt64(0, iota32_arg_20783) && (slt64(gtid_24929, m_20400) &&
                                               slt64(sext_i32_i64(local_tid_31685),
                                                     iota32_arg_20783 *
                                                     squot64(segred_group_sizze_25110,
                                                             segment_sizze_nonzzero_31682)))) {
                int32_t y_25131 = ((__global int32_t *) mem_30595)[gtid_24929];
                float y_25132 = ((__global float *) mem_30593)[gtid_24929];
                float x_25136 = ((__global float *) mem_30599)[gtid_24929 *
                                                               iota32_arg_20783 +
                                                               gtid_24937];
                float x_25137 = ((__global float *) mem_30567)[gtid_24937];
                int32_t index_primexp_28776 = sext_i64_i32(gtid_24937);
                float res_25140 = x_25136 / y_25132;
                bool cond_25141 = slt32(index_primexp_28776, y_25131);
                bool res_25142;
                
                res_25142 = futrts_isnan32(res_25140);
                
                bool res_25143 = !res_25142;
                bool x_25144 = cond_25141 && res_25143;
                float res_25145 = (float) fabs(res_25140);
                bool res_25146 = x_25137 < res_25145;
                bool x_25147 = x_25144 && res_25146;
                float res_25148;
                
                if (cond_25141) {
                    res_25148 = res_25140;
                } else {
                    res_25148 = 0.0F;
                }
                // save map-out results
                {
                    ((__global float *) mem_30609)[gtid_24929 *
                                                   iota32_arg_20783 +
                                                   gtid_24937] = res_25140;
                }
                // save results to be reduced
                {
                    ((__local
                      bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] =
                        x_25147;
                    ((__local
                      int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                        index_primexp_28776;
                    ((__local
                      float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                        res_25148;
                }
            } else {
                ((__local
                  bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] = 0;
                ((__local
                  int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                    -1;
                ((__local
                  float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                    0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64(0, iota32_arg_20783)) {
            // perform segmented scan to imitate reduction
            {
                bool x_25117;
                int32_t x_25118;
                float x_25119;
                bool x_25120;
                int32_t x_25121;
                float x_25122;
                bool x_31698;
                int32_t x_31699;
                float x_31700;
                bool x_31701;
                int32_t x_31702;
                float x_31703;
                bool ltid_in_bounds_31712;
                
                ltid_in_bounds_31712 = slt64(sext_i32_i64(local_tid_31685),
                                             iota32_arg_20783 *
                                             squot64(segred_group_sizze_25110,
                                                     segment_sizze_nonzzero_31682));
                
                int32_t skip_threads_31713;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31712) {
                        x_25120 = ((volatile __local
                                    bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)];
                        x_25121 = ((volatile __local
                                    int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)];
                        x_25122 = ((volatile __local
                                    float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)];
                        if ((local_tid_31685 - squot32(local_tid_31685, 32) *
                             32) == 0) {
                            x_25117 = x_25120;
                            x_25118 = x_25121;
                            x_25119 = x_25122;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31713 = 1;
                    while (slt32(skip_threads_31713, 32)) {
                        if (sle32(skip_threads_31713, local_tid_31685 -
                                  squot32(local_tid_31685, 32) * 32) &&
                            ltid_in_bounds_31712) {
                            // read operands
                            {
                                x_25117 = ((volatile __local
                                            bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685) -
                                                                       sext_i32_i64(skip_threads_31713)];
                                x_25118 = ((volatile __local
                                            int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685) -
                                                                          sext_i32_i64(skip_threads_31713)];
                                x_25119 = ((volatile __local
                                            float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685) -
                                                                        sext_i32_i64(skip_threads_31713)];
                            }
                            // perform operation
                            {
                                bool inactive_31714 =
                                     slt64(srem64(sext_i32_i64(local_tid_31685),
                                                  iota32_arg_20783),
                                           sext_i32_i64(local_tid_31685) -
                                           sext_i32_i64(local_tid_31685 -
                                           skip_threads_31713));
                                
                                if (inactive_31714) {
                                    x_25117 = x_25120;
                                    x_25118 = x_25121;
                                    x_25119 = x_25122;
                                }
                                if (!inactive_31714) {
                                    bool res_25123;
                                    int32_t res_25124;
                                    
                                    if (x_25117) {
                                        res_25123 = x_25117;
                                        res_25124 = x_25118;
                                    } else {
                                        bool x_25125 = x_25120 && x_25120;
                                        bool x_25126 = !x_25120;
                                        bool y_25127 = x_25117 && x_25126;
                                        bool res_25128 = x_25125 || y_25127;
                                        int32_t res_25129;
                                        
                                        if (x_25120) {
                                            res_25129 = x_25121;
                                        } else {
                                            res_25129 = x_25118;
                                        }
                                        res_25123 = res_25128;
                                        res_25124 = res_25129;
                                    }
                                    
                                    float res_25130 = x_25119 + x_25122;
                                    
                                    x_25117 = res_25123;
                                    x_25118 = res_25124;
                                    x_25119 = res_25130;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31687, skip_threads_31713)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (sle32(skip_threads_31713, local_tid_31685 -
                                  squot32(local_tid_31685, 32) * 32) &&
                            ltid_in_bounds_31712) {
                            // write result
                            {
                                ((volatile __local
                                  bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] =
                                    x_25117;
                                x_25120 = x_25117;
                                ((volatile __local
                                  int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                                    x_25118;
                                x_25121 = x_25118;
                                ((volatile __local
                                  float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                                    x_25119;
                                x_25122 = x_25119;
                            }
                        }
                        if (sle32(wave_sizze_31687, skip_threads_31713)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31713 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31685 - squot32(local_tid_31685, 32) * 32) ==
                        31 && ltid_in_bounds_31712) {
                        ((volatile __local
                          bool *) red_arr_mem_31689)[sext_i32_i64(squot32(local_tid_31685,
                                                                          32))] =
                            x_25117;
                        ((volatile __local
                          int32_t *) red_arr_mem_31691)[sext_i32_i64(squot32(local_tid_31685,
                                                                             32))] =
                            x_25118;
                        ((volatile __local
                          float *) red_arr_mem_31693)[sext_i32_i64(squot32(local_tid_31685,
                                                                           32))] =
                            x_25119;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31715;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31685, 32) == 0 &&
                            ltid_in_bounds_31712) {
                            x_31701 = ((volatile __local
                                        bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)];
                            x_31702 = ((volatile __local
                                        int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)];
                            x_31703 = ((volatile __local
                                        float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)];
                            if ((local_tid_31685 - squot32(local_tid_31685,
                                                           32) * 32) == 0) {
                                x_31698 = x_31701;
                                x_31699 = x_31702;
                                x_31700 = x_31703;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31715 = 1;
                        while (slt32(skip_threads_31715, 32)) {
                            if (sle32(skip_threads_31715, local_tid_31685 -
                                      squot32(local_tid_31685, 32) * 32) &&
                                (squot32(local_tid_31685, 32) == 0 &&
                                 ltid_in_bounds_31712)) {
                                // read operands
                                {
                                    x_31698 = ((volatile __local
                                                bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685) -
                                                                           sext_i32_i64(skip_threads_31715)];
                                    x_31699 = ((volatile __local
                                                int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685) -
                                                                              sext_i32_i64(skip_threads_31715)];
                                    x_31700 = ((volatile __local
                                                float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685) -
                                                                            sext_i32_i64(skip_threads_31715)];
                                }
                                // perform operation
                                {
                                    bool inactive_31716 =
                                         slt64(srem64(sext_i32_i64(local_tid_31685 *
                                                      32 + 32 - 1),
                                                      iota32_arg_20783),
                                               sext_i32_i64(local_tid_31685 *
                                               32 + 32 - 1) -
                                               sext_i32_i64((local_tid_31685 -
                                                             skip_threads_31715) *
                                               32 + 32 - 1));
                                    
                                    if (inactive_31716) {
                                        x_31698 = x_31701;
                                        x_31699 = x_31702;
                                        x_31700 = x_31703;
                                    }
                                    if (!inactive_31716) {
                                        bool res_31704;
                                        int32_t res_31705;
                                        
                                        if (x_31698) {
                                            res_31704 = x_31698;
                                            res_31705 = x_31699;
                                        } else {
                                            bool x_31706 = x_31701 && x_31701;
                                            bool x_31707 = !x_31701;
                                            bool y_31708 = x_31698 && x_31707;
                                            bool res_31709 = x_31706 || y_31708;
                                            int32_t res_31710;
                                            
                                            if (x_31701) {
                                                res_31710 = x_31702;
                                            } else {
                                                res_31710 = x_31699;
                                            }
                                            res_31704 = res_31709;
                                            res_31705 = res_31710;
                                        }
                                        
                                        float res_31711 = x_31700 + x_31703;
                                        
                                        x_31698 = res_31704;
                                        x_31699 = res_31705;
                                        x_31700 = res_31711;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31687, skip_threads_31715)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (sle32(skip_threads_31715, local_tid_31685 -
                                      squot32(local_tid_31685, 32) * 32) &&
                                (squot32(local_tid_31685, 32) == 0 &&
                                 ltid_in_bounds_31712)) {
                                // write result
                                {
                                    ((volatile __local
                                      bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] =
                                        x_31698;
                                    x_31701 = x_31698;
                                    ((volatile __local
                                      int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                                        x_31699;
                                    x_31702 = x_31699;
                                    ((volatile __local
                                      float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                                        x_31700;
                                    x_31703 = x_31700;
                                }
                            }
                            if (sle32(wave_sizze_31687, skip_threads_31715)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31715 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // carry-in for every block except the first
                {
                    if (!(squot32(local_tid_31685, 32) == 0 ||
                          !ltid_in_bounds_31712)) {
                        // read operands
                        {
                            x_25120 = x_25117;
                            x_25121 = x_25118;
                            x_25122 = x_25119;
                            x_25117 = ((__local
                                        bool *) red_arr_mem_31689)[sext_i32_i64(squot32(local_tid_31685,
                                                                                        32)) -
                                                                   1];
                            x_25118 = ((__local
                                        int32_t *) red_arr_mem_31691)[sext_i32_i64(squot32(local_tid_31685,
                                                                                           32)) -
                                                                      1];
                            x_25119 = ((__local
                                        float *) red_arr_mem_31693)[sext_i32_i64(squot32(local_tid_31685,
                                                                                         32)) -
                                                                    1];
                        }
                        // perform operation
                        {
                            bool inactive_31717 =
                                 slt64(srem64(sext_i32_i64(local_tid_31685),
                                              iota32_arg_20783),
                                       sext_i32_i64(local_tid_31685) -
                                       sext_i32_i64(squot32(local_tid_31685,
                                                            32) * 32 - 1));
                            
                            if (inactive_31717) {
                                x_25117 = x_25120;
                                x_25118 = x_25121;
                                x_25119 = x_25122;
                            }
                            if (!inactive_31717) {
                                bool res_25123;
                                int32_t res_25124;
                                
                                if (x_25117) {
                                    res_25123 = x_25117;
                                    res_25124 = x_25118;
                                } else {
                                    bool x_25125 = x_25120 && x_25120;
                                    bool x_25126 = !x_25120;
                                    bool y_25127 = x_25117 && x_25126;
                                    bool res_25128 = x_25125 || y_25127;
                                    int32_t res_25129;
                                    
                                    if (x_25120) {
                                        res_25129 = x_25121;
                                    } else {
                                        res_25129 = x_25118;
                                    }
                                    res_25123 = res_25128;
                                    res_25124 = res_25129;
                                }
                                
                                float res_25130 = x_25119 + x_25122;
                                
                                x_25117 = res_25123;
                                x_25118 = res_25124;
                                x_25119 = res_25130;
                            }
                        }
                        // write final result
                        {
                            ((__local
                              bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] =
                                x_25117;
                            ((__local
                              int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                                x_25118;
                            ((__local
                              float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                                x_25119;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31685, 32) == 0) {
                        ((__local
                          bool *) red_arr_mem_31689)[sext_i32_i64(local_tid_31685)] =
                            x_25120;
                        ((__local
                          int32_t *) red_arr_mem_31691)[sext_i32_i64(local_tid_31685)] =
                            x_25121;
                        ((__local
                          float *) red_arr_mem_31693)[sext_i32_i64(local_tid_31685)] =
                            x_25122;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_group_id_31697) *
                      squot64(segred_group_sizze_25110,
                              segment_sizze_nonzzero_31682) +
                      sext_i32_i64(local_tid_31685), m_20400) &&
                slt64(sext_i32_i64(local_tid_31685),
                      squot64(segred_group_sizze_25110,
                              segment_sizze_nonzzero_31682))) {
                ((__global
                  bool *) mem_30602)[sext_i32_i64(virt_group_id_31697) *
                                     squot64(segred_group_sizze_25110,
                                             segment_sizze_nonzzero_31682) +
                                     sext_i32_i64(local_tid_31685)] = ((__local
                                                                        bool *) red_arr_mem_31689)[(sext_i32_i64(local_tid_31685) +
                                                                                                    1) *
                                                                                                   segment_sizze_nonzzero_31682 -
                                                                                                   1];
                ((__global
                  int32_t *) mem_30604)[sext_i32_i64(virt_group_id_31697) *
                                        squot64(segred_group_sizze_25110,
                                                segment_sizze_nonzzero_31682) +
                                        sext_i32_i64(local_tid_31685)] =
                    ((__local
                      int32_t *) red_arr_mem_31691)[(sext_i32_i64(local_tid_31685) +
                                                     1) *
                                                    segment_sizze_nonzzero_31682 -
                                                    1];
                ((__global
                  float *) mem_30606)[sext_i32_i64(virt_group_id_31697) *
                                      squot64(segred_group_sizze_25110,
                                              segment_sizze_nonzzero_31682) +
                                      sext_i32_i64(local_tid_31685)] = ((__local
                                                                         float *) red_arr_mem_31693)[(sext_i32_i64(local_tid_31685) +
                                                                                                      1) *
                                                                                                     segment_sizze_nonzzero_31682 -
                                                                                                     1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segred_group_sizze_25110
}
__kernel void remove_nanszisegmap_21548(__global int *global_failure,
                                        int64_t m_20385, int64_t n_20386,
                                        int64_t p_20387,
                                        int16_t nan_value_20388, __global
                                        unsigned char *images_mem_29972,
                                        __global unsigned char *mem_29977)
{
    #define segmap_group_sizze_21609 (remove_nanszisegmap_group_sizze_21552)
    
    const int block_dim0 = 0;
    const int block_dim1 = 1;
    const int block_dim2 = 2;
    
    if (*global_failure >= 0)
        return;
    
    int32_t global_tid_30768;
    int32_t local_tid_30769;
    int64_t group_sizze_30772;
    int32_t wave_sizze_30771;
    int32_t group_tid_30770;
    
    global_tid_30768 = get_global_id(0);
    local_tid_30769 = get_local_id(0);
    group_sizze_30772 = get_local_size(0);
    wave_sizze_30771 = LOCKSTEP_WIDTH;
    group_tid_30770 = get_group_id(0);
    
    int32_t phys_tid_21548;
    
    phys_tid_21548 = global_tid_30768;
    
    int64_t gtid_21545;
    
    gtid_21545 = squot64(sext_i32_i64(group_tid_30770) *
                         segmap_group_sizze_21609 +
                         sext_i32_i64(local_tid_30769), n_20386 * p_20387);
    
    int64_t gtid_21546;
    
    gtid_21546 = squot64(sext_i32_i64(group_tid_30770) *
                         segmap_group_sizze_21609 +
                         sext_i32_i64(local_tid_30769) -
                         squot64(sext_i32_i64(group_tid_30770) *
                                 segmap_group_sizze_21609 +
                                 sext_i32_i64(local_tid_30769), n_20386 *
                                 p_20387) * (n_20386 * p_20387), p_20387);
    
    int64_t gtid_21547;
    
    gtid_21547 = sext_i32_i64(group_tid_30770) * segmap_group_sizze_21609 +
        sext_i32_i64(local_tid_30769) - squot64(sext_i32_i64(group_tid_30770) *
                                                segmap_group_sizze_21609 +
                                                sext_i32_i64(local_tid_30769),
                                                n_20386 * p_20387) * (n_20386 *
                                                                      p_20387) -
        squot64(sext_i32_i64(group_tid_30770) * segmap_group_sizze_21609 +
                sext_i32_i64(local_tid_30769) -
                squot64(sext_i32_i64(group_tid_30770) *
                        segmap_group_sizze_21609 +
                        sext_i32_i64(local_tid_30769), n_20386 * p_20387) *
                (n_20386 * p_20387), p_20387) * p_20387;
    if ((slt64(gtid_21545, m_20385) && slt64(gtid_21546, n_20386)) &&
        slt64(gtid_21547, p_20387)) {
        int16_t x_21612 = ((__global int16_t *) images_mem_29972)[gtid_21545 *
                                                                  (p_20387 *
                                                                   n_20386) +
                                                                  gtid_21546 *
                                                                  p_20387 +
                                                                  gtid_21547];
        bool cond_21613 = x_21612 == nan_value_20388;
        float res_21614;
        
        if (cond_21613) {
            res_21614 = NAN;
        } else {
            float res_21615 = sitofp_i16_f32(x_21612);
            
            res_21614 = res_21615;
        }
        ((__global float *) mem_29977)[gtid_21545 * (p_20387 * n_20386) +
                                       gtid_21546 * p_20387 + gtid_21547] =
            res_21614;
    }
    
  error_0:
    return;
    #undef segmap_group_sizze_21609
}
"""
# Start of values.py.

# Hacky parser/reader/writer for values written in Futhark syntax.
# Used for reading stdin when compiling standalone programs with the
# Python code generator.

import numpy as np
import string
import struct
import sys

class ReaderInput:
    def __init__(self, f):
        self.f = f
        self.lookahead_buffer = []

    def get_char(self):
        if len(self.lookahead_buffer) == 0:
            return self.f.read(1)
        else:
            c = self.lookahead_buffer[0]
            self.lookahead_buffer = self.lookahead_buffer[1:]
            return c

    def unget_char(self, c):
        self.lookahead_buffer = [c] + self.lookahead_buffer

    def get_chars(self, n):
        n1 = min(n, len(self.lookahead_buffer))
        s = b''.join(self.lookahead_buffer[:n1])
        self.lookahead_buffer = self.lookahead_buffer[n1:]
        n2 = n - n1
        if n2 > 0:
            s += self.f.read(n2)
        return s

    def peek_char(self):
        c = self.get_char()
        if c:
            self.unget_char(c)
        return c

def skip_spaces(f):
    c = f.get_char()
    while c != None:
        if c.isspace():
            c = f.get_char()
        elif c == b'-':
          # May be line comment.
          if f.peek_char() == b'-':
            # Yes, line comment. Skip to end of line.
            while (c != b'\n' and c != None):
              c = f.get_char()
          else:
            break
        else:
          break
    if c:
        f.unget_char(c)

def parse_specific_char(f, expected):
    got = f.get_char()
    if got != expected:
        f.unget_char(got)
        raise ValueError
    return True

def parse_specific_string(f, s):
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    read = []
    try:
        for c in bs:
            parse_specific_char(f, c)
            read.append(c)
        return True
    except ValueError:
        for c in read[::-1]:
            f.unget_char(c)
        raise

def optional(p, *args):
    try:
        return p(*args)
    except ValueError:
        return None

def optional_specific_string(f, s):
    c = f.peek_char()
    # This funky mess is intended, and is caused by the fact that if `type(b) ==
    # bytes` then `type(b[0]) == int`, but we need to match each element with a
    # `bytes`, so therefore we make each character an array element
    b = s.encode('utf8')
    bs = [b[i:i+1] for i in range(len(b))]
    if c == bs[0]:
        return parse_specific_string(f, s)
    else:
        return False

def sepBy(p, sep, *args):
    elems = []
    x = optional(p, *args)
    if x != None:
        elems += [x]
        while optional(sep, *args) != None:
            x = p(*args)
            elems += [x]
    return elems

# Assumes '0x' has already been read
def parse_hex_int(f):
    s = b''
    c = f.get_char()
    while c != None:
        if c in b'01234556789ABCDEFabcdef':
            s += c
            c = f.get_char()
        elif c == b'_':
            c = f.get_char() # skip _
        else:
            f.unget_char(c)
            break
    return str(int(s, 16)).encode('utf8') # ugh

def parse_int(f):
    s = b''
    c = f.get_char()
    if c == b'0' and f.peek_char() in b'xX':
        c = f.get_char() # skip X
        return parse_hex_int(f)
    else:
        while c != None:
            if c.isdigit():
                s += c
                c = f.get_char()
            elif c == b'_':
                c = f.get_char() # skip _
            else:
                f.unget_char(c)
                break
        if len(s) == 0:
            raise ValueError
        return s

def parse_int_signed(f):
    s = b''
    c = f.get_char()

    if c == b'-' and f.peek_char().isdigit():
      return c + parse_int(f)
    else:
      if c != b'+':
          f.unget_char(c)
      return parse_int(f)

def read_str_comma(f):
    skip_spaces(f)
    parse_specific_char(f, b',')
    return b','

def read_str_int(f, s):
    skip_spaces(f)
    x = int(parse_int_signed(f))
    optional_specific_string(f, s)
    return x

def read_str_uint(f, s):
    skip_spaces(f)
    x = int(parse_int(f))
    optional_specific_string(f, s)
    return x

def read_str_i8(f):
    return np.int8(read_str_int(f, 'i8'))
def read_str_i16(f):
    return np.int16(read_str_int(f, 'i16'))
def read_str_i32(f):
    return np.int32(read_str_int(f, 'i32'))
def read_str_i64(f):
    return np.int64(read_str_int(f, 'i64'))

def read_str_u8(f):
    return np.uint8(read_str_int(f, 'u8'))
def read_str_u16(f):
    return np.uint16(read_str_int(f, 'u16'))
def read_str_u32(f):
    return np.uint32(read_str_int(f, 'u32'))
def read_str_u64(f):
    return np.uint64(read_str_int(f, 'u64'))

def read_char(f):
    skip_spaces(f)
    parse_specific_char(f, b'\'')
    c = f.get_char()
    parse_specific_char(f, b'\'')
    return c

def read_str_hex_float(f, sign):
    int_part = parse_hex_int(f)
    parse_specific_char(f, b'.')
    frac_part = parse_hex_int(f)
    parse_specific_char(f, b'p')
    exponent = parse_int(f)

    int_val = int(int_part, 16)
    frac_val = float(int(frac_part, 16)) / (16 ** len(frac_part))
    exp_val = int(exponent)

    total_val = (int_val + frac_val) * (2.0 ** exp_val)
    if sign == b'-':
        total_val = -1 * total_val

    return float(total_val)


def read_str_decimal(f):
    skip_spaces(f)
    c = f.get_char()
    if (c == b'-'):
      sign = b'-'
    else:
      f.unget_char(c)
      sign = b''

    # Check for hexadecimal float
    c = f.get_char()
    if (c == '0' and (f.peek_char() in ['x', 'X'])):
        f.get_char()
        return read_str_hex_float(f, sign)
    else:
        f.unget_char(c)

    bef = optional(parse_int, f)
    if bef == None:
        bef = b'0'
        parse_specific_char(f, b'.')
        aft = parse_int(f)
    elif optional(parse_specific_char, f, b'.'):
        aft = parse_int(f)
    else:
        aft = b'0'
    if (optional(parse_specific_char, f, b'E') or
        optional(parse_specific_char, f, b'e')):
        expt = parse_int_signed(f)
    else:
        expt = b'0'
    return float(sign + bef + b'.' + aft + b'E' + expt)

def read_str_f32(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f32.nan')
        return np.float32(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f32.inf')
            return np.float32(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f32.inf')
               return np.float32(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f32')
               return x

def read_str_f64(f):
    skip_spaces(f)
    try:
        parse_specific_string(f, 'f64.nan')
        return np.float64(np.nan)
    except ValueError:
        try:
            parse_specific_string(f, 'f64.inf')
            return np.float64(np.inf)
        except ValueError:
            try:
               parse_specific_string(f, '-f64.inf')
               return np.float64(-np.inf)
            except ValueError:
               x = read_str_decimal(f)
               optional_specific_string(f, 'f64')
               return x

def read_str_bool(f):
    skip_spaces(f)
    if f.peek_char() == b't':
        parse_specific_string(f, 'true')
        return True
    elif f.peek_char() == b'f':
        parse_specific_string(f, 'false')
        return False
    else:
        raise ValueError

def read_str_empty_array(f, type_name, rank):
    parse_specific_string(f, 'empty')
    parse_specific_char(f, b'(')
    dims = []
    for i in range(rank):
        parse_specific_string(f, '[')
        dims += [int(parse_int(f))]
        parse_specific_string(f, ']')
    if np.product(dims) != 0:
        raise ValueError
    parse_specific_string(f, type_name)
    parse_specific_char(f, b')')

    return tuple(dims)

def read_str_array_elems(f, elem_reader, type_name, rank):
    skip_spaces(f)
    try:
        parse_specific_char(f, b'[')
    except ValueError:
        return read_str_empty_array(f, type_name, rank)
    else:
        xs = sepBy(elem_reader, read_str_comma, f)
        skip_spaces(f)
        parse_specific_char(f, b']')
        return xs

def read_str_array_helper(f, elem_reader, type_name, rank):
    def nested_row_reader(_):
        return read_str_array_helper(f, elem_reader, type_name, rank-1)
    if rank == 1:
        row_reader = elem_reader
    else:
        row_reader = nested_row_reader
    return read_str_array_elems(f, row_reader, type_name, rank)

def expected_array_dims(l, rank):
  if rank > 1:
      n = len(l)
      if n == 0:
          elem = []
      else:
          elem = l[0]
      return [n] + expected_array_dims(elem, rank-1)
  else:
      return [len(l)]

def verify_array_dims(l, dims):
    if dims[0] != len(l):
        raise ValueError
    if len(dims) > 1:
        for x in l:
            verify_array_dims(x, dims[1:])

def read_str_array(f, elem_reader, type_name, rank, bt):
    elems = read_str_array_helper(f, elem_reader, type_name, rank)
    if type(elems) == tuple:
        # Empty array
        return np.empty(elems, dtype=bt)
    else:
        dims = expected_array_dims(elems, rank)
        verify_array_dims(elems, dims)
        return np.array(elems, dtype=bt)

################################################################################

READ_BINARY_VERSION = 2

# struct format specified at
# https://docs.python.org/2/library/struct.html#format-characters

def mk_bin_scalar_reader(t):
    def bin_reader(f):
        fmt = FUTHARK_PRIMTYPES[t]['bin_format']
        size = FUTHARK_PRIMTYPES[t]['size']
        return struct.unpack('<' + fmt, f.get_chars(size))[0]
    return bin_reader

read_bin_i8 = mk_bin_scalar_reader('i8')
read_bin_i16 = mk_bin_scalar_reader('i16')
read_bin_i32 = mk_bin_scalar_reader('i32')
read_bin_i64 = mk_bin_scalar_reader('i64')

read_bin_u8 = mk_bin_scalar_reader('u8')
read_bin_u16 = mk_bin_scalar_reader('u16')
read_bin_u32 = mk_bin_scalar_reader('u32')
read_bin_u64 = mk_bin_scalar_reader('u64')

read_bin_f32 = mk_bin_scalar_reader('f32')
read_bin_f64 = mk_bin_scalar_reader('f64')

read_bin_bool = mk_bin_scalar_reader('bool')

def read_is_binary(f):
    skip_spaces(f)
    c = f.get_char()
    if c == b'b':
        bin_version = read_bin_u8(f)
        if bin_version != READ_BINARY_VERSION:
            panic(1, "binary-input: File uses version %i, but I only understand version %i.\n",
                  bin_version, READ_BINARY_VERSION)
        return True
    else:
        f.unget_char(c)
        return False

FUTHARK_PRIMTYPES = {
    'i8':  {'binname' : b"  i8",
            'size' : 1,
            'bin_reader': read_bin_i8,
            'str_reader': read_str_i8,
            'bin_format': 'b',
            'numpy_type': np.int8 },

    'i16': {'binname' : b" i16",
            'size' : 2,
            'bin_reader': read_bin_i16,
            'str_reader': read_str_i16,
            'bin_format': 'h',
            'numpy_type': np.int16 },

    'i32': {'binname' : b" i32",
            'size' : 4,
            'bin_reader': read_bin_i32,
            'str_reader': read_str_i32,
            'bin_format': 'i',
            'numpy_type': np.int32 },

    'i64': {'binname' : b" i64",
            'size' : 8,
            'bin_reader': read_bin_i64,
            'str_reader': read_str_i64,
            'bin_format': 'q',
            'numpy_type': np.int64},

    'u8':  {'binname' : b"  u8",
            'size' : 1,
            'bin_reader': read_bin_u8,
            'str_reader': read_str_u8,
            'bin_format': 'B',
            'numpy_type': np.uint8 },

    'u16': {'binname' : b" u16",
            'size' : 2,
            'bin_reader': read_bin_u16,
            'str_reader': read_str_u16,
            'bin_format': 'H',
            'numpy_type': np.uint16 },

    'u32': {'binname' : b" u32",
            'size' : 4,
            'bin_reader': read_bin_u32,
            'str_reader': read_str_u32,
            'bin_format': 'I',
            'numpy_type': np.uint32 },

    'u64': {'binname' : b" u64",
            'size' : 8,
            'bin_reader': read_bin_u64,
            'str_reader': read_str_u64,
            'bin_format': 'Q',
            'numpy_type': np.uint64 },

    'f32': {'binname' : b" f32",
            'size' : 4,
            'bin_reader': read_bin_f32,
            'str_reader': read_str_f32,
            'bin_format': 'f',
            'numpy_type': np.float32 },

    'f64': {'binname' : b" f64",
            'size' : 8,
            'bin_reader': read_bin_f64,
            'str_reader': read_str_f64,
            'bin_format': 'd',
            'numpy_type': np.float64 },

    'bool': {'binname' : b"bool",
             'size' : 1,
             'bin_reader': read_bin_bool,
             'str_reader': read_str_bool,
             'bin_format': 'b',
             'numpy_type': np.bool }
}

def read_bin_read_type(f):
    read_binname = f.get_chars(4)

    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['binname'] == read_binname:
            return k
    panic(1, "binary-input: Did not recognize the type '%s'.\n", read_binname)

def numpy_type_to_type_name(t):
    for (k,v) in FUTHARK_PRIMTYPES.items():
        if v['numpy_type'] == t:
            return k
    raise Exception('Unknown Numpy type: {}'.format(t))

def read_bin_ensure_scalar(f, expected_type):
  dims = read_bin_i8(f)

  if dims != 0:
      panic(1, "binary-input: Expected scalar (0 dimensions), but got array with %i dimensions.\n", dims)

  bin_type = read_bin_read_type(f)
  if bin_type != expected_type:
      panic(1, "binary-input: Expected scalar of type %s but got scalar of type %s.\n",
            expected_type, bin_type)

# ------------------------------------------------------------------------------
# General interface for reading Primitive Futhark Values
# ------------------------------------------------------------------------------

def read_scalar(f, ty):
    if read_is_binary(f):
        read_bin_ensure_scalar(f, ty)
        return FUTHARK_PRIMTYPES[ty]['bin_reader'](f)
    return FUTHARK_PRIMTYPES[ty]['str_reader'](f)

def read_array(f, expected_type, rank):
    if not read_is_binary(f):
        str_reader = FUTHARK_PRIMTYPES[expected_type]['str_reader']
        return read_str_array(f, str_reader, expected_type, rank,
                              FUTHARK_PRIMTYPES[expected_type]['numpy_type'])

    bin_rank = read_bin_u8(f)

    if bin_rank != rank:
        panic(1, "binary-input: Expected %i dimensions, but got array with %i dimensions.\n",
              rank, bin_rank)

    bin_type_enum = read_bin_read_type(f)
    if expected_type != bin_type_enum:
        panic(1, "binary-input: Expected %iD-array with element type '%s' but got %iD-array with element type '%s'.\n",
              rank, expected_type, bin_rank, bin_type_enum)

    shape = []
    elem_count = 1
    for i in range(rank):
        bin_size = read_bin_u64(f)
        elem_count *= bin_size
        shape.append(bin_size)

    bin_fmt = FUTHARK_PRIMTYPES[bin_type_enum]['bin_format']

    # We first read the expected number of types into a bytestring,
    # then use np.fromstring.  This is because np.fromfile does not
    # work on things that are insufficiently file-like, like a network
    # stream.
    bytes = f.get_chars(elem_count * FUTHARK_PRIMTYPES[expected_type]['size'])
    arr = np.fromstring(bytes, dtype=FUTHARK_PRIMTYPES[bin_type_enum]['numpy_type'])
    arr.shape = shape

    return arr

if sys.version_info >= (3,0):
    input_reader = ReaderInput(sys.stdin.buffer)
else:
    input_reader = ReaderInput(sys.stdin)

import re

def read_value(type_desc, reader=input_reader):
    """Read a value of the given type.  The type is a string
representation of the Futhark type."""
    m = re.match(r'((?:\[\])*)([a-z0-9]+)$', type_desc)
    if m:
        dims = int(len(m.group(1))/2)
        basetype = m.group(2)
        assert basetype in FUTHARK_PRIMTYPES, "Unknown type: {}".format(type_desc)
        if dims > 0:
            return read_array(reader, basetype, dims)
        else:
            return read_scalar(reader, basetype)
        return (dims, basetype)

def end_of_input(entry, f=input_reader):
    skip_spaces(f)
    if f.get_char() != b'':
        panic(1, "Expected EOF on stdin after reading input for \"%s\".", entry)

def write_value_text(v, out=sys.stdout):
    if type(v) == np.uint8:
        out.write("%uu8" % v)
    elif type(v) == np.uint16:
        out.write("%uu16" % v)
    elif type(v) == np.uint32:
        out.write("%uu32" % v)
    elif type(v) == np.uint64:
        out.write("%uu64" % v)
    elif type(v) == np.int8:
        out.write("%di8" % v)
    elif type(v) == np.int16:
        out.write("%di16" % v)
    elif type(v) == np.int32:
        out.write("%di32" % v)
    elif type(v) == np.int64:
        out.write("%di64" % v)
    elif type(v) in [np.bool, np.bool_]:
        if v:
            out.write("true")
        else:
            out.write("false")
    elif type(v) == np.float32:
        if np.isnan(v):
            out.write('f32.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f32.inf')
            else:
                out.write('-f32.inf')
        else:
            out.write("%.6ff32" % v)
    elif type(v) == np.float64:
        if np.isnan(v):
            out.write('f64.nan')
        elif np.isinf(v):
            if v >= 0:
                out.write('f64.inf')
            else:
                out.write('-f64.inf')
        else:
            out.write("%.6ff64" % v)
    elif type(v) == np.ndarray:
        if np.product(v.shape) == 0:
            tname = numpy_type_to_type_name(v.dtype)
            out.write('empty({}{})'.format(''.join(['[{}]'.format(d)
                                                    for d in v.shape]), tname))
        else:
            first = True
            out.write('[')
            for x in v:
                if not first: out.write(', ')
                first = False
                write_value(x, out=out)
            out.write(']')
    else:
        raise Exception("Cannot print value of type {}: {}".format(type(v), v))

type_strs = { np.dtype('int8'): b'  i8',
              np.dtype('int16'): b' i16',
              np.dtype('int32'): b' i32',
              np.dtype('int64'): b' i64',
              np.dtype('uint8'): b'  u8',
              np.dtype('uint16'): b' u16',
              np.dtype('uint32'): b' u32',
              np.dtype('uint64'): b' u64',
              np.dtype('float32'): b' f32',
              np.dtype('float64'): b' f64',
              np.dtype('bool'): b'bool'}

def construct_binary_value(v):
    t = v.dtype
    shape = v.shape

    elems = 1
    for d in shape:
        elems *= d

    num_bytes = 1 + 1 + 1 + 4 + len(shape) * 8 + elems * t.itemsize
    bytes = bytearray(num_bytes)
    bytes[0] = np.int8(ord('b'))
    bytes[1] = 2
    bytes[2] = np.int8(len(shape))
    bytes[3:7] = type_strs[t]

    for i in range(len(shape)):
        bytes[7+i*8:7+(i+1)*8] = np.int64(shape[i]).tostring()

    bytes[7+len(shape)*8:] = np.ascontiguousarray(v).tostring()

    return bytes

def write_value_binary(v, out=sys.stdout):
    if sys.version_info >= (3,0):
        out = out.buffer
    out.write(construct_binary_value(v))

def write_value(v, out=sys.stdout, binary=False):
    if binary:
        return write_value_binary(v, out=out)
    else:
        return write_value_text(v, out=out)

# End of values.py.
# Start of memory.py.

import ctypes as ct

def addressOffset(x, offset, bt):
  return ct.cast(ct.addressof(x.contents)+int(offset), ct.POINTER(bt))

def allocateMem(size):
  return ct.cast((ct.c_byte * max(0,size))(), ct.POINTER(ct.c_byte))

# Copy an array if its is not-None.  This is important for treating
# Numpy arrays as flat memory, but has some overhead.
def normaliseArray(x):
  if (x.base is x) or (x.base is None):
    return x
  else:
    return x.copy()

def unwrapArray(x):
  return normaliseArray(x).ctypes.data_as(ct.POINTER(ct.c_byte))

def createArray(x, shape):
  # HACK: np.ctypeslib.as_array may fail if the shape contains zeroes,
  # for some reason.
  if any(map(lambda x: x == 0, shape)):
      return np.ndarray(shape, dtype=x._type_)
  else:
      return np.ctypeslib.as_array(x, shape=shape)

def indexArray(x, offset, bt, nptype):
  return nptype(addressOffset(x, offset*ct.sizeof(bt), bt)[0])

def writeScalarArray(x, offset, v):
  ct.memmove(ct.addressof(x.contents)+int(offset)*ct.sizeof(v), ct.addressof(v), ct.sizeof(v))

# An opaque Futhark value.
class opaque(object):
  def __init__(self, desc, *payload):
    self.data = payload
    self.desc = desc

  def __repr__(self):
    return "<opaque Futhark value of type {}>".format(self.desc)

# End of memory.py.
# Start of panic.py.

def panic(exitcode, fmt, *args):
    sys.stderr.write('%s: ' % sys.argv[0])
    sys.stderr.write(fmt % args)
    sys.stderr.write('\n')
    sys.exit(exitcode)

# End of panic.py.
# Start of tuning.py

def read_tuning_file(kvs, f):
    for line in f.read().splitlines():
        size, value = line.split('=')
        kvs[size] = int(value)
    return kvs

# End of tuning.py.
# Start of scalar.py.

import numpy as np
import math
import struct

def intlit(t, x):
  if t == np.int8:
    return np.int8(x)
  elif t == np.int16:
    return np.int16(x)
  elif t == np.int32:
    return np.int32(x)
  else:
    return np.int64(x)

def signed(x):
  if type(x) == np.uint8:
    return np.int8(x)
  elif type(x) == np.uint16:
    return np.int16(x)
  elif type(x) == np.uint32:
    return np.int32(x)
  else:
    return np.int64(x)

def unsigned(x):
  if type(x) == np.int8:
    return np.uint8(x)
  elif type(x) == np.int16:
    return np.uint16(x)
  elif type(x) == np.int32:
    return np.uint32(x)
  else:
    return np.uint64(x)

def shlN(x,y):
  return x << y

def ashrN(x,y):
  return x >> y

# Python is so slow that we just make all the unsafe operations safe,
# always.

def sdivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x // y

def sdiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return (x+y-intlit(type(x), 1)) // y

def smodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return x % y

def udivN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) // unsigned(y))

def udiv_upN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed((unsigned(x)+unsigned(y)-unsigned(intlit(type(x),1))) // unsigned(y))

def umodN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return signed(unsigned(x) % unsigned(y))

def squotN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.floor_divide(np.abs(x), np.abs(y)) * np.sign(x) * np.sign(y)

def sremN(x,y):
  if y == 0:
    return intlit(type(x), 0)
  else:
    return np.remainder(np.abs(x), np.abs(y)) * np.sign(x)

def sminN(x,y):
  return min(x,y)

def smaxN(x,y):
  return max(x,y)

def uminN(x,y):
  return signed(min(unsigned(x),unsigned(y)))

def umaxN(x,y):
  return signed(max(unsigned(x),unsigned(y)))

def fminN(x,y):
  return min(x,y)

def fmaxN(x,y):
  return max(x,y)

def powN(x,y):
  return x ** y

def fpowN(x,y):
  return x ** y

def sleN(x,y):
  return x <= y

def sltN(x,y):
  return x < y

def uleN(x,y):
  return unsigned(x) <= unsigned(y)

def ultN(x,y):
  return unsigned(x) < unsigned(y)

def lshr8(x,y):
  return np.int8(np.uint8(x) >> np.uint8(y))

def lshr16(x,y):
  return np.int16(np.uint16(x) >> np.uint16(y))

def lshr32(x,y):
  return np.int32(np.uint32(x) >> np.uint32(y))

def lshr64(x,y):
  return np.int64(np.uint64(x) >> np.uint64(y))

def sext_T_i8(x):
  return np.int8(x)

def sext_T_i16(x):
  return np.int16(x)

def sext_T_i32(x):
  return np.int32(x)

def sext_T_i64(x):
  return np.int64(x)

def itob_T_bool(x):
  return np.bool(x)

def btoi_bool_i8(x):
  return np.int8(x)

def btoi_bool_i16(x):
  return np.int8(x)

def btoi_bool_i32(x):
  return np.int8(x)

def btoi_bool_i64(x):
  return np.int8(x)

def zext_i8_i8(x):
  return np.int8(np.uint8(x))

def zext_i8_i16(x):
  return np.int16(np.uint8(x))

def zext_i8_i32(x):
  return np.int32(np.uint8(x))

def zext_i8_i64(x):
  return np.int64(np.uint8(x))

def zext_i16_i8(x):
  return np.int8(np.uint16(x))

def zext_i16_i16(x):
  return np.int16(np.uint16(x))

def zext_i16_i32(x):
  return np.int32(np.uint16(x))

def zext_i16_i64(x):
  return np.int64(np.uint16(x))

def zext_i32_i8(x):
  return np.int8(np.uint32(x))

def zext_i32_i16(x):
  return np.int16(np.uint32(x))

def zext_i32_i32(x):
  return np.int32(np.uint32(x))

def zext_i32_i64(x):
  return np.int64(np.uint32(x))

def zext_i64_i8(x):
  return np.int8(np.uint64(x))

def zext_i64_i16(x):
  return np.int16(np.uint64(x))

def zext_i64_i32(x):
  return np.int32(np.uint64(x))

def zext_i64_i64(x):
  return np.int64(np.uint64(x))

sdiv8 = sdiv16 = sdiv32 = sdiv64 = sdivN
sdiv_up8 = sdiv1_up6 = sdiv_up32 = sdiv_up64 = sdiv_upN
sdiv_safe8 = sdiv1_safe6 = sdiv_safe32 = sdiv_safe64 = sdivN
sdiv_up_safe8 = sdiv_up1_safe6 = sdiv_up_safe32 = sdiv_up_safe64 = sdiv_upN
smod8 = smod16 = smod32 = smod64 = smodN
smod_safe8 = smod_safe16 = smod_safe32 = smod_safe64 = smodN
udiv8 = udiv16 = udiv32 = udiv64 = udivN
udiv_up8 = udiv_up16 = udiv_up32 = udiv_up64 = udivN
udiv_safe8 = udiv_safe16 = udiv_safe32 = udiv_safe64 = udiv_upN
udiv_up_safe8 = udiv_up_safe16 = udiv_up_safe32 = udiv_up_safe64 = udiv_upN
umod8 = umod16 = umod32 = umod64 = umodN
umod_safe8 = umod_safe16 = umod_safe32 = umod_safe64 = umodN
squot8 = squot16 = squot32 = squot64 = squotN
squot_safe8 = squot_safe16 = squot_safe32 = squot_safe64 = squotN
srem8 = srem16 = srem32 = srem64 = sremN
srem_safe8 = srem_safe16 = srem_safe32 = srem_safe64 = sremN

shl8 = shl16 = shl32 = shl64 = shlN
ashr8 = ashr16 = ashr32 = ashr64 = ashrN
smax8 = smax16 = smax32 = smax64 = smaxN
smin8 = smin16 = smin32 = smin64 = sminN
umax8 = umax16 = umax32 = umax64 = umaxN
umin8 = umin16 = umin32 = umin64 = uminN
pow8 = pow16 = pow32 = pow64 = powN
fpow32 = fpow64 = fpowN
fmax32 = fmax64 = fmaxN
fmin32 = fmin64 = fminN
sle8 = sle16 = sle32 = sle64 = sleN
slt8 = slt16 = slt32 = slt64 = sltN
ule8 = ule16 = ule32 = ule64 = uleN
ult8 = ult16 = ult32 = ult64 = ultN
sext_i8_i8 = sext_i16_i8 = sext_i32_i8 = sext_i64_i8 = sext_T_i8
sext_i8_i16 = sext_i16_i16 = sext_i32_i16 = sext_i64_i16 = sext_T_i16
sext_i8_i32 = sext_i16_i32 = sext_i32_i32 = sext_i64_i32 = sext_T_i32
sext_i8_i64 = sext_i16_i64 = sext_i32_i64 = sext_i64_i64 = sext_T_i64
itob_i8_bool = itob_i16_bool = itob_i32_bool = itob_i64_bool = itob_T_bool

def clz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if x < 0:
      break
    n += 1
    x <<= np.int8(1)
  return n

def ctz_T(x):
  n = np.int32(0)
  bits = x.itemsize * 8
  for i in range(bits):
    if (x & 1) == 1:
      break
    n += 1
    x >>= np.int8(1)
  return n

def popc_T(x):
  c = np.int32(0)
  while x != 0:
    x &= x - np.int8(1)
    c += np.int8(1)
  return c

futhark_popc8 = futhark_popc16 = futhark_popc32 = futhark_popc64 = popc_T
futhark_clzz8 = futhark_clzz16 = futhark_clzz32 = futhark_clzz64 = clz_T
futhark_ctzz8 = futhark_ctzz16 = futhark_ctzz32 = futhark_ctzz64 = ctz_T

def ssignum(x):
  return np.sign(x)

def usignum(x):
  if x < 0:
    return ssignum(-x)
  else:
    return ssignum(x)

def sitofp_T_f32(x):
  return np.float32(x)
sitofp_i8_f32 = sitofp_i16_f32 = sitofp_i32_f32 = sitofp_i64_f32 = sitofp_T_f32

def sitofp_T_f64(x):
  return np.float64(x)
sitofp_i8_f64 = sitofp_i16_f64 = sitofp_i32_f64 = sitofp_i64_f64 = sitofp_T_f64

def uitofp_T_f32(x):
  return np.float32(unsigned(x))
uitofp_i8_f32 = uitofp_i16_f32 = uitofp_i32_f32 = uitofp_i64_f32 = uitofp_T_f32

def uitofp_T_f64(x):
  return np.float64(unsigned(x))
uitofp_i8_f64 = uitofp_i16_f64 = uitofp_i32_f64 = uitofp_i64_f64 = uitofp_T_f64

def fptosi_T_i8(x):
  return np.int8(np.trunc(x))
fptosi_f32_i8 = fptosi_f64_i8 = fptosi_T_i8

def fptosi_T_i16(x):
  return np.int16(np.trunc(x))
fptosi_f32_i16 = fptosi_f64_i16 = fptosi_T_i16

def fptosi_T_i32(x):
  return np.int32(np.trunc(x))
fptosi_f32_i32 = fptosi_f64_i32 = fptosi_T_i32

def fptosi_T_i64(x):
  return np.int64(np.trunc(x))
fptosi_f32_i64 = fptosi_f64_i64 = fptosi_T_i64

def fptoui_T_i8(x):
  return np.uint8(np.trunc(x))
fptoui_f32_i8 = fptoui_f64_i8 = fptoui_T_i8

def fptoui_T_i16(x):
  return np.uint16(np.trunc(x))
fptoui_f32_i16 = fptoui_f64_i16 = fptoui_T_i16

def fptoui_T_i32(x):
  return np.uint32(np.trunc(x))
fptoui_f32_i32 = fptoui_f64_i32 = fptoui_T_i32

def fptoui_T_i64(x):
  return np.uint64(np.trunc(x))
fptoui_f32_i64 = fptoui_f64_i64 = fptoui_T_i64

def fpconv_f32_f64(x):
  return np.float64(x)

def fpconv_f64_f32(x):
  return np.float32(x)

def futhark_mul_hi8(a, b):
  a = np.uint64(np.uint8(a))
  b = np.uint64(np.uint8(b))
  return np.int8((a*b) >> np.uint64(8))

def futhark_mul_hi16(a, b):
  a = np.uint64(np.uint16(a))
  b = np.uint64(np.uint16(b))
  return np.int16((a*b) >> np.uint64(16))

def futhark_mul_hi32(a, b):
  a = np.uint64(np.uint32(a))
  b = np.uint64(np.uint32(b))
  return np.int32((a*b) >> np.uint64(32))

# This one is done with arbitrary-precision integers.
def futhark_mul_hi64(a, b):
  a = int(np.uint64(a))
  b = int(np.uint64(b))
  return np.int64(np.uint64(a*b >> 64))

def futhark_mad_hi8(a, b, c):
  return futhark_mul_hi8(a,b) + c

def futhark_mad_hi16(a, b, c):
  return futhark_mul_hi16(a,b) + c

def futhark_mad_hi32(a, b, c):
  return futhark_mul_hi32(a,b) + c

def futhark_mad_hi64(a, b, c):
  return futhark_mul_hi64(a,b) + c

def futhark_log64(x):
  return np.float64(np.log(x))

def futhark_log2_64(x):
  return np.float64(np.log2(x))

def futhark_log10_64(x):
  return np.float64(np.log10(x))

def futhark_sqrt64(x):
  return np.sqrt(x)

def futhark_exp64(x):
  return np.exp(x)

def futhark_cos64(x):
  return np.cos(x)

def futhark_sin64(x):
  return np.sin(x)

def futhark_tan64(x):
  return np.tan(x)

def futhark_acos64(x):
  return np.arccos(x)

def futhark_asin64(x):
  return np.arcsin(x)

def futhark_atan64(x):
  return np.arctan(x)

def futhark_cosh64(x):
  return np.cosh(x)

def futhark_sinh64(x):
  return np.sinh(x)

def futhark_tanh64(x):
  return np.tanh(x)

def futhark_acosh64(x):
  return np.arccosh(x)

def futhark_asinh64(x):
  return np.arcsinh(x)

def futhark_atanh64(x):
  return np.arctanh(x)

def futhark_atan2_64(x, y):
  return np.arctan2(x, y)

def futhark_gamma64(x):
  return np.float64(math.gamma(x))

def futhark_lgamma64(x):
  return np.float64(math.lgamma(x))

def futhark_round64(x):
  return np.round(x)

def futhark_ceil64(x):
  return np.ceil(x)

def futhark_floor64(x):
  return np.floor(x)

def futhark_isnan64(x):
  return np.isnan(x)

def futhark_isinf64(x):
  return np.isinf(x)

def futhark_to_bits64(x):
  s = struct.pack('>d', x)
  return np.int64(struct.unpack('>q', s)[0])

def futhark_from_bits64(x):
  s = struct.pack('>q', x)
  return np.float64(struct.unpack('>d', s)[0])

def futhark_log32(x):
  return np.float32(np.log(x))

def futhark_log2_32(x):
  return np.float32(np.log2(x))

def futhark_log10_32(x):
  return np.float32(np.log10(x))

def futhark_sqrt32(x):
  return np.float32(np.sqrt(x))

def futhark_exp32(x):
  return np.exp(x)

def futhark_cos32(x):
  return np.cos(x)

def futhark_sin32(x):
  return np.sin(x)

def futhark_tan32(x):
  return np.tan(x)

def futhark_acos32(x):
  return np.arccos(x)

def futhark_asin32(x):
  return np.arcsin(x)

def futhark_atan32(x):
  return np.arctan(x)

def futhark_cosh32(x):
  return np.cosh(x)

def futhark_sinh32(x):
  return np.sinh(x)

def futhark_tanh32(x):
  return np.tanh(x)

def futhark_acosh32(x):
  return np.arccosh(x)

def futhark_asinh32(x):
  return np.arcsinh(x)

def futhark_atanh32(x):
  return np.arctanh(x)

def futhark_atan2_32(x, y):
  return np.arctan2(x, y)

def futhark_gamma32(x):
  return np.float32(math.gamma(x))

def futhark_lgamma32(x):
  return np.float32(math.lgamma(x))

def futhark_round32(x):
  return np.round(x)

def futhark_ceil32(x):
  return np.ceil(x)

def futhark_floor32(x):
  return np.floor(x)

def futhark_isnan32(x):
  return np.isnan(x)

def futhark_isinf32(x):
  return np.isinf(x)

def futhark_to_bits32(x):
  s = struct.pack('>f', x)
  return np.int32(struct.unpack('>l', s)[0])

def futhark_from_bits32(x):
  s = struct.pack('>l', x)
  return np.float32(struct.unpack('>f', s)[0])

def futhark_lerp32(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_lerp64(v0, v1, t):
  return v0 + (v1-v0)*t

def futhark_mad32(a, b, c):
  return a * b + c

def futhark_mad64(a, b, c):
  return a * b + c

def futhark_fma32(a, b, c):
  return a * b + c

def futhark_fma64(a, b, c):
  return a * b + c

# End of scalar.py.
class bfastfinal:
  entry_points = {"main": (["i32", "i32", "i32", "f32", "f32", "f32", "[]i32",
                            "[][]f32"], ["[]i32", "[]f32"]),
                  "mainDetailed": (["i32", "i32", "i32", "f32", "f32", "f32",
                                    "[]i32", "[][]f32"], ["[]f32", "[]i32",
                                                          "[]i32", "[]f32",
                                                          "[][]f32", "[][]f32",
                                                          "[]f32", "[]i32",
                                                          "[]f32", "[][]f32",
                                                          "[][]f32"]),
                  "remove_nans": (["i16", "[][][]i16"], ["[][][]f32"]),
                  "reshapeTransp": (["[][][]f32"], ["[][]f32"])}
  def __init__(self, command_queue=None, interactive=False,
               platform_pref=preferred_platform, device_pref=preferred_device,
               default_group_size=default_group_size,
               default_num_groups=default_num_groups,
               default_tile_size=default_tile_size,
               default_threshold=default_threshold, sizes=sizes):
    size_heuristics=[("NVIDIA CUDA", cl.device_type.GPU, "lockstep_width",
      lambda device: np.int32(32)), ("AMD Accelerated Parallel Processing",
                                     cl.device_type.GPU, "lockstep_width",
                                     lambda device: np.int32(32)), ("",
                                                                    cl.device_type.GPU,
                                                                    "lockstep_width",
                                                                    lambda device: np.int32(1)),
     ("", cl.device_type.GPU, "num_groups",
      lambda device: (np.int32(4) * device.get_info(getattr(cl.device_info,
                                                            "MAX_COMPUTE_UNITS")))),
     ("", cl.device_type.GPU, "group_size", lambda device: np.int32(256)), ("",
                                                                            cl.device_type.GPU,
                                                                            "tile_size",
                                                                            lambda device: np.int32(32)),
     ("", cl.device_type.GPU, "threshold", lambda device: np.int32(32768)), ("",
                                                                             cl.device_type.CPU,
                                                                             "lockstep_width",
                                                                             lambda device: np.int32(1)),
     ("", cl.device_type.CPU, "num_groups",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS"))),
     ("", cl.device_type.CPU, "group_size", lambda device: np.int32(32)), ("",
                                                                           cl.device_type.CPU,
                                                                           "tile_size",
                                                                           lambda device: np.int32(4)),
     ("", cl.device_type.CPU, "threshold",
      lambda device: device.get_info(getattr(cl.device_info, "MAX_COMPUTE_UNITS")))]
    self.global_failure_args_max = 2
    self.failure_msgs=["Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:162:5-58\n   #4  bfastfinal.fut:157:1-163:20\n",
     "Index [{}] out of bounds for array of shape [{}].\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:155:3-56\n   #4  bfastfinal.fut:151:1-155:56\n"]
    program = initialise_opencl_object(self,
                                       program_src=fut_opencl_src,
                                       command_queue=command_queue,
                                       interactive=interactive,
                                       platform_pref=platform_pref,
                                       device_pref=device_pref,
                                       default_group_size=default_group_size,
                                       default_num_groups=default_num_groups,
                                       default_tile_size=default_tile_size,
                                       default_threshold=default_threshold,
                                       size_heuristics=size_heuristics,
                                       required_types=["i16", "i32", "i64", "f32", "bool", "cert"],
                                       user_sizes=sizes,
                                       all_sizes={"builtin#replicate_f32.group_size_31209": {"class": "group_size",
                                                                                   "value": None},
                                        "builtin#replicate_i32.group_size_31218": {"class": "group_size",
                                                                                   "value": None},
                                        "main.group_size_30913": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25324": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25502": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25630": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25662": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25709": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_25740": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26244": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26462": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26516": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26583": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26675": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_26880": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27021": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27058": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27153": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27434": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27509": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27658": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27760": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_27907": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_28031": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_28392": {"class": "group_size", "value": None},
                                        "main.segmap_group_size_28531": {"class": "group_size", "value": None},
                                        "main.segmap_num_groups_25664": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_25711": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_26882": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_27023": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_27155": {"class": "num_groups", "value": None},
                                        "main.segmap_num_groups_28533": {"class": "num_groups", "value": None},
                                        "main.segred_group_size_25769": {"class": "group_size", "value": None},
                                        "main.segred_group_size_26942": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27079": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27209": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27775": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27796": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27863": {"class": "group_size", "value": None},
                                        "main.segred_group_size_27947": {"class": "group_size", "value": None},
                                        "main.segred_group_size_28435": {"class": "group_size", "value": None},
                                        "main.segred_num_groups_25771": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_26944": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27081": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27211": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27777": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27798": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27865": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_27949": {"class": "num_groups", "value": None},
                                        "main.segred_num_groups_28437": {"class": "num_groups", "value": None},
                                        "main.segscan_group_size_27518": {"class": "group_size", "value": None},
                                        "main.segscan_group_size_28489": {"class": "group_size", "value": None},
                                        "main.segscan_num_groups_27520": {"class": "num_groups", "value": None},
                                        "main.segscan_num_groups_28491": {"class": "num_groups", "value": None},
                                        "main.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_14": {"class": "threshold (!main.suff_intra_par_10)",
                                                                   "value": 32},
                                        "main.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "main.suff_intra_par_30": {"class": "threshold (!main.suff_outer_par_29)",
                                                                   "value": 32},
                                        "main.suff_intra_par_35": {"class": "threshold ()", "value": 32},
                                        "main.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_18": {"class": "threshold (!main.suff_outer_par_17)",
                                                                   "value": None},
                                        "main.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_20": {"class": "threshold (!main.suff_outer_par_19)",
                                                                   "value": None},
                                        "main.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_22": {"class": "threshold (!main.suff_outer_par_21)",
                                                                   "value": None},
                                        "main.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "main.suff_outer_par_7": {"class": "threshold (!main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.suff_outer_par_8": {"class": "threshold (!main.suff_outer_par_7 !main.suff_outer_par_6)",
                                                                  "value": None},
                                        "main.tile_size_28844": {"class": "tile_size", "value": None},
                                        "main.tile_size_29166": {"class": "tile_size", "value": None},
                                        "mainDetailed.group_size_30935": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_21710": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_21888": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22016": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22048": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22095": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22126": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22630": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22848": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22902": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_22969": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23061": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23266": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23407": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23444": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23539": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23820": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_23895": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24044": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24146": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24293": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24417": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24825": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24876": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_24906": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_group_size_25028": {"class": "group_size", "value": None},
                                        "mainDetailed.segmap_num_groups_22050": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_22097": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_23268": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_23409": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_23541": {"class": "num_groups", "value": None},
                                        "mainDetailed.segmap_num_groups_25030": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_group_size_22155": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_23328": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_23465": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_23595": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_24161": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_24182": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_24249": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_24333": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_group_size_24932": {"class": "group_size", "value": None},
                                        "mainDetailed.segred_num_groups_22157": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_23330": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_23467": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_23597": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_24163": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_24184": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_24251": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_24335": {"class": "num_groups", "value": None},
                                        "mainDetailed.segred_num_groups_24934": {"class": "num_groups", "value": None},
                                        "mainDetailed.segscan_group_size_23904": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_group_size_24986": {"class": "group_size",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_23906": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.segscan_num_groups_24988": {"class": "num_groups",
                                                                                  "value": None},
                                        "mainDetailed.suff_intra_par_10": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_14": {"class": "threshold (!mainDetailed.suff_intra_par_10)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_25": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_intra_par_30": {"class": "threshold (!mainDetailed.suff_outer_par_29)",
                                                                           "value": 32},
                                        "mainDetailed.suff_intra_par_35": {"class": "threshold ()", "value": 32},
                                        "mainDetailed.suff_outer_par_17": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_18": {"class": "threshold (!mainDetailed.suff_outer_par_17)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_19": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_20": {"class": "threshold (!mainDetailed.suff_outer_par_19)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_21": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_22": {"class": "threshold (!mainDetailed.suff_outer_par_21)",
                                                                           "value": None},
                                        "mainDetailed.suff_outer_par_29": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_32": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_6": {"class": "threshold ()", "value": None},
                                        "mainDetailed.suff_outer_par_7": {"class": "threshold (!mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.suff_outer_par_8": {"class": "threshold (!mainDetailed.suff_outer_par_7 !mainDetailed.suff_outer_par_6)",
                                                                          "value": None},
                                        "mainDetailed.tile_size_28844": {"class": "tile_size", "value": None},
                                        "mainDetailed.tile_size_29166": {"class": "tile_size", "value": None},
                                        "remove_nans.segmap_group_size_21552": {"class": "group_size", "value": None}})
    self.builtinzhreplicate_f32zireplicate_31206_var = program.builtinzhreplicate_f32zireplicate_31206
    self.builtinzhreplicate_i32zireplicate_31215_var = program.builtinzhreplicate_i32zireplicate_31215
    self.gpu_map_transpose_f32_var = program.gpu_map_transpose_f32
    self.gpu_map_transpose_f32_low_height_var = program.gpu_map_transpose_f32_low_height
    self.gpu_map_transpose_f32_low_width_var = program.gpu_map_transpose_f32_low_width
    self.gpu_map_transpose_f32_small_var = program.gpu_map_transpose_f32_small
    self.mainzicopy_30910_var = program.mainzicopy_30910
    self.mainziscan_stage1_27524_var = program.mainziscan_stage1_27524
    self.mainziscan_stage1_28495_var = program.mainziscan_stage1_28495
    self.mainziscan_stage2_27524_var = program.mainziscan_stage2_27524
    self.mainziscan_stage2_28495_var = program.mainziscan_stage2_28495
    self.mainziscan_stage3_27524_var = program.mainziscan_stage3_27524
    self.mainziscan_stage3_28495_var = program.mainziscan_stage3_28495
    self.mainzisegmap_25321_var = program.mainzisegmap_25321
    self.mainzisegmap_25499_var = program.mainzisegmap_25499
    self.mainzisegmap_25627_var = program.mainzisegmap_25627
    self.mainzisegmap_25660_var = program.mainzisegmap_25660
    self.mainzisegmap_25706_var = program.mainzisegmap_25706
    self.mainzisegmap_25736_var = program.mainzisegmap_25736
    self.mainzisegmap_26240_var = program.mainzisegmap_26240
    self.mainzisegmap_26459_var = program.mainzisegmap_26459
    self.mainzisegmap_26513_var = program.mainzisegmap_26513
    self.mainzisegmap_26581_var = program.mainzisegmap_26581
    self.mainzisegmap_26672_var = program.mainzisegmap_26672
    self.mainzisegmap_26878_var = program.mainzisegmap_26878
    self.mainzisegmap_27019_var = program.mainzisegmap_27019
    self.mainzisegmap_27055_var = program.mainzisegmap_27055
    self.mainzisegmap_27151_var = program.mainzisegmap_27151
    self.mainzisegmap_27431_var = program.mainzisegmap_27431
    self.mainzisegmap_27507_var = program.mainzisegmap_27507
    self.mainzisegmap_27758_var = program.mainzisegmap_27758
    self.mainzisegmap_28029_var = program.mainzisegmap_28029
    self.mainzisegmap_28390_var = program.mainzisegmap_28390
    self.mainzisegmap_28529_var = program.mainzisegmap_28529
    self.mainzisegmap_intragroup_25996_var = program.mainzisegmap_intragroup_25996
    self.mainzisegmap_intragroup_26340_var = program.mainzisegmap_intragroup_26340
    self.mainzisegmap_intragroup_27314_var = program.mainzisegmap_intragroup_27314
    self.mainzisegmap_intragroup_27654_var = program.mainzisegmap_intragroup_27654
    self.mainzisegmap_intragroup_28074_var = program.mainzisegmap_intragroup_28074
    self.mainzisegmap_intragroup_28850_var = program.mainzisegmap_intragroup_28850
    self.mainzisegmap_intragroup_29172_var = program.mainzisegmap_intragroup_29172
    self.mainzisegmap_intragroup_29477_var = program.mainzisegmap_intragroup_29477
    self.mainzisegmap_intragroup_29709_var = program.mainzisegmap_intragroup_29709
    self.mainzisegred_large_25775_var = program.mainzisegred_large_25775
    self.mainzisegred_large_26948_var = program.mainzisegred_large_26948
    self.mainzisegred_large_27085_var = program.mainzisegred_large_27085
    self.mainzisegred_large_27215_var = program.mainzisegred_large_27215
    self.mainzisegred_large_27781_var = program.mainzisegred_large_27781
    self.mainzisegred_large_27802_var = program.mainzisegred_large_27802
    self.mainzisegred_large_27953_var = program.mainzisegred_large_27953
    self.mainzisegred_large_28441_var = program.mainzisegred_large_28441
    self.mainzisegred_nonseg_27871_var = program.mainzisegred_nonseg_27871
    self.mainzisegred_small_25775_var = program.mainzisegred_small_25775
    self.mainzisegred_small_26948_var = program.mainzisegred_small_26948
    self.mainzisegred_small_27085_var = program.mainzisegred_small_27085
    self.mainzisegred_small_27215_var = program.mainzisegred_small_27215
    self.mainzisegred_small_27781_var = program.mainzisegred_small_27781
    self.mainzisegred_small_27802_var = program.mainzisegred_small_27802
    self.mainzisegred_small_27953_var = program.mainzisegred_small_27953
    self.mainzisegred_small_28441_var = program.mainzisegred_small_28441
    self.mainDetailedzicopy_30932_var = program.mainDetailedzicopy_30932
    self.mainDetailedziscan_stage1_23910_var = program.mainDetailedziscan_stage1_23910
    self.mainDetailedziscan_stage1_24992_var = program.mainDetailedziscan_stage1_24992
    self.mainDetailedziscan_stage2_23910_var = program.mainDetailedziscan_stage2_23910
    self.mainDetailedziscan_stage2_24992_var = program.mainDetailedziscan_stage2_24992
    self.mainDetailedziscan_stage3_23910_var = program.mainDetailedziscan_stage3_23910
    self.mainDetailedziscan_stage3_24992_var = program.mainDetailedziscan_stage3_24992
    self.mainDetailedzisegmap_21707_var = program.mainDetailedzisegmap_21707
    self.mainDetailedzisegmap_21885_var = program.mainDetailedzisegmap_21885
    self.mainDetailedzisegmap_22013_var = program.mainDetailedzisegmap_22013
    self.mainDetailedzisegmap_22046_var = program.mainDetailedzisegmap_22046
    self.mainDetailedzisegmap_22092_var = program.mainDetailedzisegmap_22092
    self.mainDetailedzisegmap_22122_var = program.mainDetailedzisegmap_22122
    self.mainDetailedzisegmap_22626_var = program.mainDetailedzisegmap_22626
    self.mainDetailedzisegmap_22845_var = program.mainDetailedzisegmap_22845
    self.mainDetailedzisegmap_22899_var = program.mainDetailedzisegmap_22899
    self.mainDetailedzisegmap_22967_var = program.mainDetailedzisegmap_22967
    self.mainDetailedzisegmap_23058_var = program.mainDetailedzisegmap_23058
    self.mainDetailedzisegmap_23264_var = program.mainDetailedzisegmap_23264
    self.mainDetailedzisegmap_23405_var = program.mainDetailedzisegmap_23405
    self.mainDetailedzisegmap_23441_var = program.mainDetailedzisegmap_23441
    self.mainDetailedzisegmap_23537_var = program.mainDetailedzisegmap_23537
    self.mainDetailedzisegmap_23817_var = program.mainDetailedzisegmap_23817
    self.mainDetailedzisegmap_23893_var = program.mainDetailedzisegmap_23893
    self.mainDetailedzisegmap_24144_var = program.mainDetailedzisegmap_24144
    self.mainDetailedzisegmap_24415_var = program.mainDetailedzisegmap_24415
    self.mainDetailedzisegmap_24822_var = program.mainDetailedzisegmap_24822
    self.mainDetailedzisegmap_24874_var = program.mainDetailedzisegmap_24874
    self.mainDetailedzisegmap_24904_var = program.mainDetailedzisegmap_24904
    self.mainDetailedzisegmap_25026_var = program.mainDetailedzisegmap_25026
    self.mainDetailedzisegmap_intragroup_22382_var = program.mainDetailedzisegmap_intragroup_22382
    self.mainDetailedzisegmap_intragroup_22726_var = program.mainDetailedzisegmap_intragroup_22726
    self.mainDetailedzisegmap_intragroup_23700_var = program.mainDetailedzisegmap_intragroup_23700
    self.mainDetailedzisegmap_intragroup_24040_var = program.mainDetailedzisegmap_intragroup_24040
    self.mainDetailedzisegmap_intragroup_24462_var = program.mainDetailedzisegmap_intragroup_24462
    self.mainDetailedzisegmap_intragroup_28850_var = program.mainDetailedzisegmap_intragroup_28850
    self.mainDetailedzisegmap_intragroup_29172_var = program.mainDetailedzisegmap_intragroup_29172
    self.mainDetailedzisegmap_intragroup_29477_var = program.mainDetailedzisegmap_intragroup_29477
    self.mainDetailedzisegmap_intragroup_29709_var = program.mainDetailedzisegmap_intragroup_29709
    self.mainDetailedzisegred_large_22161_var = program.mainDetailedzisegred_large_22161
    self.mainDetailedzisegred_large_23334_var = program.mainDetailedzisegred_large_23334
    self.mainDetailedzisegred_large_23471_var = program.mainDetailedzisegred_large_23471
    self.mainDetailedzisegred_large_23601_var = program.mainDetailedzisegred_large_23601
    self.mainDetailedzisegred_large_24167_var = program.mainDetailedzisegred_large_24167
    self.mainDetailedzisegred_large_24188_var = program.mainDetailedzisegred_large_24188
    self.mainDetailedzisegred_large_24339_var = program.mainDetailedzisegred_large_24339
    self.mainDetailedzisegred_large_24938_var = program.mainDetailedzisegred_large_24938
    self.mainDetailedzisegred_nonseg_24257_var = program.mainDetailedzisegred_nonseg_24257
    self.mainDetailedzisegred_small_22161_var = program.mainDetailedzisegred_small_22161
    self.mainDetailedzisegred_small_23334_var = program.mainDetailedzisegred_small_23334
    self.mainDetailedzisegred_small_23471_var = program.mainDetailedzisegred_small_23471
    self.mainDetailedzisegred_small_23601_var = program.mainDetailedzisegred_small_23601
    self.mainDetailedzisegred_small_24167_var = program.mainDetailedzisegred_small_24167
    self.mainDetailedzisegred_small_24188_var = program.mainDetailedzisegred_small_24188
    self.mainDetailedzisegred_small_24339_var = program.mainDetailedzisegred_small_24339
    self.mainDetailedzisegred_small_24938_var = program.mainDetailedzisegred_small_24938
    self.remove_nanszisegmap_21548_var = program.remove_nanszisegmap_21548
    self.constants = {}
    mainzicounter_mem_30844 = np.zeros(10240, dtype=np.int32)
    static_mem_31796 = opencl_alloc(self, 40960, "static_mem_31796")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31796,
                      normaliseArray(mainzicounter_mem_30844),
                      is_blocking=synchronous)
    self.mainzicounter_mem_30844 = static_mem_31796
    mainzicounter_mem_30998 = np.zeros(10240, dtype=np.int32)
    static_mem_31799 = opencl_alloc(self, 40960, "static_mem_31799")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31799,
                      normaliseArray(mainzicounter_mem_30998),
                      is_blocking=synchronous)
    self.mainzicounter_mem_30998 = static_mem_31799
    mainzicounter_mem_31079 = np.zeros(10240, dtype=np.int32)
    static_mem_31800 = opencl_alloc(self, 40960, "static_mem_31800")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31800,
                      normaliseArray(mainzicounter_mem_31079),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31079 = static_mem_31800
    mainzicounter_mem_31167 = np.zeros(10240, dtype=np.int32)
    static_mem_31801 = opencl_alloc(self, 40960, "static_mem_31801")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31801,
                      normaliseArray(mainzicounter_mem_31167),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31167 = static_mem_31801
    mainzicounter_mem_31361 = np.zeros(10240, dtype=np.int32)
    static_mem_31802 = opencl_alloc(self, 40960, "static_mem_31802")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31802,
                      normaliseArray(mainzicounter_mem_31361),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31361 = static_mem_31802
    mainzicounter_mem_31421 = np.zeros(10240, dtype=np.int32)
    static_mem_31803 = opencl_alloc(self, 40960, "static_mem_31803")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31803,
                      normaliseArray(mainzicounter_mem_31421),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31421 = static_mem_31803
    mainzicounter_mem_31461 = np.array([np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0), np.int32(0), np.int32(0),
                                        np.int32(0)], dtype=np.int32)
    static_mem_31804 = opencl_alloc(self, 40, "static_mem_31804")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_31804,
                      normaliseArray(mainzicounter_mem_31461),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31461 = static_mem_31804
    mainzicounter_mem_31530 = np.zeros(10240, dtype=np.int32)
    static_mem_31806 = opencl_alloc(self, 40960, "static_mem_31806")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31806,
                      normaliseArray(mainzicounter_mem_31530),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31530 = static_mem_31806
    mainzicounter_mem_31707 = np.zeros(10240, dtype=np.int32)
    static_mem_31808 = opencl_alloc(self, 40960, "static_mem_31808")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31808,
                      normaliseArray(mainzicounter_mem_31707),
                      is_blocking=synchronous)
    self.mainzicounter_mem_31707 = static_mem_31808
    mainDetailedzicounter_mem_30866 = np.zeros(10240, dtype=np.int32)
    static_mem_31809 = opencl_alloc(self, 40960, "static_mem_31809")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31809,
                      normaliseArray(mainDetailedzicounter_mem_30866),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_30866 = static_mem_31809
    mainDetailedzicounter_mem_31020 = np.zeros(10240, dtype=np.int32)
    static_mem_31812 = opencl_alloc(self, 40960, "static_mem_31812")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31812,
                      normaliseArray(mainDetailedzicounter_mem_31020),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31020 = static_mem_31812
    mainDetailedzicounter_mem_31101 = np.zeros(10240, dtype=np.int32)
    static_mem_31813 = opencl_alloc(self, 40960, "static_mem_31813")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31813,
                      normaliseArray(mainDetailedzicounter_mem_31101),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31101 = static_mem_31813
    mainDetailedzicounter_mem_31189 = np.zeros(10240, dtype=np.int32)
    static_mem_31814 = opencl_alloc(self, 40960, "static_mem_31814")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31814,
                      normaliseArray(mainDetailedzicounter_mem_31189),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31189 = static_mem_31814
    mainDetailedzicounter_mem_31383 = np.zeros(10240, dtype=np.int32)
    static_mem_31815 = opencl_alloc(self, 40960, "static_mem_31815")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31815,
                      normaliseArray(mainDetailedzicounter_mem_31383),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31383 = static_mem_31815
    mainDetailedzicounter_mem_31443 = np.zeros(10240, dtype=np.int32)
    static_mem_31816 = opencl_alloc(self, 40960, "static_mem_31816")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31816,
                      normaliseArray(mainDetailedzicounter_mem_31443),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31443 = static_mem_31816
    mainDetailedzicounter_mem_31483 = np.array([np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0),
                                                np.int32(0), np.int32(0)],
                                               dtype=np.int32)
    static_mem_31817 = opencl_alloc(self, 40, "static_mem_31817")
    if (40 != 0):
      cl.enqueue_copy(self.queue, static_mem_31817,
                      normaliseArray(mainDetailedzicounter_mem_31483),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31483 = static_mem_31817
    mainDetailedzicounter_mem_31552 = np.zeros(10240, dtype=np.int32)
    static_mem_31819 = opencl_alloc(self, 40960, "static_mem_31819")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31819,
                      normaliseArray(mainDetailedzicounter_mem_31552),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31552 = static_mem_31819
    mainDetailedzicounter_mem_31729 = np.zeros(10240, dtype=np.int32)
    static_mem_31821 = opencl_alloc(self, 40960, "static_mem_31821")
    if (40960 != 0):
      cl.enqueue_copy(self.queue, static_mem_31821,
                      normaliseArray(mainDetailedzicounter_mem_31729),
                      is_blocking=synchronous)
    self.mainDetailedzicounter_mem_31729 = static_mem_31821
  def futhark_builtinzhgpu_map_transpose_f32(self, destmem_0, destoffset_1,
                                             srcmem_2, srcoffset_3,
                                             num_arrays_4, x_elems_5,
                                             y_elems_6):
    if ((num_arrays_4 == np.int32(0)) or ((x_elems_5 == np.int32(0)) or (y_elems_6 == np.int32(0)))):
      pass
    else:
      muly_8 = squot32(np.int32(16), x_elems_5)
      mulx_7 = squot32(np.int32(16), y_elems_6)
      if ((num_arrays_4 == np.int32(1)) and ((x_elems_5 == np.int32(1)) or (y_elems_6 == np.int32(1)))):
        if (sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4))) != 0):
          cl.enqueue_copy(self.queue, destmem_0, srcmem_2,
                          dest_offset=np.long(sext_i32_i64(destoffset_1)),
                          src_offset=np.long(sext_i32_i64(srcoffset_3)),
                          byte_count=np.long(sext_i32_i64(((x_elems_5 * y_elems_6) * np.int32(4)))))
        if synchronous:
          sync(self)
      else:
        if (sle32(x_elems_5, np.int32(8)) and slt32(np.int32(16), y_elems_6)):
          if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                                                                muly_8),
                                                                                                      np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
            self.gpu_map_transpose_f32_low_width_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.gpu_map_transpose_f32_low_width_var,
                                       ((np.long(sdiv_up32(x_elems_5,
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(sdiv_up32(sdiv_up32(y_elems_6,
                                                                     muly_8),
                                                           np.int32(16))) * np.long(np.int32(16))),
                                        (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                       (np.long(np.int32(16)),
                                        np.long(np.int32(16)),
                                        np.long(np.int32(1))))
            if synchronous:
              sync(self)
        else:
          if (sle32(y_elems_6, np.int32(8)) and slt32(np.int32(16), x_elems_5)):
            if ((((1 * (np.long(sdiv_up32(sdiv_up32(x_elems_5, mulx_7),
                                          np.int32(16))) * np.long(np.int32(16)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                        np.int32(16))) * np.long(np.int32(16)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
              self.gpu_map_transpose_f32_low_height_var.set_args(cl.LocalMemory(np.long(np.int64(1088))),
                                                                 np.int32(destoffset_1),
                                                                 np.int32(srcoffset_3),
                                                                 np.int32(num_arrays_4),
                                                                 np.int32(x_elems_5),
                                                                 np.int32(y_elems_6),
                                                                 np.int32(mulx_7),
                                                                 np.int32(muly_8),
                                                                 destmem_0,
                                                                 srcmem_2)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.gpu_map_transpose_f32_low_height_var,
                                         ((np.long(sdiv_up32(sdiv_up32(x_elems_5,
                                                                       mulx_7),
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(sdiv_up32(y_elems_6,
                                                             np.int32(16))) * np.long(np.int32(16))),
                                          (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                         (np.long(np.int32(16)),
                                          np.long(np.int32(16)),
                                          np.long(np.int32(1))))
              if synchronous:
                sync(self)
          else:
            if (sle32(x_elems_5, np.int32(8)) and sle32(y_elems_6,
                                                        np.int32(8))):
              if ((1 * (np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                          np.int32(256))) * np.long(np.int32(256)))) != 0):
                self.gpu_map_transpose_f32_small_var.set_args(cl.LocalMemory(np.long(np.int64(1))),
                                                              np.int32(destoffset_1),
                                                              np.int32(srcoffset_3),
                                                              np.int32(num_arrays_4),
                                                              np.int32(x_elems_5),
                                                              np.int32(y_elems_6),
                                                              np.int32(mulx_7),
                                                              np.int32(muly_8),
                                                              destmem_0,
                                                              srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_small_var,
                                           ((np.long(sdiv_up32(((num_arrays_4 * x_elems_5) * y_elems_6),
                                                               np.int32(256))) * np.long(np.int32(256))),),
                                           (np.long(np.int32(256)),))
                if synchronous:
                  sync(self)
            else:
              if ((((1 * (np.long(sdiv_up32(x_elems_5,
                                            np.int32(32))) * np.long(np.int32(32)))) * (np.long(sdiv_up32(y_elems_6,
                                                                                                          np.int32(32))) * np.long(np.int32(8)))) * (np.long(num_arrays_4) * np.long(np.int32(1)))) != 0):
                self.gpu_map_transpose_f32_var.set_args(cl.LocalMemory(np.long(np.int64(4224))),
                                                        np.int32(destoffset_1),
                                                        np.int32(srcoffset_3),
                                                        np.int32(num_arrays_4),
                                                        np.int32(x_elems_5),
                                                        np.int32(y_elems_6),
                                                        np.int32(mulx_7),
                                                        np.int32(muly_8),
                                                        destmem_0, srcmem_2)
                cl.enqueue_nd_range_kernel(self.queue,
                                           self.gpu_map_transpose_f32_var,
                                           ((np.long(sdiv_up32(x_elems_5,
                                                               np.int32(32))) * np.long(np.int32(32))),
                                            (np.long(sdiv_up32(y_elems_6,
                                                               np.int32(32))) * np.long(np.int32(8))),
                                            (np.long(num_arrays_4) * np.long(np.int32(1)))),
                                           (np.long(np.int32(32)),
                                            np.long(np.int32(8)),
                                            np.long(np.int32(1))))
                if synchronous:
                  sync(self)
    return ()
  def futhark_builtinzhreplicate_f32(self, mem_31202, num_elems_31203,
                                     val_31204):
    group_sizze_31209 = self.sizes["builtin#replicate_f32.group_size_31209"]
    num_groups_31210 = sdiv_up64(num_elems_31203, group_sizze_31209)
    if ((1 * (np.long(num_groups_31210) * np.long(group_sizze_31209))) != 0):
      self.builtinzhreplicate_f32zireplicate_31206_var.set_args(mem_31202,
                                                                np.int32(num_elems_31203),
                                                                np.float32(val_31204))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_f32zireplicate_31206_var,
                                 ((np.long(num_groups_31210) * np.long(group_sizze_31209)),),
                                 (np.long(group_sizze_31209),))
      if synchronous:
        sync(self)
    return ()
  def futhark_builtinzhreplicate_i32(self, mem_31211, num_elems_31212,
                                     val_31213):
    group_sizze_31218 = self.sizes["builtin#replicate_i32.group_size_31218"]
    num_groups_31219 = sdiv_up64(num_elems_31212, group_sizze_31218)
    if ((1 * (np.long(num_groups_31219) * np.long(group_sizze_31218))) != 0):
      self.builtinzhreplicate_i32zireplicate_31215_var.set_args(mem_31211,
                                                                np.int32(num_elems_31212),
                                                                np.int32(val_31213))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.builtinzhreplicate_i32zireplicate_31215_var,
                                 ((np.long(num_groups_31219) * np.long(group_sizze_31218)),),
                                 (np.long(group_sizze_31218),))
      if synchronous:
        sync(self)
    return ()
  def futhark_main(self, mappingindices_mem_29972, images_mem_29973, N_20967,
                   m_20968, N_20969, trend_20970, k_20971, n_20972, freq_20973,
                   hfrac_20974, lam_20975):
    dim_match_20978 = (N_20967 == N_20969)
    empty_or_match_cert_20979 = True
    assert dim_match_20978, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:157:1-163:20\n" % ("function arguments of wrong shape",))
    res_20981 = sext_i32_i64(n_20972)
    x_20982 = (np.int32(2) * k_20971)
    k2p2_20983 = (np.int32(2) + x_20982)
    cond_20984 = slt32(np.int32(0), trend_20970)
    if cond_20984:
      k2p2zq_20985 = k2p2_20983
    else:
      res_20986 = (k2p2_20983 - np.int32(1))
      k2p2zq_20985 = res_20986
    res_20987 = sext_i32_i64(k2p2zq_20985)
    binop_x_29976 = (N_20967 * res_20987)
    bytes_29975 = (np.int64(4) * binop_x_29976)
    if cond_20984:
      bounds_invalid_upwards_20989 = slt64(res_20987, np.int64(0))
      valid_20990 = not(bounds_invalid_upwards_20989)
      range_valid_c_20991 = True
      assert valid_20990, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:31:16-65\n   #4  bfastfinal.fut:162:5-58\n   #5  bfastfinal.fut:157:1-163:20\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_20987,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25394 = self.sizes["main.segmap_group_size_25324"]
      segmap_usable_groups_25395 = sdiv_up64(binop_x_29976,
                                             segmap_group_sizze_25394)
      mem_29977 = opencl_alloc(self, bytes_29975, "mem_29977")
      if ((1 * (np.long(segmap_usable_groups_25395) * np.long(segmap_group_sizze_25394))) != 0):
        self.mainzisegmap_25321_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.float32(freq_20973),
                                             np.int64(res_20987),
                                             mappingindices_mem_29972,
                                             mem_29977)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25321_var,
                                   ((np.long(segmap_usable_groups_25395) * np.long(segmap_group_sizze_25394)),),
                                   (np.long(segmap_group_sizze_25394),))
        if synchronous:
          sync(self)
      binop_p_mem_29982 = mem_29977
    else:
      bounds_invalid_upwards_21015 = slt64(res_20987, np.int64(0))
      valid_21016 = not(bounds_invalid_upwards_21015)
      range_valid_c_21017 = True
      assert valid_21016, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:32:10-57\n   #4  bfastfinal.fut:162:5-58\n   #5  bfastfinal.fut:157:1-163:20\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_20987,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_25568 = self.sizes["main.segmap_group_size_25502"]
      segmap_usable_groups_25569 = sdiv_up64(binop_x_29976,
                                             segmap_group_sizze_25568)
      mem_29981 = opencl_alloc(self, bytes_29975, "mem_29981")
      if ((1 * (np.long(segmap_usable_groups_25569) * np.long(segmap_group_sizze_25568))) != 0):
        self.mainzisegmap_25499_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.float32(freq_20973),
                                             np.int64(res_20987),
                                             mappingindices_mem_29972,
                                             mem_29981)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25499_var,
                                   ((np.long(segmap_usable_groups_25569) * np.long(segmap_group_sizze_25568)),),
                                   (np.long(segmap_group_sizze_25568),))
        if synchronous:
          sync(self)
      binop_p_mem_29982 = mem_29981
    x_21040 = (N_20967 * N_20967)
    y_21041 = (np.int64(2) * N_20967)
    x_21042 = (x_21040 + y_21041)
    x_21043 = (np.int64(1) + x_21042)
    y_21044 = (np.int64(1) + N_20967)
    zzero_21045 = (y_21044 == np.int64(0))
    nonzzero_21046 = not(zzero_21045)
    nonzzero_cert_21047 = True
    assert nonzzero_21046, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:32-56\n   #1  bfastfinal.fut:162:5-58\n   #2  bfastfinal.fut:157:1-163:20\n" % ("division by zero",))
    x_21048 = sdiv64(x_21043, y_21044)
    x_21049 = (x_21048 - N_20967)
    binop_p_21050 = (x_21049 - np.int64(1))
    res_21051 = sext_i64_i32(binop_p_21050)
    res_21052 = sitofp_i32_f32(res_21051)
    segmap_group_sizze_25651 = self.sizes["main.segmap_group_size_25630"]
    segmap_usable_groups_25652 = sdiv_up64(binop_x_29976,
                                           segmap_group_sizze_25651)
    mem_29985 = opencl_alloc(self, bytes_29975, "mem_29985")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_29985, np.int64(0),
                                                binop_p_mem_29982, np.int64(0),
                                                np.int64(1), N_20967, res_20987)
    mem_29989 = opencl_alloc(self, bytes_29975, "mem_29989")
    if ((1 * (np.long(segmap_usable_groups_25652) * np.long(segmap_group_sizze_25651))) != 0):
      self.mainzisegmap_25627_var.set_args(self.global_failure,
                                           np.int64(N_20967),
                                           np.int64(res_20987),
                                           np.float32(res_21052), mem_29985,
                                           mem_29989)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25627_var,
                                 ((np.long(segmap_usable_groups_25652) * np.long(segmap_group_sizze_25651)),),
                                 (np.long(segmap_group_sizze_25651),))
      if synchronous:
        sync(self)
    eq_x_y_21060 = (np.int64(0) == res_20987)
    p_and_eq_x_y_21061 = (cond_20984 and eq_x_y_21060)
    not_p_21062 = not(cond_20984)
    p_and_eq_x_y_21063 = (eq_x_y_21060 and not_p_21062)
    empty_slice_21064 = (p_and_eq_x_y_21061 or p_and_eq_x_y_21063)
    m_21065 = (res_20987 - np.int64(1))
    zzero_leq_i_p_m_t_s_21066 = sle64(np.int64(0), m_21065)
    i_p_m_t_s_leq_w_21067 = slt64(m_21065, res_20987)
    i_lte_j_21068 = sle64(np.int64(0), res_20987)
    y_21069 = (zzero_leq_i_p_m_t_s_21066 and i_p_m_t_s_leq_w_21067)
    y_21070 = (i_lte_j_21068 and y_21069)
    ok_or_empty_21071 = (empty_slice_21064 or y_21070)
    empty_slice_21072 = (res_20981 == np.int64(0))
    m_21073 = (res_20981 - np.int64(1))
    zzero_leq_i_p_m_t_s_21074 = sle64(np.int64(0), m_21073)
    i_p_m_t_s_leq_w_21075 = slt64(m_21073, N_20967)
    i_lte_j_21076 = sle64(np.int64(0), res_20981)
    y_21077 = (zzero_leq_i_p_m_t_s_21074 and i_p_m_t_s_leq_w_21075)
    y_21078 = (i_lte_j_21076 and y_21077)
    ok_or_empty_21079 = (empty_slice_21072 or y_21078)
    index_ok_21080 = (ok_or_empty_21071 and ok_or_empty_21079)
    index_certs_21081 = True
    assert index_ok_21080, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-23\n   #1  bfastfinal.fut:162:5-58\n   #2  bfastfinal.fut:157:1-163:20\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_20981,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_20987,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_20967,
                                                                                                                                                                               "]."))
    empty_slice_21083 = (res_20987 == np.int64(0))
    ok_or_empty_21084 = (y_21070 or empty_slice_21083)
    index_ok_21085 = (ok_or_empty_21079 and ok_or_empty_21084)
    index_certs_21086 = True
    assert index_ok_21085, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-24\n   #1  bfastfinal.fut:162:5-58\n   #2  bfastfinal.fut:157:1-163:20\n" % ("Index [:",
                                                                                                                                                                               res_20981,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_20967,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_20987,
                                                                                                                                                                               "]."))
    empty_slice_21088 = (m_20968 == np.int64(0))
    m_21089 = (m_20968 - np.int64(1))
    zzero_leq_i_p_m_t_s_21090 = sle64(np.int64(0), m_21089)
    i_p_m_t_s_leq_w_21091 = slt64(m_21089, m_20968)
    i_lte_j_21092 = sle64(np.int64(0), m_20968)
    y_21093 = (zzero_leq_i_p_m_t_s_21090 and i_p_m_t_s_leq_w_21091)
    y_21094 = (i_lte_j_21092 and y_21093)
    ok_or_empty_21095 = (empty_slice_21088 or y_21094)
    index_ok_21096 = (ok_or_empty_21079 and ok_or_empty_21095)
    index_certs_21097 = True
    assert index_ok_21096, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:43:15-28\n   #1  bfastfinal.fut:162:5-58\n   #2  bfastfinal.fut:157:1-163:20\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_20981,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_20968,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_20967,
                                                                                                                                                                               "]."))
    suff_outer_par_25658 = (self.sizes["main.suff_outer_par_6"] <= m_20968)
    segmap_group_sizze_25684 = self.sizes["main.segmap_group_size_25662"]
    max_num_groups_30783 = self.sizes["main.segmap_num_groups_25664"]
    num_groups_25685 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segmap_group_sizze_25684),
                                                  sext_i32_i64(max_num_groups_30783))))
    nest_sizze_25860 = (m_20968 * res_20987)
    segmap_group_sizze_25861 = self.sizes["main.segmap_group_size_25709"]
    max_num_groups_30784 = self.sizes["main.segmap_num_groups_25711"]
    num_groups_25862 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_25860,
                                                            segmap_group_sizze_25861),
                                                  sext_i32_i64(max_num_groups_30784))))
    suff_outer_par_25866 = (self.sizes["main.suff_outer_par_7"] <= nest_sizze_25860)
    y_25885 = (res_20987 * res_20987)
    nest_sizze_25886 = (m_20968 * y_25885)
    segmap_group_sizze_25887 = self.sizes["main.segmap_group_size_25740"]
    suff_outer_par_25892 = (self.sizes["main.suff_outer_par_8"] <= nest_sizze_25886)
    nest_sizze_25912 = (res_20981 * nest_sizze_25886)
    segred_group_sizze_25913 = self.sizes["main.segred_group_size_25769"]
    max_num_groups_30785 = self.sizes["main.segred_num_groups_25771"]
    num_groups_25914 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_25912,
                                                            segred_group_sizze_25913),
                                                  sext_i32_i64(max_num_groups_30785))))
    binop_x_29991 = (m_20968 * N_20969)
    bytes_29990 = (np.int64(4) * binop_x_29991)
    bytes_30035 = (np.int64(4) * nest_sizze_25886)
    bytes_29994 = (np.int64(4) * y_25885)
    binop_x_30080 = (res_20987 * nest_sizze_25860)
    bytes_30078 = (np.int64(4) * binop_x_30080)
    bytes_30040 = (np.int64(4) * res_20987)
    num_threads_30721 = (segmap_group_sizze_25684 * num_groups_25685)
    total_sizze_30722 = (bytes_29994 * num_threads_30721)
    num_threads_30723 = (segmap_group_sizze_25861 * num_groups_25862)
    total_sizze_30724 = (bytes_30040 * num_threads_30723)
    local_memory_capacity_30878 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_30878)) and suff_outer_par_25658):
      mem_29992 = opencl_alloc(self, bytes_29990, "mem_29992")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_29992, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20969, m_20968)
      mem_30038 = opencl_alloc(self, bytes_30035, "mem_30038")
      mem_29996 = opencl_alloc(self, total_sizze_30722, "mem_29996")
      if ((1 * (np.long(num_groups_25685) * np.long(segmap_group_sizze_25684))) != 0):
        self.mainzisegmap_25660_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968),
                                             np.int32(n_20972),
                                             np.int32(k2p2zq_20985),
                                             np.int64(res_20987),
                                             np.int64(num_groups_25685),
                                             binop_p_mem_29982, mem_29989,
                                             mem_29992, mem_29996, mem_30038)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25660_var,
                                   ((np.long(num_groups_25685) * np.long(segmap_group_sizze_25684)),),
                                   (np.long(segmap_group_sizze_25684),))
        if synchronous:
          sync(self)
      mem_29992 = None
      mem_29996 = None
      mem_30081 = opencl_alloc(self, bytes_30078, "mem_30081")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30081, np.int64(0),
                                                  mem_30038, np.int64(0),
                                                  np.int64(1), m_20968,
                                                  (res_20987 * res_20987))
      mem_30038 = None
      res_mem_30083 = mem_30081
    else:
      local_memory_capacity_30877 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_30877)) and suff_outer_par_25866):
        mem_30057 = opencl_alloc(self, bytes_30078, "mem_30057")
        mem_30041 = opencl_alloc(self, total_sizze_30724, "mem_30041")
        if ((1 * (np.long(num_groups_25862) * np.long(segmap_group_sizze_25861))) != 0):
          self.mainzisegmap_25706_var.set_args(self.global_failure,
                                               np.int64(m_20968),
                                               np.int64(N_20969),
                                               np.int32(n_20972),
                                               np.int32(k2p2zq_20985),
                                               np.int64(res_20987),
                                               np.int64(num_groups_25862),
                                               images_mem_29973, mem_29985,
                                               mem_29989, mem_30041, mem_30057)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25706_var,
                                     ((np.long(num_groups_25862) * np.long(segmap_group_sizze_25861)),),
                                     (np.long(segmap_group_sizze_25861),))
          if synchronous:
            sync(self)
        mem_30041 = None
        mem_30075 = opencl_alloc(self, bytes_30078, "mem_30075")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30075, np.int64(0),
                                                    mem_30057, np.int64(0),
                                                    np.int64(1),
                                                    (m_20968 * res_20987),
                                                    res_20987)
        mem_30057 = None
        res_mem_30077 = mem_30075
      else:
        segmap_usable_groups_25888 = sdiv_up64(nest_sizze_25886,
                                               segmap_group_sizze_25887)
        local_memory_capacity_30876 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_30876)) and suff_outer_par_25892):
          mem_30062 = opencl_alloc(self, bytes_30078, "mem_30062")
          if ((1 * (np.long(segmap_usable_groups_25888) * np.long(segmap_group_sizze_25887))) != 0):
            self.mainzisegmap_25736_var.set_args(self.global_failure,
                                                 np.int64(m_20968),
                                                 np.int64(N_20969),
                                                 np.int32(n_20972),
                                                 np.int64(res_20987),
                                                 images_mem_29973, mem_29985,
                                                 mem_29989, mem_30062)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_25736_var,
                                       ((np.long(segmap_usable_groups_25888) * np.long(segmap_group_sizze_25887)),),
                                       (np.long(segmap_group_sizze_25887),))
            if synchronous:
              sync(self)
          res_mem_30071 = mem_30062
        else:
          mem_30065 = opencl_alloc(self, bytes_29975, "mem_30065")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_30065, np.int64(0),
                                                      mem_29989, np.int64(0),
                                                      np.int64(1), res_20987,
                                                      N_20967)
          mem_30070 = opencl_alloc(self, bytes_30078, "mem_30070")
          if slt64((res_20981 * np.int64(2)), segred_group_sizze_25913):
            segment_sizze_nonzzero_30816 = smax64(np.int64(1), res_20981)
            num_threads_30817 = (num_groups_25914 * segred_group_sizze_25913)
            if ((1 * (np.long(num_groups_25914) * np.long(segred_group_sizze_25913))) != 0):
              self.mainzisegred_small_25775_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25913))),
                                                         np.int64(N_20967),
                                                         np.int64(m_20968),
                                                         np.int64(N_20969),
                                                         np.int64(res_20981),
                                                         np.int64(res_20987),
                                                         np.int64(num_groups_25914),
                                                         images_mem_29973,
                                                         binop_p_mem_29982,
                                                         mem_30065, mem_30070,
                                                         np.int64(segment_sizze_nonzzero_30816))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_small_25775_var,
                                         ((np.long(num_groups_25914) * np.long(segred_group_sizze_25913)),),
                                         (np.long(segred_group_sizze_25913),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_30837 = sdiv_up64(num_groups_25914,
                                                 smax64(np.int64(1),
                                                        ((m_20968 * res_20987) * res_20987)))
            elements_per_thread_30838 = sdiv_up64(res_20981,
                                                  (segred_group_sizze_25913 * groups_per_segment_30837))
            virt_num_groups_30839 = (groups_per_segment_30837 * ((m_20968 * res_20987) * res_20987))
            num_threads_30840 = (num_groups_25914 * segred_group_sizze_25913)
            threads_per_segment_30841 = (groups_per_segment_30837 * segred_group_sizze_25913)
            group_res_arr_mem_30842 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_25913 * virt_num_groups_30839)),
                                                   "group_res_arr_mem_30842")
            mainzicounter_mem_30844 = self.mainzicounter_mem_30844
            if ((1 * (np.long(num_groups_25914) * np.long(segred_group_sizze_25913))) != 0):
              self.mainzisegred_large_25775_var.set_args(self.global_failure,
                                                         cl.LocalMemory(np.long(np.int32(1))),
                                                         cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25913))),
                                                         np.int64(N_20967),
                                                         np.int64(N_20969),
                                                         np.int64(res_20981),
                                                         np.int64(res_20987),
                                                         np.int64(num_groups_25914),
                                                         images_mem_29973,
                                                         binop_p_mem_29982,
                                                         mem_30065, mem_30070,
                                                         np.int64(groups_per_segment_30837),
                                                         np.int64(elements_per_thread_30838),
                                                         np.int64(virt_num_groups_30839),
                                                         np.int64(threads_per_segment_30841),
                                                         group_res_arr_mem_30842,
                                                         mainzicounter_mem_30844)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainzisegred_large_25775_var,
                                         ((np.long(num_groups_25914) * np.long(segred_group_sizze_25913)),),
                                         (np.long(segred_group_sizze_25913),))
              if synchronous:
                sync(self)
          mem_30065 = None
          res_mem_30071 = mem_30070
        res_mem_30077 = res_mem_30071
      res_mem_30083 = res_mem_30077
    m_21118 = (np.int64(2) * res_20987)
    nm_21119 = (res_20987 * m_21118)
    bounds_invalid_upwards_21120 = slt64(nm_21119, np.int64(0))
    valid_21121 = not(bounds_invalid_upwards_21120)
    range_valid_c_21122 = True
    assert valid_21121, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:162:5-58\n   #4  bfastfinal.fut:157:1-163:20\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_21119,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_21124 = (m_21118 == np.int64(0))
    nonzzero_21125 = not(zzero_21124)
    nonzzero_cert_21126 = True
    assert nonzzero_21125, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:162:5-58\n   #4  bfastfinal.fut:157:1-163:20\n" % ("division by zero",))
    res_21127 = sext_i64_i32(m_21118)
    loop_nonempty_21128 = slt32(np.int32(0), k2p2zq_20985)
    zzero_21129 = (res_21127 == np.int32(0))
    nonzzero_21130 = not(zzero_21129)
    loop_not_taken_21131 = not(loop_nonempty_21128)
    protect_assert_disj_21132 = (nonzzero_21130 or loop_not_taken_21131)
    nonzzero_cert_21133 = True
    assert protect_assert_disj_21132, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:53:35-50\n   #4  bfastfinal.fut:162:5-58\n   #5  bfastfinal.fut:157:1-163:20\n" % ("division by zero",))
    y_25993 = smin64(res_20987, nm_21119)
    intra_avail_par_25994 = smin64(y_25885, y_25993)
    y_25995 = smax64(res_20987, nm_21119)
    computed_group_sizze_25937 = smax64(y_25885, y_25995)
    max_group_sizze_26128 = self.max_group_size
    fits_26129 = sle64(computed_group_sizze_25937, max_group_sizze_26128)
    suff_intra_par_26127 = (self.sizes["main.suff_intra_par_10"] <= intra_avail_par_25994)
    intra_suff_and_fits_26130 = (suff_intra_par_26127 and fits_26129)
    nest_sizze_26711 = (m_20968 * nm_21119)
    segmap_group_sizze_26712 = self.sizes["main.segmap_group_size_26675"]
    fits_26739 = sle64(nm_21119, max_group_sizze_26128)
    suff_intra_par_26741 = (self.sizes["main.suff_intra_par_14"] <= nm_21119)
    intra_suff_and_fits_26742 = (fits_26739 and suff_intra_par_26741)
    segmap_group_sizze_26778 = self.sizes["main.segmap_group_size_26583"]
    segmap_group_sizze_26794 = self.sizes["main.segmap_group_size_26516"]
    segmap_group_sizze_26828 = self.sizes["main.segmap_group_size_26462"]
    segmap_group_sizze_26863 = self.sizes["main.segmap_group_size_26244"]
    segmap_usable_groups_26779 = sdiv_up_safe64(m_20968,
                                                segmap_group_sizze_26778)
    segmap_usable_groups_26795 = sdiv_up_safe64(nest_sizze_26711,
                                                segmap_group_sizze_26794)
    segmap_usable_groups_26829 = sdiv_up_safe64(nest_sizze_26711,
                                                segmap_group_sizze_26828)
    bytes_30086 = (np.int64(4) * nm_21119)
    bytes_30113 = (np.int64(4) * nest_sizze_26711)
    local_memory_capacity_30943 = self.max_local_memory
    if (sle64(((bytes_30086 + bytes_30086) + bytes_29994),
              sext_i32_i64(local_memory_capacity_30943)) and intra_suff_and_fits_26130):
      mem_30111 = opencl_alloc(self, bytes_30078, "mem_30111")
      if ((1 * (np.long(m_20968) * np.long(computed_group_sizze_25937))) != 0):
        self.mainzisegmap_intragroup_25996_var.set_args(self.global_failure,
                                                        self.failure_is_an_option,
                                                        self.global_failure_args,
                                                        cl.LocalMemory(np.long(bytes_29994)),
                                                        cl.LocalMemory(np.long(bytes_30086)),
                                                        cl.LocalMemory(np.long(bytes_30086)),
                                                        np.int32(k2p2zq_20985),
                                                        np.int64(res_20987),
                                                        np.int64(m_21118),
                                                        np.int64(nm_21119),
                                                        np.int32(res_21127),
                                                        np.int64(computed_group_sizze_25937),
                                                        res_mem_30083,
                                                        mem_30111)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_25996_var,
                                   ((np.long(m_20968) * np.long(computed_group_sizze_25937)),),
                                   (np.long(computed_group_sizze_25937),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_30166 = mem_30111
    else:
      segmap_usable_groups_26713 = sdiv_up64(nest_sizze_26711,
                                             segmap_group_sizze_26712)
      mem_30115 = opencl_alloc(self, bytes_30113, "mem_30115")
      if ((1 * (np.long(segmap_usable_groups_26713) * np.long(segmap_group_sizze_26712))) != 0):
        self.mainzisegmap_26672_var.set_args(self.global_failure,
                                             np.int64(m_20968),
                                             np.int64(res_20987),
                                             np.int64(m_21118),
                                             np.int64(nm_21119), res_mem_30083,
                                             mem_30115)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26672_var,
                                   ((np.long(segmap_usable_groups_26713) * np.long(segmap_group_sizze_26712)),),
                                   (np.long(segmap_group_sizze_26712),))
        if synchronous:
          sync(self)
      ctx_param_ext_30116 = m_20968
      ctx_param_ext_30117 = nm_21119
      ctx_param_ext_30118 = np.int64(0)
      ctx_param_ext_30119 = nm_21119
      ctx_param_ext_30120 = m_20968
      ctx_param_ext_30121 = np.int64(1)
      ctx_param_ext_30122 = nm_21119
      mem_param_30123 = mem_30115
      i_26727 = np.int32(0)
      one_31798 = np.int32(1)
      for counter_31797 in range(k2p2zq_20985):
        i_26729 = sext_i32_i64(i_26727)
        x_26730 = sle64(np.int64(0), i_26729)
        y_26731 = slt64(i_26729, nm_21119)
        bounds_check_26732 = (x_26730 and y_26731)
        index_certs_26733 = True
        assert bounds_check_26732, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:162:5-58\n   #4  bfastfinal.fut:157:1-163:20\n" % ("Index [",
                                                                                                                                                                                                                                         i_26729,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_21119,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_30903 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30145 = m_20968
        else:
          res_ixfn_30145 = ctx_param_ext_30120
        local_memory_capacity_30904 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30146 = nm_21119
        else:
          res_ixfn_30146 = ctx_param_ext_30122
        local_memory_capacity_30905 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30147 = m_20968
        else:
          res_ixfn_30147 = ctx_param_ext_30116
        local_memory_capacity_30906 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30148 = nm_21119
        else:
          res_ixfn_30148 = ctx_param_ext_30117
        local_memory_capacity_30907 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30149 = nm_21119
        else:
          res_ixfn_30149 = ctx_param_ext_30119
        local_memory_capacity_30908 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30150 = np.int64(1)
        else:
          res_ixfn_30150 = ctx_param_ext_30121
        local_memory_capacity_30909 = self.max_local_memory
        if intra_suff_and_fits_26742:
          res_ixfn_30151 = np.int64(0)
        else:
          res_ixfn_30151 = ctx_param_ext_30118
        local_memory_capacity_30937 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_30937)) and sle64(bytes_30086,
                                                                        sext_i32_i64(local_memory_capacity_30937))) and intra_suff_and_fits_26742):
          mem_30128 = opencl_alloc(self, bytes_30113, "mem_30128")
          group_sizze_30913 = self.sizes["main.group_size_30913"]
          num_groups_30914 = sdiv_up64((m_20968 * nm_21119), group_sizze_30913)
          if ((1 * (np.long(num_groups_30914) * np.long(group_sizze_30913))) != 0):
            self.mainzicopy_30910_var.set_args(np.int64(m_20968),
                                               np.int64(nm_21119),
                                               np.int64(ctx_param_ext_30118),
                                               np.int64(ctx_param_ext_30119),
                                               np.int64(ctx_param_ext_30121),
                                               mem_param_30123, mem_30128)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzicopy_30910_var,
                                       ((np.long(num_groups_30914) * np.long(group_sizze_30913)),),
                                       (np.long(group_sizze_30913),))
            if synchronous:
              sync(self)
          mem_30136 = opencl_alloc(self, bytes_30113, "mem_30136")
          if ((1 * (np.long(m_20968) * np.long(nm_21119))) != 0):
            self.mainzisegmap_intragroup_26340_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(bytes_30086)),
                                                            np.int64(m_20968),
                                                            np.int32(k2p2zq_20985),
                                                            np.int64(nm_21119),
                                                            np.int32(res_21127),
                                                            np.int32(i_26727),
                                                            np.int64(i_26729),
                                                            np.int64(ctx_param_ext_30118),
                                                            np.int64(ctx_param_ext_30119),
                                                            np.int64(ctx_param_ext_30121),
                                                            mem_param_30123,
                                                            mem_30128,
                                                            mem_30136)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegmap_intragroup_26340_var,
                                       ((np.long(m_20968) * np.long(nm_21119)),),
                                       (np.long(nm_21119),))
            if synchronous:
              sync(self)
          mem_30128 = None
          res_mem_30152 = mem_30136
        else:
          mem_30139 = opencl_alloc(self, m_20968, "mem_30139")
          if ((1 * (np.long(segmap_usable_groups_26779) * np.long(segmap_group_sizze_26778))) != 0):
            self.mainzisegmap_26581_var.set_args(self.global_failure,
                                                 np.int64(m_20968),
                                                 np.int64(i_26729),
                                                 np.int64(ctx_param_ext_30118),
                                                 np.int64(ctx_param_ext_30119),
                                                 np.int64(ctx_param_ext_30121),
                                                 mem_param_30123, mem_30139)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26581_var,
                                       ((np.long(segmap_usable_groups_26779) * np.long(segmap_group_sizze_26778)),),
                                       (np.long(segmap_group_sizze_26778),))
            if synchronous:
              sync(self)
          mem_30143 = opencl_alloc(self, bytes_30113, "mem_30143")
          if ((1 * (np.long(segmap_usable_groups_26795) * np.long(segmap_group_sizze_26794))) != 0):
            self.mainzisegmap_26513_var.set_args(self.global_failure,
                                                 np.int64(m_20968),
                                                 np.int32(k2p2zq_20985),
                                                 np.int64(nm_21119),
                                                 np.int32(res_21127),
                                                 np.int32(i_26727),
                                                 np.int64(i_26729),
                                                 np.int64(ctx_param_ext_30118),
                                                 np.int64(ctx_param_ext_30119),
                                                 np.int64(ctx_param_ext_30121),
                                                 mem_param_30123, mem_30139,
                                                 mem_30143)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26513_var,
                                       ((np.long(segmap_usable_groups_26795) * np.long(segmap_group_sizze_26794)),),
                                       (np.long(segmap_group_sizze_26794),))
            if synchronous:
              sync(self)
          mem_30139 = None
          if ((1 * (np.long(segmap_usable_groups_26829) * np.long(segmap_group_sizze_26828))) != 0):
            self.mainzisegmap_26459_var.set_args(self.global_failure,
                                                 np.int64(m_20968),
                                                 np.int64(nm_21119),
                                                 np.int64(ctx_param_ext_30118),
                                                 np.int64(ctx_param_ext_30119),
                                                 np.int64(ctx_param_ext_30121),
                                                 mem_param_30123, mem_30143)
            cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26459_var,
                                       ((np.long(segmap_usable_groups_26829) * np.long(segmap_group_sizze_26828)),),
                                       (np.long(segmap_group_sizze_26828),))
            if synchronous:
              sync(self)
          mem_30143 = None
          res_mem_30152 = mem_param_30123
        ctx_param_ext_tmp_30894 = res_ixfn_30147
        ctx_param_ext_tmp_30895 = res_ixfn_30148
        ctx_param_ext_tmp_30896 = res_ixfn_30151
        ctx_param_ext_tmp_30897 = res_ixfn_30149
        ctx_param_ext_tmp_30898 = res_ixfn_30145
        ctx_param_ext_tmp_30899 = res_ixfn_30150
        ctx_param_ext_tmp_30900 = res_ixfn_30146
        mem_param_tmp_30901 = res_mem_30152
        ctx_param_ext_30116 = ctx_param_ext_tmp_30894
        ctx_param_ext_30117 = ctx_param_ext_tmp_30895
        ctx_param_ext_30118 = ctx_param_ext_tmp_30896
        ctx_param_ext_30119 = ctx_param_ext_tmp_30897
        ctx_param_ext_30120 = ctx_param_ext_tmp_30898
        ctx_param_ext_30121 = ctx_param_ext_tmp_30899
        ctx_param_ext_30122 = ctx_param_ext_tmp_30900
        mem_param_30123 = mem_param_tmp_30901
        i_26727 += one_31798
      res_r_ixfn_30153 = ctx_param_ext_30116
      res_r_ixfn_30154 = ctx_param_ext_30117
      res_r_ixfn_30155 = ctx_param_ext_30118
      res_r_ixfn_30156 = ctx_param_ext_30119
      res_r_ixfn_30157 = ctx_param_ext_30120
      res_r_ixfn_30158 = ctx_param_ext_30121
      res_r_ixfn_30159 = ctx_param_ext_30122
      res_r_mem_30160 = mem_param_30123
      mem_30115 = None
      segmap_usable_groups_26864 = sdiv_up64(nest_sizze_25886,
                                             segmap_group_sizze_26863)
      mem_30165 = opencl_alloc(self, bytes_30078, "mem_30165")
      if ((1 * (np.long(segmap_usable_groups_26864) * np.long(segmap_group_sizze_26863))) != 0):
        self.mainzisegmap_26240_var.set_args(self.global_failure,
                                             np.int64(m_20968),
                                             np.int64(res_20987),
                                             np.int64(m_21118),
                                             np.int64(res_r_ixfn_30155),
                                             np.int64(res_r_ixfn_30156),
                                             np.int64(res_r_ixfn_30158),
                                             res_r_mem_30160, mem_30165)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26240_var,
                                   ((np.long(segmap_usable_groups_26864) * np.long(segmap_group_sizze_26863)),),
                                   (np.long(segmap_group_sizze_26863),))
        if synchronous:
          sync(self)
      res_r_mem_30160 = None
      res_mem_30166 = mem_30165
    res_mem_30083 = None
    suff_outer_par_26876 = (self.sizes["main.suff_outer_par_17"] <= m_20968)
    segmap_group_sizze_26898 = self.sizes["main.segmap_group_size_26880"]
    max_num_groups_30944 = self.sizes["main.segmap_num_groups_26882"]
    num_groups_26899 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segmap_group_sizze_26898),
                                                  sext_i32_i64(max_num_groups_30944))))
    suff_outer_par_26983 = (self.sizes["main.suff_outer_par_18"] <= nest_sizze_25860)
    nest_sizze_26999 = (res_20981 * nest_sizze_25860)
    segred_group_sizze_27000 = self.sizes["main.segred_group_size_26942"]
    max_num_groups_30945 = self.sizes["main.segred_num_groups_26944"]
    num_groups_27001 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_26999,
                                                            segred_group_sizze_27000),
                                                  sext_i32_i64(max_num_groups_30945))))
    tile_sizze_28845 = self.sizes["main.tile_size_28844"]
    group_sizze_28846 = (tile_sizze_28845 * tile_sizze_28845)
    bytes_30185 = (np.int64(4) * nest_sizze_25860)
    bytes_30190 = (np.int64(4) * group_sizze_28846)
    binop_x_30634 = (np.int64(4) * tile_sizze_28845)
    sizze_30635 = (tile_sizze_28845 * binop_x_30634)
    num_threads_30734 = (segmap_group_sizze_26898 * num_groups_26899)
    total_sizze_30735 = (bytes_30040 * num_threads_30734)
    local_memory_capacity_31031 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31031)) and suff_outer_par_26876):
      mem_30169 = opencl_alloc(self, bytes_29990, "mem_30169")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30169, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20969, m_20968)
      mem_30187 = opencl_alloc(self, bytes_30185, "mem_30187")
      mem_30172 = opencl_alloc(self, total_sizze_30735, "mem_30172")
      if ((1 * (np.long(num_groups_26899) * np.long(segmap_group_sizze_26898))) != 0):
        self.mainzisegmap_26878_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968),
                                             np.int32(n_20972),
                                             np.int32(k2p2zq_20985),
                                             np.int64(res_20987),
                                             np.int64(num_groups_26899),
                                             binop_p_mem_29982, mem_30169,
                                             mem_30172, mem_30187)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_26878_var,
                                   ((np.long(num_groups_26899) * np.long(segmap_group_sizze_26898)),),
                                   (np.long(segmap_group_sizze_26898),))
        if synchronous:
          sync(self)
      mem_30169 = None
      mem_30172 = None
      mem_30255 = opencl_alloc(self, bytes_30185, "mem_30255")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30255, np.int64(0),
                                                  mem_30187, np.int64(0),
                                                  np.int64(1), m_20968,
                                                  res_20987)
      mem_30187 = None
      res_mem_30257 = mem_30255
    else:
      local_memory_capacity_31030 = self.max_local_memory
      if (sle64((((bytes_30190 + bytes_30190) + bytes_30190) + bytes_30190),
                sext_i32_i64(local_memory_capacity_31030)) and suff_outer_par_26983):
        num_groups_x_28847 = sdiv_up64(m_20968, tile_sizze_28845)
        num_groups_y_28848 = sdiv_up64(res_20987, tile_sizze_28845)
        num_groups_top_28849 = (num_groups_x_28847 * num_groups_y_28848)
        num_whole_tiles_28866 = squot64(res_20981, tile_sizze_28845)
        residual_input_29016 = srem64(res_20981, tile_sizze_28845)
        cond_29017 = (residual_input_29016 == np.int64(0))
        mem_30247 = opencl_alloc(self, bytes_30185, "mem_30247")
        if ((1 * (np.long(num_groups_top_28849) * np.long(group_sizze_28846))) != 0):
          self.mainzisegmap_intragroup_28850_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_30190)),
                                                          cl.LocalMemory(np.long(bytes_30190)),
                                                          cl.LocalMemory(np.long(bytes_30190)),
                                                          cl.LocalMemory(np.long(bytes_30190)),
                                                          np.int64(m_20968),
                                                          np.int64(N_20969),
                                                          np.int64(res_20981),
                                                          np.int64(res_20987),
                                                          np.int64(num_groups_y_28848),
                                                          np.int64(num_whole_tiles_28866),
                                                          np.int64(residual_input_29016),
                                                          np.byte(cond_29017),
                                                          images_mem_29973,
                                                          mem_29985, mem_30247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_28850_var,
                                     ((np.long(num_groups_top_28849) * np.long(group_sizze_28846)),),
                                     (np.long(group_sizze_28846),))
          if synchronous:
            sync(self)
        res_mem_30252 = mem_30247
      else:
        mem_30251 = opencl_alloc(self, bytes_30185, "mem_30251")
        if slt64((res_20981 * np.int64(2)), segred_group_sizze_27000):
          segment_sizze_nonzzero_30970 = smax64(np.int64(1), res_20981)
          num_threads_30971 = (num_groups_27001 * segred_group_sizze_27000)
          if ((1 * (np.long(num_groups_27001) * np.long(segred_group_sizze_27000))) != 0):
            self.mainzisegred_small_26948_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27000))),
                                                       np.int64(N_20967),
                                                       np.int64(m_20968),
                                                       np.int64(N_20969),
                                                       np.int64(res_20981),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27001),
                                                       images_mem_29973,
                                                       binop_p_mem_29982,
                                                       mem_30251,
                                                       np.int64(segment_sizze_nonzzero_30970))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_26948_var,
                                       ((np.long(num_groups_27001) * np.long(segred_group_sizze_27000)),),
                                       (np.long(segred_group_sizze_27000),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_30991 = sdiv_up64(num_groups_27001,
                                               smax64(np.int64(1),
                                                      (m_20968 * res_20987)))
          elements_per_thread_30992 = sdiv_up64(res_20981,
                                                (segred_group_sizze_27000 * groups_per_segment_30991))
          virt_num_groups_30993 = (groups_per_segment_30991 * (m_20968 * res_20987))
          num_threads_30994 = (num_groups_27001 * segred_group_sizze_27000)
          threads_per_segment_30995 = (groups_per_segment_30991 * segred_group_sizze_27000)
          group_res_arr_mem_30996 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27000 * virt_num_groups_30993)),
                                                 "group_res_arr_mem_30996")
          mainzicounter_mem_30998 = self.mainzicounter_mem_30998
          if ((1 * (np.long(num_groups_27001) * np.long(segred_group_sizze_27000))) != 0):
            self.mainzisegred_large_26948_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27000))),
                                                       np.int64(N_20967),
                                                       np.int64(N_20969),
                                                       np.int64(res_20981),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27001),
                                                       images_mem_29973,
                                                       binop_p_mem_29982,
                                                       mem_30251,
                                                       np.int64(groups_per_segment_30991),
                                                       np.int64(elements_per_thread_30992),
                                                       np.int64(virt_num_groups_30993),
                                                       np.int64(threads_per_segment_30995),
                                                       group_res_arr_mem_30996,
                                                       mainzicounter_mem_30998)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_26948_var,
                                       ((np.long(num_groups_27001) * np.long(segred_group_sizze_27000)),),
                                       (np.long(segred_group_sizze_27000),))
            if synchronous:
              sync(self)
        res_mem_30252 = mem_30251
      res_mem_30257 = res_mem_30252
    binop_p_mem_29982 = None
    mem_29985 = None
    suff_outer_par_27017 = (self.sizes["main.suff_outer_par_19"] <= m_20968)
    segmap_group_sizze_27038 = self.sizes["main.segmap_group_size_27021"]
    max_num_groups_31032 = self.sizes["main.segmap_num_groups_27023"]
    num_groups_27039 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segmap_group_sizze_27038),
                                                  sext_i32_i64(max_num_groups_31032))))
    segmap_group_sizze_27114 = self.sizes["main.segmap_group_size_27058"]
    suff_outer_par_27118 = (self.sizes["main.suff_outer_par_20"] <= nest_sizze_25860)
    segred_group_sizze_27133 = self.sizes["main.segred_group_size_27079"]
    max_num_groups_31033 = self.sizes["main.segred_num_groups_27081"]
    num_groups_27134 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_30080,
                                                            segred_group_sizze_27133),
                                                  sext_i32_i64(max_num_groups_31033))))
    num_threads_30738 = (segmap_group_sizze_27038 * num_groups_27039)
    total_sizze_30739 = (bytes_30040 * num_threads_30738)
    local_memory_capacity_31112 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31112)) and suff_outer_par_27017):
      mem_30261 = opencl_alloc(self, bytes_30035, "mem_30261")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30261, np.int64(0),
                                                  res_mem_30166, np.int64(0),
                                                  np.int64(1),
                                                  (res_20987 * res_20987),
                                                  m_20968)
      mem_30264 = opencl_alloc(self, bytes_30185, "mem_30264")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30264, np.int64(0),
                                                  res_mem_30257, np.int64(0),
                                                  np.int64(1), res_20987,
                                                  m_20968)
      mem_30282 = opencl_alloc(self, bytes_30185, "mem_30282")
      mem_30267 = opencl_alloc(self, total_sizze_30739, "mem_30267")
      if ((1 * (np.long(num_groups_27039) * np.long(segmap_group_sizze_27038))) != 0):
        self.mainzisegmap_27019_var.set_args(self.global_failure,
                                             np.int64(m_20968),
                                             np.int32(k2p2zq_20985),
                                             np.int64(res_20987),
                                             np.int64(num_groups_27039),
                                             mem_30261, mem_30264, mem_30267,
                                             mem_30282)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27019_var,
                                   ((np.long(num_groups_27039) * np.long(segmap_group_sizze_27038)),),
                                   (np.long(segmap_group_sizze_27038),))
        if synchronous:
          sync(self)
      mem_30261 = None
      mem_30264 = None
      mem_30267 = None
      mem_30298 = opencl_alloc(self, bytes_30185, "mem_30298")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30298, np.int64(0),
                                                  mem_30282, np.int64(0),
                                                  np.int64(1), m_20968,
                                                  res_20987)
      mem_30282 = None
      res_mem_30300 = mem_30298
    else:
      segmap_usable_groups_27115 = sdiv_up64(nest_sizze_25860,
                                             segmap_group_sizze_27114)
      local_memory_capacity_31111 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_31111)) and suff_outer_par_27118):
        mem_30286 = opencl_alloc(self, bytes_30078, "mem_30286")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30286, np.int64(0),
                                                    res_mem_30166, np.int64(0),
                                                    np.int64(1), res_20987,
                                                    (m_20968 * res_20987))
        mem_30290 = opencl_alloc(self, bytes_30185, "mem_30290")
        if ((1 * (np.long(segmap_usable_groups_27115) * np.long(segmap_group_sizze_27114))) != 0):
          self.mainzisegmap_27055_var.set_args(self.global_failure,
                                               np.int64(m_20968),
                                               np.int32(k2p2zq_20985),
                                               np.int64(res_20987),
                                               res_mem_30257, mem_30286,
                                               mem_30290)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27055_var,
                                     ((np.long(segmap_usable_groups_27115) * np.long(segmap_group_sizze_27114)),),
                                     (np.long(segmap_group_sizze_27114),))
          if synchronous:
            sync(self)
        mem_30286 = None
        res_mem_30295 = mem_30290
      else:
        mem_30294 = opencl_alloc(self, bytes_30185, "mem_30294")
        if slt64((res_20987 * np.int64(2)), segred_group_sizze_27133):
          segment_sizze_nonzzero_31051 = smax64(np.int64(1), res_20987)
          num_threads_31052 = (num_groups_27134 * segred_group_sizze_27133)
          if ((1 * (np.long(num_groups_27134) * np.long(segred_group_sizze_27133))) != 0):
            self.mainzisegred_small_27085_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27133))),
                                                       np.int64(m_20968),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27134),
                                                       res_mem_30166,
                                                       res_mem_30257, mem_30294,
                                                       np.int64(segment_sizze_nonzzero_31051))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_27085_var,
                                       ((np.long(num_groups_27134) * np.long(segred_group_sizze_27133)),),
                                       (np.long(segred_group_sizze_27133),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31072 = sdiv_up64(num_groups_27134,
                                               smax64(np.int64(1),
                                                      (m_20968 * res_20987)))
          elements_per_thread_31073 = sdiv_up64(res_20987,
                                                (segred_group_sizze_27133 * groups_per_segment_31072))
          virt_num_groups_31074 = (groups_per_segment_31072 * (m_20968 * res_20987))
          num_threads_31075 = (num_groups_27134 * segred_group_sizze_27133)
          threads_per_segment_31076 = (groups_per_segment_31072 * segred_group_sizze_27133)
          group_res_arr_mem_31077 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27133 * virt_num_groups_31074)),
                                                 "group_res_arr_mem_31077")
          mainzicounter_mem_31079 = self.mainzicounter_mem_31079
          if ((1 * (np.long(num_groups_27134) * np.long(segred_group_sizze_27133))) != 0):
            self.mainzisegred_large_27085_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27133))),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27134),
                                                       res_mem_30166,
                                                       res_mem_30257, mem_30294,
                                                       np.int64(groups_per_segment_31072),
                                                       np.int64(elements_per_thread_31073),
                                                       np.int64(virt_num_groups_31074),
                                                       np.int64(threads_per_segment_31076),
                                                       group_res_arr_mem_31077,
                                                       mainzicounter_mem_31079)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_27085_var,
                                       ((np.long(num_groups_27134) * np.long(segred_group_sizze_27133)),),
                                       (np.long(segred_group_sizze_27133),))
            if synchronous:
              sync(self)
        res_mem_30295 = mem_30294
      res_mem_30300 = res_mem_30295
    res_mem_30166 = None
    res_mem_30257 = None
    suff_outer_par_27149 = (self.sizes["main.suff_outer_par_21"] <= m_20968)
    segmap_group_sizze_27169 = self.sizes["main.segmap_group_size_27153"]
    max_num_groups_31113 = self.sizes["main.segmap_num_groups_27155"]
    num_groups_27170 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segmap_group_sizze_27169),
                                                  sext_i32_i64(max_num_groups_31113))))
    comparatee_27245 = (N_20967 * m_20968)
    suff_outer_par_27246 = (self.sizes["main.suff_outer_par_22"] <= comparatee_27245)
    nest_sizze_27260 = (res_20987 * comparatee_27245)
    segred_group_sizze_27261 = self.sizes["main.segred_group_size_27209"]
    max_num_groups_31114 = self.sizes["main.segred_num_groups_27211"]
    num_groups_27262 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27260,
                                                            segred_group_sizze_27261),
                                                  sext_i32_i64(max_num_groups_31114))))
    tile_sizze_29167 = self.sizes["main.tile_size_29166"]
    group_sizze_29168 = (tile_sizze_29167 * tile_sizze_29167)
    bytes_30319 = (np.int64(4) * comparatee_27245)
    bytes_30305 = (np.int64(4) * N_20967)
    bytes_30327 = (np.int64(4) * group_sizze_29168)
    binop_x_30646 = (np.int64(4) * tile_sizze_29167)
    sizze_30647 = (tile_sizze_29167 * binop_x_30646)
    num_threads_30742 = (segmap_group_sizze_27169 * num_groups_27170)
    total_sizze_30743 = (bytes_30305 * num_threads_30742)
    local_memory_capacity_31200 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31200)) and suff_outer_par_27149):
      mem_30303 = opencl_alloc(self, bytes_30185, "mem_30303")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30303, np.int64(0),
                                                  res_mem_30300, np.int64(0),
                                                  np.int64(1), res_20987,
                                                  m_20968)
      mem_30321 = opencl_alloc(self, bytes_30319, "mem_30321")
      mem_30306 = opencl_alloc(self, total_sizze_30743, "mem_30306")
      if ((1 * (np.long(num_groups_27170) * np.long(segmap_group_sizze_27169))) != 0):
        self.mainzisegmap_27151_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968),
                                             np.int32(k2p2zq_20985),
                                             np.int64(res_20987),
                                             np.int64(num_groups_27170),
                                             mem_29989, mem_30303, mem_30306,
                                             mem_30321)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27151_var,
                                   ((np.long(num_groups_27170) * np.long(segmap_group_sizze_27169)),),
                                   (np.long(segmap_group_sizze_27169),))
        if synchronous:
          sync(self)
      mem_30303 = None
      mem_30306 = None
      mem_30392 = opencl_alloc(self, bytes_30319, "mem_30392")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30392, np.int64(0),
                                                  mem_30321, np.int64(0),
                                                  np.int64(1), m_20968, N_20967)
      mem_30321 = None
      res_mem_30394 = mem_30392
    else:
      local_memory_capacity_31199 = self.max_local_memory
      if (sle64((((bytes_30327 + bytes_30327) + bytes_30327) + bytes_30327),
                sext_i32_i64(local_memory_capacity_31199)) and suff_outer_par_27246):
        mem_30324 = opencl_alloc(self, bytes_29975, "mem_30324")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30324, np.int64(0),
                                                    mem_29989, np.int64(0),
                                                    np.int64(1), res_20987,
                                                    N_20967)
        num_groups_x_29169 = sdiv_up64(m_20968, tile_sizze_29167)
        num_groups_y_29170 = sdiv_up64(N_20967, tile_sizze_29167)
        num_groups_top_29171 = (num_groups_x_29169 * num_groups_y_29170)
        num_whole_tiles_29188 = squot64(res_20987, tile_sizze_29167)
        residual_input_29332 = srem64(res_20987, tile_sizze_29167)
        cond_29333 = (residual_input_29332 == np.int64(0))
        mem_30384 = opencl_alloc(self, bytes_30319, "mem_30384")
        if ((1 * (np.long(num_groups_top_29171) * np.long(group_sizze_29168))) != 0):
          self.mainzisegmap_intragroup_29172_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long(bytes_30327)),
                                                          cl.LocalMemory(np.long(bytes_30327)),
                                                          cl.LocalMemory(np.long(bytes_30327)),
                                                          cl.LocalMemory(np.long(bytes_30327)),
                                                          np.int64(N_20967),
                                                          np.int64(m_20968),
                                                          np.int64(res_20987),
                                                          np.int64(num_groups_y_29170),
                                                          np.int64(num_whole_tiles_29188),
                                                          np.int64(residual_input_29332),
                                                          np.byte(cond_29333),
                                                          res_mem_30300,
                                                          mem_30324, mem_30384)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_29172_var,
                                     ((np.long(num_groups_top_29171) * np.long(group_sizze_29168)),),
                                     (np.long(group_sizze_29168),))
          if synchronous:
            sync(self)
        mem_30324 = None
        res_mem_30389 = mem_30384
      else:
        mem_30388 = opencl_alloc(self, bytes_30319, "mem_30388")
        if slt64((res_20987 * np.int64(2)), segred_group_sizze_27261):
          segment_sizze_nonzzero_31139 = smax64(np.int64(1), res_20987)
          num_threads_31140 = (num_groups_27262 * segred_group_sizze_27261)
          if ((1 * (np.long(num_groups_27262) * np.long(segred_group_sizze_27261))) != 0):
            self.mainzisegred_small_27215_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27261))),
                                                       np.int64(N_20967),
                                                       np.int64(m_20968),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27262),
                                                       mem_29989, res_mem_30300,
                                                       mem_30388,
                                                       np.int64(segment_sizze_nonzzero_31139))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_27215_var,
                                       ((np.long(num_groups_27262) * np.long(segred_group_sizze_27261)),),
                                       (np.long(segred_group_sizze_27261),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31160 = sdiv_up64(num_groups_27262,
                                               smax64(np.int64(1),
                                                      (m_20968 * N_20967)))
          elements_per_thread_31161 = sdiv_up64(res_20987,
                                                (segred_group_sizze_27261 * groups_per_segment_31160))
          virt_num_groups_31162 = (groups_per_segment_31160 * (m_20968 * N_20967))
          num_threads_31163 = (num_groups_27262 * segred_group_sizze_27261)
          threads_per_segment_31164 = (groups_per_segment_31160 * segred_group_sizze_27261)
          group_res_arr_mem_31165 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27261 * virt_num_groups_31162)),
                                                 "group_res_arr_mem_31165")
          mainzicounter_mem_31167 = self.mainzicounter_mem_31167
          if ((1 * (np.long(num_groups_27262) * np.long(segred_group_sizze_27261))) != 0):
            self.mainzisegred_large_27215_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27261))),
                                                       np.int64(N_20967),
                                                       np.int64(res_20987),
                                                       np.int64(num_groups_27262),
                                                       mem_29989, res_mem_30300,
                                                       mem_30388,
                                                       np.int64(groups_per_segment_31160),
                                                       np.int64(elements_per_thread_31161),
                                                       np.int64(virt_num_groups_31162),
                                                       np.int64(threads_per_segment_31164),
                                                       group_res_arr_mem_31165,
                                                       mainzicounter_mem_31167)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_27215_var,
                                       ((np.long(num_groups_27262) * np.long(segred_group_sizze_27261)),),
                                       (np.long(segred_group_sizze_27261),))
            if synchronous:
              sync(self)
        res_mem_30389 = mem_30388
      res_mem_30394 = res_mem_30389
    mem_29989 = None
    res_mem_30300 = None
    i_21234 = (N_20967 - np.int64(1))
    x_21235 = sle64(np.int64(0), i_21234)
    y_21236 = slt64(i_21234, N_20967)
    bounds_check_21237 = (x_21235 and y_21236)
    index_certs_21238 = True
    assert bounds_check_21237, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:78:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:74:5-81:25\n   #6  bfastfinal.fut:162:5-58\n   #7  bfastfinal.fut:157:1-163:20\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_21234,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_20967,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_27391 = sle64(N_20967, max_group_sizze_26128)
    suff_intra_par_27389 = (self.sizes["main.suff_intra_par_25"] <= N_20967)
    intra_suff_and_fits_27392 = (suff_intra_par_27389 and fits_27391)
    segscan_group_sizze_27541 = self.sizes["main.segscan_group_size_27518"]
    max_num_groups_31201 = self.sizes["main.segscan_num_groups_27520"]
    num_groups_27542 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_27245,
                                                            segscan_group_sizze_27541),
                                                  sext_i32_i64(max_num_groups_31201))))
    segmap_group_sizze_27561 = self.sizes["main.segmap_group_size_27509"]
    mem_30397 = opencl_alloc(self, bytes_30319, "mem_30397")
    self.futhark_builtinzhreplicate_f32(mem_30397, (m_20968 * N_20967), np.nan)
    mem_30400 = opencl_alloc(self, bytes_30319, "mem_30400")
    self.futhark_builtinzhreplicate_i32(mem_30400, (m_20968 * N_20967),
                                        np.int32(0))
    segmap_group_sizze_27597 = self.sizes["main.segmap_group_size_27434"]
    bytes_30412 = (np.int64(4) * m_20968)
    bytes_30403 = (np.int64(8) * N_20967)
    bytes_30421 = (np.int64(8) * comparatee_27245)
    local_memory_capacity_31303 = self.max_local_memory
    if (sle64((((bytes_30403 + bytes_30305) + bytes_30305) + bytes_30305),
              sext_i32_i64(local_memory_capacity_31303)) and intra_suff_and_fits_27392):
      mem_30413 = opencl_alloc(self, bytes_30412, "mem_30413")
      mem_30416 = opencl_alloc(self, bytes_30319, "mem_30416")
      mem_30419 = opencl_alloc(self, bytes_30319, "mem_30419")
      if ((1 * (np.long(m_20968) * np.long(N_20967))) != 0):
        self.mainzisegmap_intragroup_27314_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_30305)),
                                                        cl.LocalMemory(np.long(bytes_30305)),
                                                        cl.LocalMemory(np.long(bytes_30305)),
                                                        cl.LocalMemory(np.long(bytes_30403)),
                                                        np.int64(N_20967),
                                                        np.int64(N_20969),
                                                        np.int64(i_21234),
                                                        images_mem_29973,
                                                        res_mem_30394,
                                                        mem_30413, mem_30416,
                                                        mem_30419)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_27314_var,
                                   ((np.long(m_20968) * np.long(N_20967)),),
                                   (np.long(N_20967),))
        if synchronous:
          sync(self)
      res_mem_30431 = mem_30413
      res_mem_30432 = mem_30416
      res_mem_30433 = mem_30419
    else:
      mem_30423 = opencl_alloc(self, bytes_30421, "mem_30423")
      mem_30426 = opencl_alloc(self, bytes_30319, "mem_30426")
      if slt64(np.int64(0), (m_20968 * N_20967)):
        stage1_max_num_groups_31237 = self.max_group_size
        stage1_num_groups_31238 = smin64(stage1_max_num_groups_31237,
                                         num_groups_27542)
        num_threads_31239 = sext_i64_i32((stage1_num_groups_31238 * segscan_group_sizze_27541))
        if ((1 * (np.long(stage1_num_groups_31238) * np.long(segscan_group_sizze_27541))) != 0):
          self.mainziscan_stage1_27524_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * segscan_group_sizze_27541)))),
                                                    np.int64(N_20967),
                                                    np.int64(m_20968),
                                                    np.int64(N_20969),
                                                    images_mem_29973,
                                                    res_mem_30394, mem_30423,
                                                    mem_30426,
                                                    np.int32(num_threads_31239))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_27524_var,
                                     ((np.long(stage1_num_groups_31238) * np.long(segscan_group_sizze_27541)),),
                                     (np.long(segscan_group_sizze_27541),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_31238))) != 0):
          self.mainziscan_stage2_27524_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(8) * stage1_num_groups_31238)))),
                                                    np.int64(N_20967),
                                                    np.int64(m_20968),
                                                    mem_30423,
                                                    np.int64(stage1_num_groups_31238),
                                                    np.int32(num_threads_31239))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_27524_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_31238)),),
                                     (np.long(stage1_num_groups_31238),))
          if synchronous:
            sync(self)
        required_groups_31281 = sext_i64_i32(sdiv_up64((m_20968 * N_20967),
                                                       segscan_group_sizze_27541))
        if ((1 * (np.long(num_groups_27542) * np.long(segscan_group_sizze_27541))) != 0):
          self.mainziscan_stage3_27524_var.set_args(self.global_failure,
                                                    np.int64(N_20967),
                                                    np.int64(m_20968),
                                                    np.int64(num_groups_27542),
                                                    mem_30423,
                                                    np.int32(num_threads_31239),
                                                    np.int32(required_groups_31281))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_27524_var,
                                     ((np.long(num_groups_27542) * np.long(segscan_group_sizze_27541)),),
                                     (np.long(segscan_group_sizze_27541),))
          if synchronous:
            sync(self)
      segmap_usable_groups_27562 = sdiv_up64(m_20968, segmap_group_sizze_27561)
      mem_30429 = opencl_alloc(self, bytes_30412, "mem_30429")
      if ((1 * (np.long(segmap_usable_groups_27562) * np.long(segmap_group_sizze_27561))) != 0):
        self.mainzisegmap_27507_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968),
                                             np.int64(i_21234), mem_30423,
                                             mem_30429)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27507_var,
                                   ((np.long(segmap_usable_groups_27562) * np.long(segmap_group_sizze_27561)),),
                                   (np.long(segmap_group_sizze_27561),))
        if synchronous:
          sync(self)
      segmap_usable_groups_27598 = sdiv_up64(comparatee_27245,
                                             segmap_group_sizze_27597)
      if ((1 * (np.long(segmap_usable_groups_27598) * np.long(segmap_group_sizze_27597))) != 0):
        self.mainzisegmap_27431_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968), mem_30397,
                                             mem_30400, mem_30423, mem_30426)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27431_var,
                                   ((np.long(segmap_usable_groups_27598) * np.long(segmap_group_sizze_27597)),),
                                   (np.long(segmap_group_sizze_27597),))
        if synchronous:
          sync(self)
      mem_30423 = None
      mem_30426 = None
      res_mem_30431 = mem_30429
      res_mem_30432 = mem_30397
      res_mem_30433 = mem_30400
    res_mem_30394 = None
    mem_30397 = None
    mem_30400 = None
    suff_outer_par_27646 = (self.sizes["main.suff_outer_par_29"] <= m_20968)
    fits_27724 = sle64(res_20981, max_group_sizze_26128)
    suff_intra_par_27722 = (self.sizes["main.suff_intra_par_30"] <= res_20981)
    intra_suff_and_fits_27725 = (suff_intra_par_27722 and fits_27724)
    segmap_group_sizze_27689 = self.sizes["main.segmap_group_size_27658"]
    nest_sizze_27812 = (m_20968 * res_20981)
    segred_group_sizze_27813 = self.sizes["main.segred_group_size_27796"]
    max_num_groups_31304 = self.sizes["main.segred_num_groups_27798"]
    num_groups_27814 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27812,
                                                            segred_group_sizze_27813),
                                                  sext_i32_i64(max_num_groups_31304))))
    segred_group_sizze_27827 = self.sizes["main.segred_group_size_27775"]
    max_num_groups_31305 = self.sizes["main.segred_num_groups_27777"]
    num_groups_27828 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27812,
                                                            segred_group_sizze_27827),
                                                  sext_i32_i64(max_num_groups_31305))))
    segmap_group_sizze_27843 = self.sizes["main.segmap_group_size_27760"]
    bytes_30442 = (np.int64(4) * segmap_group_sizze_27689)
    local_memory_capacity_31459 = self.max_local_memory
    if (sle64((bytes_30442 + bytes_30442),
              sext_i32_i64(local_memory_capacity_31459)) and suff_outer_par_27646):
      segmap_usable_groups_27690 = sdiv_up64(m_20968, segmap_group_sizze_27689)
      mem_30436 = opencl_alloc(self, bytes_29990, "mem_30436")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30436, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20969, m_20968)
      mem_30439 = opencl_alloc(self, bytes_30319, "mem_30439")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30439, np.int64(0),
                                                  res_mem_30432, np.int64(0),
                                                  np.int64(1), N_20967, m_20968)
      num_whole_tiles_29485 = squot64(res_20981, segmap_group_sizze_27689)
      residual_input_29606 = srem64(res_20981, segmap_group_sizze_27689)
      cond_29607 = (residual_input_29606 == np.int64(0))
      mem_30483 = opencl_alloc(self, bytes_30412, "mem_30483")
      mem_30485 = opencl_alloc(self, bytes_30412, "mem_30485")
      mem_30487 = opencl_alloc(self, bytes_30412, "mem_30487")
      if ((1 * (np.long(segmap_usable_groups_27690) * np.long(segmap_group_sizze_27689))) != 0):
        self.mainzisegmap_intragroup_29477_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_30442)),
                                                        cl.LocalMemory(np.long(bytes_30442)),
                                                        np.int64(m_20968),
                                                        np.int32(n_20972),
                                                        np.float32(hfrac_20974),
                                                        np.int64(res_20981),
                                                        np.int32(k2p2_20983),
                                                        np.int64(num_whole_tiles_29485),
                                                        np.int64(residual_input_29606),
                                                        np.byte(cond_29607),
                                                        mem_30436, mem_30439,
                                                        mem_30483, mem_30485,
                                                        mem_30487)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_29477_var,
                                   ((np.long(segmap_usable_groups_27690) * np.long(segmap_group_sizze_27689)),),
                                   (np.long(segmap_group_sizze_27689),))
        if synchronous:
          sync(self)
      mem_30436 = None
      mem_30439 = None
      res_mem_30511 = mem_30483
      res_mem_30512 = mem_30485
      res_mem_30513 = mem_30487
    else:
      local_memory_capacity_31458 = self.max_local_memory
      if (sle64(((np.int32(4) * res_20981) + (np.int32(4) * res_20981)),
                sext_i32_i64(local_memory_capacity_31458)) and intra_suff_and_fits_27725):
        mem_30492 = opencl_alloc(self, bytes_30412, "mem_30492")
        mem_30494 = opencl_alloc(self, bytes_30412, "mem_30494")
        mem_30496 = opencl_alloc(self, bytes_30412, "mem_30496")
        if ((1 * (np.long(m_20968) * np.long(res_20981))) != 0):
          self.mainzisegmap_intragroup_27654_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * res_20981))),
                                                          cl.LocalMemory(np.long((np.int32(4) * res_20981))),
                                                          np.int64(N_20967),
                                                          np.int64(N_20969),
                                                          np.float32(hfrac_20974),
                                                          np.int64(res_20981),
                                                          np.int32(k2p2_20983),
                                                          images_mem_29973,
                                                          res_mem_30432,
                                                          mem_30492, mem_30494,
                                                          mem_30496)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegmap_intragroup_27654_var,
                                     ((np.long(m_20968) * np.long(res_20981)),),
                                     (np.long(res_20981),))
          if synchronous:
            sync(self)
        res_mem_30508 = mem_30492
        res_mem_30509 = mem_30494
        res_mem_30510 = mem_30496
      else:
        mem_30499 = opencl_alloc(self, bytes_30412, "mem_30499")
        if slt64((res_20981 * np.int64(2)), segred_group_sizze_27813):
          segment_sizze_nonzzero_31333 = smax64(np.int64(1), res_20981)
          num_threads_31334 = (num_groups_27814 * segred_group_sizze_27813)
          if ((1 * (np.long(num_groups_27814) * np.long(segred_group_sizze_27813))) != 0):
            self.mainzisegred_small_27802_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27813))),
                                                       np.int64(m_20968),
                                                       np.int64(N_20969),
                                                       np.int64(res_20981),
                                                       np.int64(num_groups_27814),
                                                       images_mem_29973,
                                                       mem_30499,
                                                       np.int64(segment_sizze_nonzzero_31333))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_27802_var,
                                       ((np.long(num_groups_27814) * np.long(segred_group_sizze_27813)),),
                                       (np.long(segred_group_sizze_27813),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31354 = sdiv_up64(num_groups_27814,
                                               smax64(np.int64(1), m_20968))
          elements_per_thread_31355 = sdiv_up64(res_20981,
                                                (segred_group_sizze_27813 * groups_per_segment_31354))
          virt_num_groups_31356 = (groups_per_segment_31354 * m_20968)
          num_threads_31357 = (num_groups_27814 * segred_group_sizze_27813)
          threads_per_segment_31358 = (groups_per_segment_31354 * segred_group_sizze_27813)
          group_res_arr_mem_31359 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27813 * virt_num_groups_31356)),
                                                 "group_res_arr_mem_31359")
          mainzicounter_mem_31361 = self.mainzicounter_mem_31361
          if ((1 * (np.long(num_groups_27814) * np.long(segred_group_sizze_27813))) != 0):
            self.mainzisegred_large_27802_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27813))),
                                                       np.int64(N_20969),
                                                       np.int64(res_20981),
                                                       np.int64(num_groups_27814),
                                                       images_mem_29973,
                                                       mem_30499,
                                                       np.int64(groups_per_segment_31354),
                                                       np.int64(elements_per_thread_31355),
                                                       np.int64(virt_num_groups_31356),
                                                       np.int64(threads_per_segment_31358),
                                                       group_res_arr_mem_31359,
                                                       mainzicounter_mem_31361)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_27802_var,
                                       ((np.long(num_groups_27814) * np.long(segred_group_sizze_27813)),),
                                       (np.long(segred_group_sizze_27813),))
            if synchronous:
              sync(self)
        mem_30502 = opencl_alloc(self, bytes_30412, "mem_30502")
        if slt64((res_20981 * np.int64(2)), segred_group_sizze_27827):
          segment_sizze_nonzzero_31393 = smax64(np.int64(1), res_20981)
          num_threads_31394 = (num_groups_27828 * segred_group_sizze_27827)
          if ((1 * (np.long(num_groups_27828) * np.long(segred_group_sizze_27827))) != 0):
            self.mainzisegred_small_27781_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27827))),
                                                       np.int64(N_20967),
                                                       np.int64(m_20968),
                                                       np.int64(res_20981),
                                                       np.int64(num_groups_27828),
                                                       res_mem_30432, mem_30499,
                                                       mem_30502,
                                                       np.int64(segment_sizze_nonzzero_31393))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_small_27781_var,
                                       ((np.long(num_groups_27828) * np.long(segred_group_sizze_27827)),),
                                       (np.long(segred_group_sizze_27827),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31414 = sdiv_up64(num_groups_27828,
                                               smax64(np.int64(1), m_20968))
          elements_per_thread_31415 = sdiv_up64(res_20981,
                                                (segred_group_sizze_27827 * groups_per_segment_31414))
          virt_num_groups_31416 = (groups_per_segment_31414 * m_20968)
          num_threads_31417 = (num_groups_27828 * segred_group_sizze_27827)
          threads_per_segment_31418 = (groups_per_segment_31414 * segred_group_sizze_27827)
          group_res_arr_mem_31419 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_27827 * virt_num_groups_31416)),
                                                 "group_res_arr_mem_31419")
          mainzicounter_mem_31421 = self.mainzicounter_mem_31421
          if ((1 * (np.long(num_groups_27828) * np.long(segred_group_sizze_27827))) != 0):
            self.mainzisegred_large_27781_var.set_args(self.global_failure,
                                                       cl.LocalMemory(np.long(np.int32(1))),
                                                       cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27827))),
                                                       np.int64(N_20967),
                                                       np.int64(res_20981),
                                                       np.int64(num_groups_27828),
                                                       res_mem_30432, mem_30499,
                                                       mem_30502,
                                                       np.int64(groups_per_segment_31414),
                                                       np.int64(elements_per_thread_31415),
                                                       np.int64(virt_num_groups_31416),
                                                       np.int64(threads_per_segment_31418),
                                                       group_res_arr_mem_31419,
                                                       mainzicounter_mem_31421)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainzisegred_large_27781_var,
                                       ((np.long(num_groups_27828) * np.long(segred_group_sizze_27827)),),
                                       (np.long(segred_group_sizze_27827),))
            if synchronous:
              sync(self)
        segmap_usable_groups_27844 = sdiv_up64(m_20968,
                                               segmap_group_sizze_27843)
        mem_30505 = opencl_alloc(self, bytes_30412, "mem_30505")
        mem_30507 = opencl_alloc(self, bytes_30412, "mem_30507")
        if ((1 * (np.long(segmap_usable_groups_27844) * np.long(segmap_group_sizze_27843))) != 0):
          self.mainzisegmap_27758_var.set_args(self.global_failure,
                                               np.int64(m_20968),
                                               np.float32(hfrac_20974),
                                               np.int32(k2p2_20983), mem_30499,
                                               mem_30502, mem_30505, mem_30507)
          cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_27758_var,
                                     ((np.long(segmap_usable_groups_27844) * np.long(segmap_group_sizze_27843)),),
                                     (np.long(segmap_group_sizze_27843),))
          if synchronous:
            sync(self)
        mem_30502 = None
        res_mem_30508 = mem_30505
        res_mem_30509 = mem_30499
        res_mem_30510 = mem_30507
      res_mem_30511 = res_mem_30508
      res_mem_30512 = res_mem_30509
      res_mem_30513 = res_mem_30510
    segred_group_sizze_27864 = self.sizes["main.segred_group_size_27863"]
    max_num_groups_31460 = self.sizes["main.segred_num_groups_27865"]
    num_groups_27866 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segred_group_sizze_27864),
                                                  sext_i32_i64(max_num_groups_31460))))
    mem_30516 = opencl_alloc(self, np.int64(4), "mem_30516")
    mainzicounter_mem_31461 = self.mainzicounter_mem_31461
    group_res_arr_mem_31463 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_27864 * num_groups_27866)),
                                           "group_res_arr_mem_31463")
    num_threads_31465 = (num_groups_27866 * segred_group_sizze_27864)
    if ((1 * (np.long(num_groups_27866) * np.long(segred_group_sizze_27864))) != 0):
      self.mainzisegred_nonseg_27871_var.set_args(self.global_failure,
                                                  cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27864))),
                                                  cl.LocalMemory(np.long(np.int32(1))),
                                                  np.int64(m_20968),
                                                  np.int64(num_groups_27866),
                                                  res_mem_30511, mem_30516,
                                                  mainzicounter_mem_31461,
                                                  group_res_arr_mem_31463,
                                                  np.int64(num_threads_31465))
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegred_nonseg_27871_var,
                                 ((np.long(num_groups_27866) * np.long(segred_group_sizze_27864)),),
                                 (np.long(segred_group_sizze_27864),))
      if synchronous:
        sync(self)
    read_res_31805 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_31805, mem_30516,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_21324 = read_res_31805[0]
    mem_30516 = None
    res_21329 = sext_i32_i64(res_21324)
    suff_outer_par_27903 = (self.sizes["main.suff_outer_par_32"] <= m_20968)
    segmap_group_sizze_27926 = self.sizes["main.segmap_group_size_27907"]
    nest_sizze_27969 = (m_20968 * res_21329)
    segred_group_sizze_27970 = self.sizes["main.segred_group_size_27947"]
    max_num_groups_31491 = self.sizes["main.segred_num_groups_27949"]
    num_groups_27971 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_27969,
                                                            segred_group_sizze_27970),
                                                  sext_i32_i64(max_num_groups_31491))))
    bytes_30519 = (np.int64(4) * segmap_group_sizze_27926)
    local_memory_capacity_31562 = self.max_local_memory
    if (sle64((bytes_30519 + bytes_30519),
              sext_i32_i64(local_memory_capacity_31562)) and suff_outer_par_27903):
      segmap_usable_groups_27927 = sdiv_up64(m_20968, segmap_group_sizze_27926)
      num_whole_tiles_29729 = squot64(res_21329, segmap_group_sizze_27926)
      residual_input_29828 = srem64(res_21329, segmap_group_sizze_27926)
      cond_29829 = (residual_input_29828 == np.int64(0))
      mem_30558 = opencl_alloc(self, bytes_30412, "mem_30558")
      if ((1 * (np.long(segmap_usable_groups_27927) * np.long(segmap_group_sizze_27926))) != 0):
        self.mainzisegmap_intragroup_29709_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long(bytes_30519)),
                                                        cl.LocalMemory(np.long(bytes_30519)),
                                                        np.int64(N_20967),
                                                        np.int64(m_20968),
                                                        np.int64(res_21329),
                                                        np.int64(num_whole_tiles_29729),
                                                        np.int64(residual_input_29828),
                                                        np.byte(cond_29829),
                                                        res_mem_30432,
                                                        res_mem_30511,
                                                        res_mem_30512,
                                                        mem_30558)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_29709_var,
                                   ((np.long(segmap_usable_groups_27927) * np.long(segmap_group_sizze_27926)),),
                                   (np.long(segmap_group_sizze_27926),))
        if synchronous:
          sync(self)
      res_mem_30562 = mem_30558
    else:
      mem_30561 = opencl_alloc(self, bytes_30412, "mem_30561")
      if slt64((res_21329 * np.int64(2)), segred_group_sizze_27970):
        segment_sizze_nonzzero_31502 = smax64(np.int64(1), res_21329)
        num_threads_31503 = (num_groups_27971 * segred_group_sizze_27970)
        if ((1 * (np.long(num_groups_27971) * np.long(segred_group_sizze_27970))) != 0):
          self.mainzisegred_small_27953_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27970))),
                                                     np.int64(N_20967),
                                                     np.int64(m_20968),
                                                     np.int64(res_21329),
                                                     np.int64(num_groups_27971),
                                                     res_mem_30432,
                                                     res_mem_30511,
                                                     res_mem_30512, mem_30561,
                                                     np.int64(segment_sizze_nonzzero_31502))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_27953_var,
                                     ((np.long(num_groups_27971) * np.long(segred_group_sizze_27970)),),
                                     (np.long(segred_group_sizze_27970),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_31523 = sdiv_up64(num_groups_27971,
                                             smax64(np.int64(1), m_20968))
        elements_per_thread_31524 = sdiv_up64(res_21329,
                                              (segred_group_sizze_27970 * groups_per_segment_31523))
        virt_num_groups_31525 = (groups_per_segment_31523 * m_20968)
        num_threads_31526 = (num_groups_27971 * segred_group_sizze_27970)
        threads_per_segment_31527 = (groups_per_segment_31523 * segred_group_sizze_27970)
        group_res_arr_mem_31528 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_27970 * virt_num_groups_31525)),
                                               "group_res_arr_mem_31528")
        mainzicounter_mem_31530 = self.mainzicounter_mem_31530
        if ((1 * (np.long(num_groups_27971) * np.long(segred_group_sizze_27970))) != 0):
          self.mainzisegred_large_27953_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long(np.int32(1))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_27970))),
                                                     np.int64(N_20967),
                                                     np.int64(res_21329),
                                                     np.int64(num_groups_27971),
                                                     res_mem_30432,
                                                     res_mem_30511,
                                                     res_mem_30512, mem_30561,
                                                     np.int64(groups_per_segment_31523),
                                                     np.int64(elements_per_thread_31524),
                                                     np.int64(virt_num_groups_31525),
                                                     np.int64(threads_per_segment_31527),
                                                     group_res_arr_mem_31528,
                                                     mainzicounter_mem_31530)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_27953_var,
                                     ((np.long(num_groups_27971) * np.long(segred_group_sizze_27970)),),
                                     (np.long(segred_group_sizze_27970),))
          if synchronous:
            sync(self)
      res_mem_30562 = mem_30561
    iota32_arg_21351 = (N_20967 - res_20981)
    bounds_invalid_upwards_21352 = slt64(iota32_arg_21351, np.int64(0))
    valid_21353 = not(bounds_invalid_upwards_21352)
    range_valid_c_21354 = True
    assert valid_21353, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:111:22-35\n   #3  bfastfinal.fut:162:5-58\n   #4  bfastfinal.fut:157:1-163:20\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_21351,
                                                                                                                                                                                                                                      " is invalid."))
    x_21356 = (np.int32(1) + n_20972)
    index_certs_21357 = True
    assert bounds_check_21237, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:109:63-81\n   #1  bfastfinal.fut:107:15-111:36\n   #2  bfastfinal.fut:162:5-58\n   #3  bfastfinal.fut:157:1-163:20\n" % ("Index [",
                                                                                                                                                                                                                 i_21234,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_20967,
                                                                                                                                                                                                                 "]."))
    read_res_31807 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_31807, mappingindices_mem_29972,
                    device_offset=(np.long(i_21234) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_21358 = read_res_31807[0]
    res_21359 = sitofp_i32_f32(r32_arg_21358)
    range_valid_c_21360 = True
    assert valid_21353, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:122:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:116:38-145:9\n   #5  bfastfinal.fut:162:5-58\n   #6  bfastfinal.fut:157:1-163:20\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_21351,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_28048 = self.sizes["main.segmap_group_size_28031"]
    segmap_usable_groups_28049 = sdiv_up64(iota32_arg_21351,
                                           segmap_group_sizze_28048)
    bytes_30564 = (np.int64(4) * iota32_arg_21351)
    mem_30565 = opencl_alloc(self, bytes_30564, "mem_30565")
    mem_30567 = opencl_alloc(self, bytes_30564, "mem_30567")
    if ((1 * (np.long(segmap_usable_groups_28049) * np.long(segmap_group_sizze_28048))) != 0):
      self.mainzisegmap_28029_var.set_args(self.global_failure,
                                           np.float32(lam_20975),
                                           np.int64(iota32_arg_21351),
                                           np.int32(x_21356),
                                           np.float32(res_21359),
                                           mappingindices_mem_29972, mem_30565,
                                           mem_30567)
      cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_28029_var,
                                 ((np.long(segmap_usable_groups_28049) * np.long(segmap_group_sizze_28048)),),
                                 (np.long(segmap_group_sizze_28048),))
      if synchronous:
        sync(self)
    mem_30565 = None
    fits_28283 = sle64(iota32_arg_21351, max_group_sizze_26128)
    suff_intra_par_28281 = (self.sizes["main.suff_intra_par_35"] <= iota32_arg_21351)
    intra_suff_and_fits_28284 = (suff_intra_par_28281 and fits_28283)
    segmap_group_sizze_28551 = self.sizes["main.segmap_group_size_28531"]
    max_num_groups_31568 = self.sizes["main.segmap_num_groups_28533"]
    num_groups_28552 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20968,
                                                            segmap_group_sizze_28551),
                                                  sext_i32_i64(max_num_groups_31568))))
    nest_sizze_28573 = (m_20968 * iota32_arg_21351)
    segscan_group_sizze_28574 = self.sizes["main.segscan_group_size_28489"]
    max_num_groups_31569 = self.sizes["main.segscan_num_groups_28491"]
    num_groups_28575 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28573,
                                                            segscan_group_sizze_28574),
                                                  sext_i32_i64(max_num_groups_31569))))
    segred_group_sizze_28613 = self.sizes["main.segred_group_size_28435"]
    max_num_groups_31570 = self.sizes["main.segred_num_groups_28437"]
    num_groups_28614 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_28573,
                                                            segred_group_sizze_28613),
                                                  sext_i32_i64(max_num_groups_31570))))
    segmap_group_sizze_28652 = self.sizes["main.segmap_group_size_28392"]
    bytes_30583 = (np.int64(4) * nest_sizze_28573)
    local_memory_capacity_31763 = self.max_local_memory
    if (sle64((((bytes_30564 + (np.int32(1) * iota32_arg_21351)) + (np.int32(4) * iota32_arg_21351)) + (np.int32(4) * iota32_arg_21351)),
              sext_i32_i64(local_memory_capacity_31763)) and intra_suff_and_fits_28284):
      mem_30574 = opencl_alloc(self, bytes_30412, "mem_30574")
      mem_30576 = opencl_alloc(self, bytes_30412, "mem_30576")
      if ((1 * (np.long(m_20968) * np.long(iota32_arg_21351))) != 0):
        self.mainzisegmap_intragroup_28074_var.set_args(self.global_failure,
                                                        cl.LocalMemory(np.long((np.int32(4) * iota32_arg_21351))),
                                                        cl.LocalMemory(np.long((np.int32(4) * iota32_arg_21351))),
                                                        cl.LocalMemory(np.long((np.int32(1) * iota32_arg_21351))),
                                                        cl.LocalMemory(np.long(bytes_30564)),
                                                        np.int64(N_20967),
                                                        np.int32(n_20972),
                                                        np.int64(iota32_arg_21351),
                                                        res_mem_30431,
                                                        res_mem_30432,
                                                        res_mem_30433,
                                                        res_mem_30511,
                                                        res_mem_30512,
                                                        res_mem_30513,
                                                        res_mem_30562,
                                                        mem_30567, mem_30574,
                                                        mem_30576)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainzisegmap_intragroup_28074_var,
                                   ((np.long(m_20968) * np.long(iota32_arg_21351)),),
                                   (np.long(iota32_arg_21351),))
        if synchronous:
          sync(self)
      res_mem_30598 = mem_30574
      res_mem_30599 = mem_30576
    else:
      mem_30579 = opencl_alloc(self, bytes_30412, "mem_30579")
      mem_30581 = opencl_alloc(self, bytes_30412, "mem_30581")
      if ((1 * (np.long(num_groups_28552) * np.long(segmap_group_sizze_28551))) != 0):
        self.mainzisegmap_28529_var.set_args(self.global_failure,
                                             np.int64(m_20968),
                                             np.int64(num_groups_28552),
                                             res_mem_30431, res_mem_30512,
                                             res_mem_30513, mem_30579,
                                             mem_30581)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_28529_var,
                                   ((np.long(num_groups_28552) * np.long(segmap_group_sizze_28551)),),
                                   (np.long(segmap_group_sizze_28551),))
        if synchronous:
          sync(self)
      mem_30585 = opencl_alloc(self, bytes_30583, "mem_30585")
      if slt64(np.int64(0), (m_20968 * iota32_arg_21351)):
        stage1_max_num_groups_31604 = self.max_group_size
        stage1_num_groups_31605 = smin64(stage1_max_num_groups_31604,
                                         num_groups_28575)
        num_threads_31606 = sext_i64_i32((stage1_num_groups_31605 * segscan_group_sizze_28574))
        if ((1 * (np.long(stage1_num_groups_31605) * np.long(segscan_group_sizze_28574))) != 0):
          self.mainziscan_stage1_28495_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(4) * segscan_group_sizze_28574)))),
                                                    np.int64(N_20967),
                                                    np.int64(m_20968),
                                                    np.int64(iota32_arg_21351),
                                                    res_mem_30432,
                                                    res_mem_30511,
                                                    res_mem_30512,
                                                    res_mem_30562, mem_30581,
                                                    mem_30585,
                                                    np.int32(num_threads_31606))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage1_28495_var,
                                     ((np.long(stage1_num_groups_31605) * np.long(segscan_group_sizze_28574)),),
                                     (np.long(segscan_group_sizze_28574),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_31605))) != 0):
          self.mainziscan_stage2_28495_var.set_args(self.global_failure,
                                                    cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                  (np.int32(4) * stage1_num_groups_31605)))),
                                                    np.int64(m_20968),
                                                    np.int64(iota32_arg_21351),
                                                    mem_30585,
                                                    np.int64(stage1_num_groups_31605),
                                                    np.int32(num_threads_31606))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage2_28495_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_31605)),),
                                     (np.long(stage1_num_groups_31605),))
          if synchronous:
            sync(self)
        required_groups_31648 = sext_i64_i32(sdiv_up64((m_20968 * iota32_arg_21351),
                                                       segscan_group_sizze_28574))
        if ((1 * (np.long(num_groups_28575) * np.long(segscan_group_sizze_28574))) != 0):
          self.mainziscan_stage3_28495_var.set_args(self.global_failure,
                                                    np.int64(m_20968),
                                                    np.int64(iota32_arg_21351),
                                                    np.int64(num_groups_28575),
                                                    mem_30585,
                                                    np.int32(num_threads_31606),
                                                    np.int32(required_groups_31648))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainziscan_stage3_28495_var,
                                     ((np.long(num_groups_28575) * np.long(segscan_group_sizze_28574)),),
                                     (np.long(segscan_group_sizze_28574),))
          if synchronous:
            sync(self)
      mem_30588 = opencl_alloc(self, m_20968, "mem_30588")
      mem_30590 = opencl_alloc(self, bytes_30412, "mem_30590")
      mem_30592 = opencl_alloc(self, bytes_30412, "mem_30592")
      if slt64((iota32_arg_21351 * np.int64(2)), segred_group_sizze_28613):
        segment_sizze_nonzzero_31660 = smax64(np.int64(1), iota32_arg_21351)
        num_threads_31661 = (num_groups_28614 * segred_group_sizze_28613)
        if ((1 * (np.long(num_groups_28614) * np.long(segred_group_sizze_28613))) != 0):
          self.mainzisegred_small_28441_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28613))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28613))),
                                                     cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_28613))),
                                                     np.int64(m_20968),
                                                     np.int64(iota32_arg_21351),
                                                     np.int64(num_groups_28614),
                                                     mem_30567, mem_30579,
                                                     mem_30581, mem_30585,
                                                     mem_30588, mem_30590,
                                                     mem_30592,
                                                     np.int64(segment_sizze_nonzzero_31660))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_small_28441_var,
                                     ((np.long(num_groups_28614) * np.long(segred_group_sizze_28613)),),
                                     (np.long(segred_group_sizze_28613),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_31696 = sdiv_up64(num_groups_28614,
                                             smax64(np.int64(1), m_20968))
        elements_per_thread_31697 = sdiv_up64(iota32_arg_21351,
                                              (segred_group_sizze_28613 * groups_per_segment_31696))
        virt_num_groups_31698 = (groups_per_segment_31696 * m_20968)
        num_threads_31699 = (num_groups_28614 * segred_group_sizze_28613)
        threads_per_segment_31700 = (groups_per_segment_31696 * segred_group_sizze_28613)
        group_res_arr_mem_31701 = opencl_alloc(self,
                                               (np.int32(1) * (segred_group_sizze_28613 * virt_num_groups_31698)),
                                               "group_res_arr_mem_31701")
        group_res_arr_mem_31703 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_28613 * virt_num_groups_31698)),
                                               "group_res_arr_mem_31703")
        group_res_arr_mem_31705 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_28613 * virt_num_groups_31698)),
                                               "group_res_arr_mem_31705")
        mainzicounter_mem_31707 = self.mainzicounter_mem_31707
        if ((1 * (np.long(num_groups_28614) * np.long(segred_group_sizze_28613))) != 0):
          self.mainzisegred_large_28441_var.set_args(self.global_failure,
                                                     cl.LocalMemory(np.long(np.int32(1))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28613))),
                                                     cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_28613))),
                                                     cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_28613))),
                                                     np.int64(iota32_arg_21351),
                                                     np.int64(num_groups_28614),
                                                     mem_30567, mem_30579,
                                                     mem_30581, mem_30585,
                                                     mem_30588, mem_30590,
                                                     mem_30592,
                                                     np.int64(groups_per_segment_31696),
                                                     np.int64(elements_per_thread_31697),
                                                     np.int64(virt_num_groups_31698),
                                                     group_res_arr_mem_31701,
                                                     group_res_arr_mem_31703,
                                                     group_res_arr_mem_31705,
                                                     mainzicounter_mem_31707)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainzisegred_large_28441_var,
                                     ((np.long(num_groups_28614) * np.long(segred_group_sizze_28613)),),
                                     (np.long(segred_group_sizze_28613),))
          if synchronous:
            sync(self)
      mem_30579 = None
      mem_30585 = None
      segmap_usable_groups_28653 = sdiv_up64(m_20968, segmap_group_sizze_28652)
      mem_30594 = opencl_alloc(self, bytes_30412, "mem_30594")
      if ((m_20968 * np.int32(4)) != 0):
        cl.enqueue_copy(self.queue, mem_30594, mem_30592,
                        dest_offset=np.long(np.int64(0)),
                        src_offset=np.long(np.int64(0)),
                        byte_count=np.long((m_20968 * np.int32(4))))
      if synchronous:
        sync(self)
      mem_30592 = None
      mem_30597 = opencl_alloc(self, bytes_30412, "mem_30597")
      if ((1 * (np.long(segmap_usable_groups_28653) * np.long(segmap_group_sizze_28652))) != 0):
        self.mainzisegmap_28390_var.set_args(self.global_failure,
                                             np.int64(N_20967),
                                             np.int64(m_20968),
                                             np.int32(n_20972), res_mem_30433,
                                             res_mem_30512, mem_30581,
                                             mem_30588, mem_30590, mem_30597)
        cl.enqueue_nd_range_kernel(self.queue, self.mainzisegmap_28390_var,
                                   ((np.long(segmap_usable_groups_28653) * np.long(segmap_group_sizze_28652)),),
                                   (np.long(segmap_group_sizze_28652),))
        if synchronous:
          sync(self)
      mem_30581 = None
      mem_30588 = None
      mem_30590 = None
      res_mem_30598 = mem_30597
      res_mem_30599 = mem_30594
    res_mem_30431 = None
    res_mem_30432 = None
    res_mem_30433 = None
    res_mem_30511 = None
    res_mem_30512 = None
    res_mem_30513 = None
    res_mem_30562 = None
    mem_30567 = None
    out_arrsizze_30765 = m_20968
    out_arrsizze_30767 = m_20968
    out_mem_30764 = res_mem_30598
    out_mem_30766 = res_mem_30599
    return (out_mem_30764, out_arrsizze_30765, out_mem_30766,
            out_arrsizze_30767)
  def futhark_mainDetailed(self, mappingindices_mem_29972, images_mem_29973,
                           N_20399, m_20400, N_20401, trend_20402, k_20403,
                           n_20404, freq_20405, hfrac_20406, lam_20407):
    dim_match_20410 = (N_20399 == N_20401)
    empty_or_match_cert_20411 = True
    assert dim_match_20410, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:151:1-155:56\n" % ("function arguments of wrong shape",))
    res_20413 = sext_i32_i64(n_20404)
    x_20414 = (np.int32(2) * k_20403)
    k2p2_20415 = (np.int32(2) + x_20414)
    cond_20416 = slt32(np.int32(0), trend_20402)
    if cond_20416:
      k2p2zq_20417 = k2p2_20415
    else:
      res_20418 = (k2p2_20415 - np.int32(1))
      k2p2zq_20417 = res_20418
    res_20419 = sext_i32_i64(k2p2zq_20417)
    binop_x_29976 = (N_20399 * res_20419)
    bytes_29975 = (np.int64(4) * binop_x_29976)
    if cond_20416:
      bounds_invalid_upwards_20421 = slt64(res_20419, np.int64(0))
      valid_20422 = not(bounds_invalid_upwards_20421)
      range_valid_c_20423 = True
      assert valid_20422, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:37:10-20\n   #3  bfastfinal.fut:31:16-65\n   #4  bfastfinal.fut:155:3-56\n   #5  bfastfinal.fut:151:1-155:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_20419,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_21780 = self.sizes["mainDetailed.segmap_group_size_21710"]
      segmap_usable_groups_21781 = sdiv_up64(binop_x_29976,
                                             segmap_group_sizze_21780)
      mem_29977 = opencl_alloc(self, bytes_29975, "mem_29977")
      if ((1 * (np.long(segmap_usable_groups_21781) * np.long(segmap_group_sizze_21780))) != 0):
        self.mainDetailedzisegmap_21707_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.float32(freq_20405),
                                                     np.int64(res_20419),
                                                     mappingindices_mem_29972,
                                                     mem_29977)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_21707_var,
                                   ((np.long(segmap_usable_groups_21781) * np.long(segmap_group_sizze_21780)),),
                                   (np.long(segmap_group_sizze_21780),))
        if synchronous:
          sync(self)
      binop_p_mem_29982 = mem_29977
    else:
      bounds_invalid_upwards_20447 = slt64(res_20419, np.int64(0))
      valid_20448 = not(bounds_invalid_upwards_20447)
      range_valid_c_20449 = True
      assert valid_20448, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  helpers.fut:49:10-22\n   #3  bfastfinal.fut:32:10-57\n   #4  bfastfinal.fut:155:3-56\n   #5  bfastfinal.fut:151:1-155:56\n" % ("Range ",
                                                                                                                                                                                                                                                                    np.int64(0),
                                                                                                                                                                                                                                                                    "..",
                                                                                                                                                                                                                                                                    np.int64(1),
                                                                                                                                                                                                                                                                    "..<",
                                                                                                                                                                                                                                                                    res_20419,
                                                                                                                                                                                                                                                                    " is invalid."))
      segmap_group_sizze_21954 = self.sizes["mainDetailed.segmap_group_size_21888"]
      segmap_usable_groups_21955 = sdiv_up64(binop_x_29976,
                                             segmap_group_sizze_21954)
      mem_29981 = opencl_alloc(self, bytes_29975, "mem_29981")
      if ((1 * (np.long(segmap_usable_groups_21955) * np.long(segmap_group_sizze_21954))) != 0):
        self.mainDetailedzisegmap_21885_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.float32(freq_20405),
                                                     np.int64(res_20419),
                                                     mappingindices_mem_29972,
                                                     mem_29981)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_21885_var,
                                   ((np.long(segmap_usable_groups_21955) * np.long(segmap_group_sizze_21954)),),
                                   (np.long(segmap_group_sizze_21954),))
        if synchronous:
          sync(self)
      binop_p_mem_29982 = mem_29981
    x_20472 = (N_20399 * N_20399)
    y_20473 = (np.int64(2) * N_20399)
    x_20474 = (x_20472 + y_20473)
    x_20475 = (np.int64(1) + x_20474)
    y_20476 = (np.int64(1) + N_20399)
    zzero_20477 = (y_20476 == np.int64(0))
    nonzzero_20478 = not(zzero_20477)
    nonzzero_cert_20479 = True
    assert nonzzero_20478, ("Error: %s\n\nBacktrace:\n-> #0  bfastfinal.fut:38:32-56\n   #1  bfastfinal.fut:155:3-56\n   #2  bfastfinal.fut:151:1-155:56\n" % ("division by zero",))
    x_20480 = sdiv64(x_20475, y_20476)
    x_20481 = (x_20480 - N_20399)
    binop_p_20482 = (x_20481 - np.int64(1))
    res_20483 = sext_i64_i32(binop_p_20482)
    res_20484 = sitofp_i32_f32(res_20483)
    segmap_group_sizze_22037 = self.sizes["mainDetailed.segmap_group_size_22016"]
    segmap_usable_groups_22038 = sdiv_up64(binop_x_29976,
                                           segmap_group_sizze_22037)
    mem_29985 = opencl_alloc(self, bytes_29975, "mem_29985")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_29985, np.int64(0),
                                                binop_p_mem_29982, np.int64(0),
                                                np.int64(1), N_20399, res_20419)
    mem_29989 = opencl_alloc(self, bytes_29975, "mem_29989")
    if ((1 * (np.long(segmap_usable_groups_22038) * np.long(segmap_group_sizze_22037))) != 0):
      self.mainDetailedzisegmap_22013_var.set_args(self.global_failure,
                                                   np.int64(N_20399),
                                                   np.int64(res_20419),
                                                   np.float32(res_20484),
                                                   mem_29985, mem_29989)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_22013_var,
                                 ((np.long(segmap_usable_groups_22038) * np.long(segmap_group_sizze_22037)),),
                                 (np.long(segmap_group_sizze_22037),))
      if synchronous:
        sync(self)
    eq_x_y_20492 = (np.int64(0) == res_20419)
    p_and_eq_x_y_20493 = (cond_20416 and eq_x_y_20492)
    not_p_20494 = not(cond_20416)
    p_and_eq_x_y_20495 = (eq_x_y_20492 and not_p_20494)
    empty_slice_20496 = (p_and_eq_x_y_20493 or p_and_eq_x_y_20495)
    m_20497 = (res_20419 - np.int64(1))
    zzero_leq_i_p_m_t_s_20498 = sle64(np.int64(0), m_20497)
    i_p_m_t_s_leq_w_20499 = slt64(m_20497, res_20419)
    i_lte_j_20500 = sle64(np.int64(0), res_20419)
    y_20501 = (zzero_leq_i_p_m_t_s_20498 and i_p_m_t_s_leq_w_20499)
    y_20502 = (i_lte_j_20500 and y_20501)
    ok_or_empty_20503 = (empty_slice_20496 or y_20502)
    empty_slice_20504 = (res_20413 == np.int64(0))
    m_20505 = (res_20413 - np.int64(1))
    zzero_leq_i_p_m_t_s_20506 = sle64(np.int64(0), m_20505)
    i_p_m_t_s_leq_w_20507 = slt64(m_20505, N_20399)
    i_lte_j_20508 = sle64(np.int64(0), res_20413)
    y_20509 = (zzero_leq_i_p_m_t_s_20506 and i_p_m_t_s_leq_w_20507)
    y_20510 = (i_lte_j_20508 and y_20509)
    ok_or_empty_20511 = (empty_slice_20504 or y_20510)
    index_ok_20512 = (ok_or_empty_20503 and ok_or_empty_20511)
    index_certs_20513 = True
    assert index_ok_20512, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:41:15-23\n   #1  bfastfinal.fut:155:3-56\n   #2  bfastfinal.fut:151:1-155:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_20413,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               res_20419,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_20399,
                                                                                                                                                                               "]."))
    empty_slice_20515 = (res_20419 == np.int64(0))
    ok_or_empty_20516 = (y_20502 or empty_slice_20515)
    index_ok_20517 = (ok_or_empty_20511 and ok_or_empty_20516)
    index_certs_20518 = True
    assert index_ok_20517, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:42:15-24\n   #1  bfastfinal.fut:155:3-56\n   #2  bfastfinal.fut:151:1-155:56\n" % ("Index [:",
                                                                                                                                                                               res_20413,
                                                                                                                                                                               ", ",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":] out of bounds for array of shape [",
                                                                                                                                                                               N_20399,
                                                                                                                                                                               "][",
                                                                                                                                                                               res_20419,
                                                                                                                                                                               "]."))
    empty_slice_20520 = (m_20400 == np.int64(0))
    m_20521 = (m_20400 - np.int64(1))
    zzero_leq_i_p_m_t_s_20522 = sle64(np.int64(0), m_20521)
    i_p_m_t_s_leq_w_20523 = slt64(m_20521, m_20400)
    i_lte_j_20524 = sle64(np.int64(0), m_20400)
    y_20525 = (zzero_leq_i_p_m_t_s_20522 and i_p_m_t_s_leq_w_20523)
    y_20526 = (i_lte_j_20524 and y_20525)
    ok_or_empty_20527 = (empty_slice_20520 or y_20526)
    index_ok_20528 = (ok_or_empty_20511 and ok_or_empty_20527)
    index_certs_20529 = True
    assert index_ok_20528, ("Error: %s%d%s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:43:15-28\n   #1  bfastfinal.fut:155:3-56\n   #2  bfastfinal.fut:151:1-155:56\n" % ("Index [",
                                                                                                                                                                               np.int64(0),
                                                                                                                                                                               ":, :",
                                                                                                                                                                               res_20413,
                                                                                                                                                                               "] out of bounds for array of shape [",
                                                                                                                                                                               m_20400,
                                                                                                                                                                               "][",
                                                                                                                                                                               N_20399,
                                                                                                                                                                               "]."))
    suff_outer_par_22044 = (self.sizes["mainDetailed.suff_outer_par_6"] <= m_20400)
    segmap_group_sizze_22070 = self.sizes["mainDetailed.segmap_group_size_22048"]
    max_num_groups_30805 = self.sizes["mainDetailed.segmap_num_groups_22050"]
    num_groups_22071 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segmap_group_sizze_22070),
                                                  sext_i32_i64(max_num_groups_30805))))
    nest_sizze_22246 = (m_20400 * res_20419)
    segmap_group_sizze_22247 = self.sizes["mainDetailed.segmap_group_size_22095"]
    max_num_groups_30806 = self.sizes["mainDetailed.segmap_num_groups_22097"]
    num_groups_22248 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_22246,
                                                            segmap_group_sizze_22247),
                                                  sext_i32_i64(max_num_groups_30806))))
    suff_outer_par_22252 = (self.sizes["mainDetailed.suff_outer_par_7"] <= nest_sizze_22246)
    y_22271 = (res_20419 * res_20419)
    nest_sizze_22272 = (m_20400 * y_22271)
    segmap_group_sizze_22273 = self.sizes["mainDetailed.segmap_group_size_22126"]
    suff_outer_par_22278 = (self.sizes["mainDetailed.suff_outer_par_8"] <= nest_sizze_22272)
    nest_sizze_22298 = (res_20413 * nest_sizze_22272)
    segred_group_sizze_22299 = self.sizes["mainDetailed.segred_group_size_22155"]
    max_num_groups_30807 = self.sizes["mainDetailed.segred_num_groups_22157"]
    num_groups_22300 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_22298,
                                                            segred_group_sizze_22299),
                                                  sext_i32_i64(max_num_groups_30807))))
    binop_x_29991 = (m_20400 * N_20401)
    bytes_29990 = (np.int64(4) * binop_x_29991)
    bytes_30035 = (np.int64(4) * nest_sizze_22272)
    bytes_29994 = (np.int64(4) * y_22271)
    binop_x_30080 = (res_20419 * nest_sizze_22246)
    bytes_30078 = (np.int64(4) * binop_x_30080)
    bytes_30040 = (np.int64(4) * res_20419)
    num_threads_30673 = (segmap_group_sizze_22070 * num_groups_22071)
    total_sizze_30674 = (bytes_29994 * num_threads_30673)
    num_threads_30675 = (segmap_group_sizze_22247 * num_groups_22248)
    total_sizze_30676 = (bytes_30040 * num_threads_30675)
    local_memory_capacity_30900 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_30900)) and suff_outer_par_22044):
      mem_29992 = opencl_alloc(self, bytes_29990, "mem_29992")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_29992, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20401, m_20400)
      mem_30038 = opencl_alloc(self, bytes_30035, "mem_30038")
      mem_29996 = opencl_alloc(self, total_sizze_30674, "mem_29996")
      if ((1 * (np.long(num_groups_22071) * np.long(segmap_group_sizze_22070))) != 0):
        self.mainDetailedzisegmap_22046_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int32(n_20404),
                                                     np.int32(k2p2zq_20417),
                                                     np.int64(res_20419),
                                                     np.int64(num_groups_22071),
                                                     binop_p_mem_29982,
                                                     mem_29989, mem_29992,
                                                     mem_29996, mem_30038)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_22046_var,
                                   ((np.long(num_groups_22071) * np.long(segmap_group_sizze_22070)),),
                                   (np.long(segmap_group_sizze_22070),))
        if synchronous:
          sync(self)
      mem_29992 = None
      mem_29996 = None
      mem_30081 = opencl_alloc(self, bytes_30078, "mem_30081")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30081, np.int64(0),
                                                  mem_30038, np.int64(0),
                                                  np.int64(1), m_20400,
                                                  (res_20419 * res_20419))
      mem_30038 = None
      res_mem_30083 = mem_30081
    else:
      local_memory_capacity_30899 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_30899)) and suff_outer_par_22252):
        mem_30057 = opencl_alloc(self, bytes_30078, "mem_30057")
        mem_30041 = opencl_alloc(self, total_sizze_30676, "mem_30041")
        if ((1 * (np.long(num_groups_22248) * np.long(segmap_group_sizze_22247))) != 0):
          self.mainDetailedzisegmap_22092_var.set_args(self.global_failure,
                                                       np.int64(m_20400),
                                                       np.int64(N_20401),
                                                       np.int32(n_20404),
                                                       np.int32(k2p2zq_20417),
                                                       np.int64(res_20419),
                                                       np.int64(num_groups_22248),
                                                       images_mem_29973,
                                                       mem_29985, mem_29989,
                                                       mem_30041, mem_30057)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_22092_var,
                                     ((np.long(num_groups_22248) * np.long(segmap_group_sizze_22247)),),
                                     (np.long(segmap_group_sizze_22247),))
          if synchronous:
            sync(self)
        mem_30041 = None
        mem_30075 = opencl_alloc(self, bytes_30078, "mem_30075")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30075, np.int64(0),
                                                    mem_30057, np.int64(0),
                                                    np.int64(1),
                                                    (m_20400 * res_20419),
                                                    res_20419)
        mem_30057 = None
        res_mem_30077 = mem_30075
      else:
        segmap_usable_groups_22274 = sdiv_up64(nest_sizze_22272,
                                               segmap_group_sizze_22273)
        local_memory_capacity_30898 = self.max_local_memory
        if (sle64(np.int64(0),
                  sext_i32_i64(local_memory_capacity_30898)) and suff_outer_par_22278):
          mem_30062 = opencl_alloc(self, bytes_30078, "mem_30062")
          if ((1 * (np.long(segmap_usable_groups_22274) * np.long(segmap_group_sizze_22273))) != 0):
            self.mainDetailedzisegmap_22122_var.set_args(self.global_failure,
                                                         np.int64(m_20400),
                                                         np.int64(N_20401),
                                                         np.int32(n_20404),
                                                         np.int64(res_20419),
                                                         images_mem_29973,
                                                         mem_29985, mem_29989,
                                                         mem_30062)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_22122_var,
                                       ((np.long(segmap_usable_groups_22274) * np.long(segmap_group_sizze_22273)),),
                                       (np.long(segmap_group_sizze_22273),))
            if synchronous:
              sync(self)
          res_mem_30071 = mem_30062
        else:
          mem_30065 = opencl_alloc(self, bytes_29975, "mem_30065")
          self.futhark_builtinzhgpu_map_transpose_f32(mem_30065, np.int64(0),
                                                      mem_29989, np.int64(0),
                                                      np.int64(1), res_20419,
                                                      N_20399)
          mem_30070 = opencl_alloc(self, bytes_30078, "mem_30070")
          if slt64((res_20413 * np.int64(2)), segred_group_sizze_22299):
            segment_sizze_nonzzero_30838 = smax64(np.int64(1), res_20413)
            num_threads_30839 = (num_groups_22300 * segred_group_sizze_22299)
            if ((1 * (np.long(num_groups_22300) * np.long(segred_group_sizze_22299))) != 0):
              self.mainDetailedzisegred_small_22161_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_22299))),
                                                                 np.int64(N_20399),
                                                                 np.int64(m_20400),
                                                                 np.int64(N_20401),
                                                                 np.int64(res_20413),
                                                                 np.int64(res_20419),
                                                                 np.int64(num_groups_22300),
                                                                 images_mem_29973,
                                                                 binop_p_mem_29982,
                                                                 mem_30065,
                                                                 mem_30070,
                                                                 np.int64(segment_sizze_nonzzero_30838))
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_small_22161_var,
                                         ((np.long(num_groups_22300) * np.long(segred_group_sizze_22299)),),
                                         (np.long(segred_group_sizze_22299),))
              if synchronous:
                sync(self)
          else:
            groups_per_segment_30859 = sdiv_up64(num_groups_22300,
                                                 smax64(np.int64(1),
                                                        ((m_20400 * res_20419) * res_20419)))
            elements_per_thread_30860 = sdiv_up64(res_20413,
                                                  (segred_group_sizze_22299 * groups_per_segment_30859))
            virt_num_groups_30861 = (groups_per_segment_30859 * ((m_20400 * res_20419) * res_20419))
            num_threads_30862 = (num_groups_22300 * segred_group_sizze_22299)
            threads_per_segment_30863 = (groups_per_segment_30859 * segred_group_sizze_22299)
            group_res_arr_mem_30864 = opencl_alloc(self,
                                                   (np.int32(4) * (segred_group_sizze_22299 * virt_num_groups_30861)),
                                                   "group_res_arr_mem_30864")
            mainDetailedzicounter_mem_30866 = self.mainDetailedzicounter_mem_30866
            if ((1 * (np.long(num_groups_22300) * np.long(segred_group_sizze_22299))) != 0):
              self.mainDetailedzisegred_large_22161_var.set_args(self.global_failure,
                                                                 cl.LocalMemory(np.long(np.int32(1))),
                                                                 cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_22299))),
                                                                 np.int64(N_20399),
                                                                 np.int64(N_20401),
                                                                 np.int64(res_20413),
                                                                 np.int64(res_20419),
                                                                 np.int64(num_groups_22300),
                                                                 images_mem_29973,
                                                                 binop_p_mem_29982,
                                                                 mem_30065,
                                                                 mem_30070,
                                                                 np.int64(groups_per_segment_30859),
                                                                 np.int64(elements_per_thread_30860),
                                                                 np.int64(virt_num_groups_30861),
                                                                 np.int64(threads_per_segment_30863),
                                                                 group_res_arr_mem_30864,
                                                                 mainDetailedzicounter_mem_30866)
              cl.enqueue_nd_range_kernel(self.queue,
                                         self.mainDetailedzisegred_large_22161_var,
                                         ((np.long(num_groups_22300) * np.long(segred_group_sizze_22299)),),
                                         (np.long(segred_group_sizze_22299),))
              if synchronous:
                sync(self)
          mem_30065 = None
          res_mem_30071 = mem_30070
        res_mem_30077 = res_mem_30071
      res_mem_30083 = res_mem_30077
    m_20550 = (np.int64(2) * res_20419)
    nm_20551 = (res_20419 * m_20550)
    bounds_invalid_upwards_20552 = slt64(nm_20551, np.int64(0))
    valid_20553 = not(bounds_invalid_upwards_20552)
    range_valid_c_20554 = True
    assert valid_20553, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:77:21-27\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:155:3-56\n   #4  bfastfinal.fut:151:1-155:56\n" % ("Range ",
                                                                                                                                                                                                                                        np.int64(0),
                                                                                                                                                                                                                                        "..",
                                                                                                                                                                                                                                        np.int64(1),
                                                                                                                                                                                                                                        "..<",
                                                                                                                                                                                                                                        nm_20551,
                                                                                                                                                                                                                                        " is invalid."))
    zzero_20556 = (m_20550 == np.int64(0))
    nonzzero_20557 = not(zzero_20556)
    nonzzero_cert_20558 = True
    assert nonzzero_20557, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:72:41-47\n   #1  helpers.fut:72:14-77:28\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:155:3-56\n   #4  bfastfinal.fut:151:1-155:56\n" % ("division by zero",))
    res_20559 = sext_i64_i32(m_20550)
    loop_nonempty_20560 = slt32(np.int32(0), k2p2zq_20417)
    zzero_20561 = (res_20559 == np.int32(0))
    nonzzero_20562 = not(zzero_20561)
    loop_not_taken_20563 = not(loop_nonempty_20560)
    protect_assert_disj_20564 = (nonzzero_20562 or loop_not_taken_20563)
    nonzzero_cert_20565 = True
    assert protect_assert_disj_20564, ("Error: %s\n\nBacktrace:\n-> #0  helpers.fut:59:43-49\n   #1  helpers.fut:59:16-65:32\n   #2  helpers.fut:78:15-53\n   #3  bfastfinal.fut:53:35-50\n   #4  bfastfinal.fut:155:3-56\n   #5  bfastfinal.fut:151:1-155:56\n" % ("division by zero",))
    y_22379 = smin64(res_20419, nm_20551)
    intra_avail_par_22380 = smin64(y_22271, y_22379)
    y_22381 = smax64(res_20419, nm_20551)
    computed_group_sizze_22323 = smax64(y_22271, y_22381)
    max_group_sizze_22514 = self.max_group_size
    fits_22515 = sle64(computed_group_sizze_22323, max_group_sizze_22514)
    suff_intra_par_22513 = (self.sizes["mainDetailed.suff_intra_par_10"] <= intra_avail_par_22380)
    intra_suff_and_fits_22516 = (suff_intra_par_22513 and fits_22515)
    nest_sizze_23097 = (m_20400 * nm_20551)
    segmap_group_sizze_23098 = self.sizes["mainDetailed.segmap_group_size_23061"]
    fits_23125 = sle64(nm_20551, max_group_sizze_22514)
    suff_intra_par_23127 = (self.sizes["mainDetailed.suff_intra_par_14"] <= nm_20551)
    intra_suff_and_fits_23128 = (fits_23125 and suff_intra_par_23127)
    segmap_group_sizze_23164 = self.sizes["mainDetailed.segmap_group_size_22969"]
    segmap_group_sizze_23180 = self.sizes["mainDetailed.segmap_group_size_22902"]
    segmap_group_sizze_23214 = self.sizes["mainDetailed.segmap_group_size_22848"]
    segmap_group_sizze_23249 = self.sizes["mainDetailed.segmap_group_size_22630"]
    segmap_usable_groups_23165 = sdiv_up_safe64(m_20400,
                                                segmap_group_sizze_23164)
    segmap_usable_groups_23181 = sdiv_up_safe64(nest_sizze_23097,
                                                segmap_group_sizze_23180)
    segmap_usable_groups_23215 = sdiv_up_safe64(nest_sizze_23097,
                                                segmap_group_sizze_23214)
    bytes_30086 = (np.int64(4) * nm_20551)
    bytes_30113 = (np.int64(4) * nest_sizze_23097)
    local_memory_capacity_30965 = self.max_local_memory
    if (sle64(((bytes_30086 + bytes_30086) + bytes_29994),
              sext_i32_i64(local_memory_capacity_30965)) and intra_suff_and_fits_22516):
      mem_30111 = opencl_alloc(self, bytes_30078, "mem_30111")
      if ((1 * (np.long(m_20400) * np.long(computed_group_sizze_22323))) != 0):
        self.mainDetailedzisegmap_intragroup_22382_var.set_args(self.global_failure,
                                                                self.failure_is_an_option,
                                                                self.global_failure_args,
                                                                cl.LocalMemory(np.long(bytes_29994)),
                                                                cl.LocalMemory(np.long(bytes_30086)),
                                                                cl.LocalMemory(np.long(bytes_30086)),
                                                                np.int32(k2p2zq_20417),
                                                                np.int64(res_20419),
                                                                np.int64(m_20550),
                                                                np.int64(nm_20551),
                                                                np.int32(res_20559),
                                                                np.int64(computed_group_sizze_22323),
                                                                res_mem_30083,
                                                                mem_30111)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_22382_var,
                                   ((np.long(m_20400) * np.long(computed_group_sizze_22323)),),
                                   (np.long(computed_group_sizze_22323),))
        if synchronous:
          sync(self)
      self.failure_is_an_option = np.int32(1)
      res_mem_30166 = mem_30111
    else:
      segmap_usable_groups_23099 = sdiv_up64(nest_sizze_23097,
                                             segmap_group_sizze_23098)
      mem_30115 = opencl_alloc(self, bytes_30113, "mem_30115")
      if ((1 * (np.long(segmap_usable_groups_23099) * np.long(segmap_group_sizze_23098))) != 0):
        self.mainDetailedzisegmap_23058_var.set_args(self.global_failure,
                                                     np.int64(m_20400),
                                                     np.int64(res_20419),
                                                     np.int64(m_20550),
                                                     np.int64(nm_20551),
                                                     res_mem_30083, mem_30115)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23058_var,
                                   ((np.long(segmap_usable_groups_23099) * np.long(segmap_group_sizze_23098)),),
                                   (np.long(segmap_group_sizze_23098),))
        if synchronous:
          sync(self)
      ctx_param_ext_30116 = m_20400
      ctx_param_ext_30117 = nm_20551
      ctx_param_ext_30118 = np.int64(0)
      ctx_param_ext_30119 = nm_20551
      ctx_param_ext_30120 = m_20400
      ctx_param_ext_30121 = np.int64(1)
      ctx_param_ext_30122 = nm_20551
      mem_param_30123 = mem_30115
      i_23113 = np.int32(0)
      one_31811 = np.int32(1)
      for counter_31810 in range(k2p2zq_20417):
        i_23115 = sext_i32_i64(i_23113)
        x_23116 = sle64(np.int64(0), i_23115)
        y_23117 = slt64(i_23115, nm_20551)
        bounds_check_23118 = (x_23116 and y_23117)
        index_certs_23119 = True
        assert bounds_check_23118, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  helpers.fut:58:16-19\n   #1  helpers.fut:78:15-53\n   #2  bfastfinal.fut:53:35-50\n   #3  bfastfinal.fut:155:3-56\n   #4  bfastfinal.fut:151:1-155:56\n" % ("Index [",
                                                                                                                                                                                                                                         i_23115,
                                                                                                                                                                                                                                         "] out of bounds for array of shape [",
                                                                                                                                                                                                                                         nm_20551,
                                                                                                                                                                                                                                         "]."))
        local_memory_capacity_30925 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30145 = m_20400
        else:
          res_ixfn_30145 = ctx_param_ext_30120
        local_memory_capacity_30926 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30146 = nm_20551
        else:
          res_ixfn_30146 = ctx_param_ext_30122
        local_memory_capacity_30927 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30147 = m_20400
        else:
          res_ixfn_30147 = ctx_param_ext_30116
        local_memory_capacity_30928 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30148 = nm_20551
        else:
          res_ixfn_30148 = ctx_param_ext_30117
        local_memory_capacity_30929 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30149 = nm_20551
        else:
          res_ixfn_30149 = ctx_param_ext_30119
        local_memory_capacity_30930 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30150 = np.int64(1)
        else:
          res_ixfn_30150 = ctx_param_ext_30121
        local_memory_capacity_30931 = self.max_local_memory
        if intra_suff_and_fits_23128:
          res_ixfn_30151 = np.int64(0)
        else:
          res_ixfn_30151 = ctx_param_ext_30118
        local_memory_capacity_30959 = self.max_local_memory
        if ((sle64(np.int64(0),
                   sext_i32_i64(local_memory_capacity_30959)) and sle64(bytes_30086,
                                                                        sext_i32_i64(local_memory_capacity_30959))) and intra_suff_and_fits_23128):
          mem_30128 = opencl_alloc(self, bytes_30113, "mem_30128")
          group_sizze_30935 = self.sizes["mainDetailed.group_size_30935"]
          num_groups_30936 = sdiv_up64((m_20400 * nm_20551), group_sizze_30935)
          if ((1 * (np.long(num_groups_30936) * np.long(group_sizze_30935))) != 0):
            self.mainDetailedzicopy_30932_var.set_args(np.int64(m_20400),
                                                       np.int64(nm_20551),
                                                       np.int64(ctx_param_ext_30118),
                                                       np.int64(ctx_param_ext_30119),
                                                       np.int64(ctx_param_ext_30121),
                                                       mem_param_30123,
                                                       mem_30128)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzicopy_30932_var,
                                       ((np.long(num_groups_30936) * np.long(group_sizze_30935)),),
                                       (np.long(group_sizze_30935),))
            if synchronous:
              sync(self)
          mem_30136 = opencl_alloc(self, bytes_30113, "mem_30136")
          if ((1 * (np.long(m_20400) * np.long(nm_20551))) != 0):
            self.mainDetailedzisegmap_intragroup_22726_var.set_args(self.global_failure,
                                                                    cl.LocalMemory(np.long(bytes_30086)),
                                                                    np.int64(m_20400),
                                                                    np.int32(k2p2zq_20417),
                                                                    np.int64(nm_20551),
                                                                    np.int32(res_20559),
                                                                    np.int32(i_23113),
                                                                    np.int64(i_23115),
                                                                    np.int64(ctx_param_ext_30118),
                                                                    np.int64(ctx_param_ext_30119),
                                                                    np.int64(ctx_param_ext_30121),
                                                                    mem_param_30123,
                                                                    mem_30128,
                                                                    mem_30136)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_intragroup_22726_var,
                                       ((np.long(m_20400) * np.long(nm_20551)),),
                                       (np.long(nm_20551),))
            if synchronous:
              sync(self)
          mem_30128 = None
          res_mem_30152 = mem_30136
        else:
          mem_30139 = opencl_alloc(self, m_20400, "mem_30139")
          if ((1 * (np.long(segmap_usable_groups_23165) * np.long(segmap_group_sizze_23164))) != 0):
            self.mainDetailedzisegmap_22967_var.set_args(self.global_failure,
                                                         np.int64(m_20400),
                                                         np.int64(i_23115),
                                                         np.int64(ctx_param_ext_30118),
                                                         np.int64(ctx_param_ext_30119),
                                                         np.int64(ctx_param_ext_30121),
                                                         mem_param_30123,
                                                         mem_30139)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_22967_var,
                                       ((np.long(segmap_usable_groups_23165) * np.long(segmap_group_sizze_23164)),),
                                       (np.long(segmap_group_sizze_23164),))
            if synchronous:
              sync(self)
          mem_30143 = opencl_alloc(self, bytes_30113, "mem_30143")
          if ((1 * (np.long(segmap_usable_groups_23181) * np.long(segmap_group_sizze_23180))) != 0):
            self.mainDetailedzisegmap_22899_var.set_args(self.global_failure,
                                                         np.int64(m_20400),
                                                         np.int32(k2p2zq_20417),
                                                         np.int64(nm_20551),
                                                         np.int32(res_20559),
                                                         np.int32(i_23113),
                                                         np.int64(i_23115),
                                                         np.int64(ctx_param_ext_30118),
                                                         np.int64(ctx_param_ext_30119),
                                                         np.int64(ctx_param_ext_30121),
                                                         mem_param_30123,
                                                         mem_30139, mem_30143)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_22899_var,
                                       ((np.long(segmap_usable_groups_23181) * np.long(segmap_group_sizze_23180)),),
                                       (np.long(segmap_group_sizze_23180),))
            if synchronous:
              sync(self)
          mem_30139 = None
          if ((1 * (np.long(segmap_usable_groups_23215) * np.long(segmap_group_sizze_23214))) != 0):
            self.mainDetailedzisegmap_22845_var.set_args(self.global_failure,
                                                         np.int64(m_20400),
                                                         np.int64(nm_20551),
                                                         np.int64(ctx_param_ext_30118),
                                                         np.int64(ctx_param_ext_30119),
                                                         np.int64(ctx_param_ext_30121),
                                                         mem_param_30123,
                                                         mem_30143)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegmap_22845_var,
                                       ((np.long(segmap_usable_groups_23215) * np.long(segmap_group_sizze_23214)),),
                                       (np.long(segmap_group_sizze_23214),))
            if synchronous:
              sync(self)
          mem_30143 = None
          res_mem_30152 = mem_param_30123
        ctx_param_ext_tmp_30916 = res_ixfn_30147
        ctx_param_ext_tmp_30917 = res_ixfn_30148
        ctx_param_ext_tmp_30918 = res_ixfn_30151
        ctx_param_ext_tmp_30919 = res_ixfn_30149
        ctx_param_ext_tmp_30920 = res_ixfn_30145
        ctx_param_ext_tmp_30921 = res_ixfn_30150
        ctx_param_ext_tmp_30922 = res_ixfn_30146
        mem_param_tmp_30923 = res_mem_30152
        ctx_param_ext_30116 = ctx_param_ext_tmp_30916
        ctx_param_ext_30117 = ctx_param_ext_tmp_30917
        ctx_param_ext_30118 = ctx_param_ext_tmp_30918
        ctx_param_ext_30119 = ctx_param_ext_tmp_30919
        ctx_param_ext_30120 = ctx_param_ext_tmp_30920
        ctx_param_ext_30121 = ctx_param_ext_tmp_30921
        ctx_param_ext_30122 = ctx_param_ext_tmp_30922
        mem_param_30123 = mem_param_tmp_30923
        i_23113 += one_31811
      res_r_ixfn_30153 = ctx_param_ext_30116
      res_r_ixfn_30154 = ctx_param_ext_30117
      res_r_ixfn_30155 = ctx_param_ext_30118
      res_r_ixfn_30156 = ctx_param_ext_30119
      res_r_ixfn_30157 = ctx_param_ext_30120
      res_r_ixfn_30158 = ctx_param_ext_30121
      res_r_ixfn_30159 = ctx_param_ext_30122
      res_r_mem_30160 = mem_param_30123
      mem_30115 = None
      segmap_usable_groups_23250 = sdiv_up64(nest_sizze_22272,
                                             segmap_group_sizze_23249)
      mem_30165 = opencl_alloc(self, bytes_30078, "mem_30165")
      if ((1 * (np.long(segmap_usable_groups_23250) * np.long(segmap_group_sizze_23249))) != 0):
        self.mainDetailedzisegmap_22626_var.set_args(self.global_failure,
                                                     np.int64(m_20400),
                                                     np.int64(res_20419),
                                                     np.int64(m_20550),
                                                     np.int64(res_r_ixfn_30155),
                                                     np.int64(res_r_ixfn_30156),
                                                     np.int64(res_r_ixfn_30158),
                                                     res_r_mem_30160, mem_30165)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_22626_var,
                                   ((np.long(segmap_usable_groups_23250) * np.long(segmap_group_sizze_23249)),),
                                   (np.long(segmap_group_sizze_23249),))
        if synchronous:
          sync(self)
      res_r_mem_30160 = None
      res_mem_30166 = mem_30165
    res_mem_30083 = None
    suff_outer_par_23262 = (self.sizes["mainDetailed.suff_outer_par_17"] <= m_20400)
    segmap_group_sizze_23284 = self.sizes["mainDetailed.segmap_group_size_23266"]
    max_num_groups_30966 = self.sizes["mainDetailed.segmap_num_groups_23268"]
    num_groups_23285 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segmap_group_sizze_23284),
                                                  sext_i32_i64(max_num_groups_30966))))
    suff_outer_par_23369 = (self.sizes["mainDetailed.suff_outer_par_18"] <= nest_sizze_22246)
    nest_sizze_23385 = (res_20413 * nest_sizze_22246)
    segred_group_sizze_23386 = self.sizes["mainDetailed.segred_group_size_23328"]
    max_num_groups_30967 = self.sizes["mainDetailed.segred_num_groups_23330"]
    num_groups_23387 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_23385,
                                                            segred_group_sizze_23386),
                                                  sext_i32_i64(max_num_groups_30967))))
    tile_sizze_28845 = self.sizes["mainDetailed.tile_size_28844"]
    group_sizze_28846 = (tile_sizze_28845 * tile_sizze_28845)
    bytes_30185 = (np.int64(4) * nest_sizze_22246)
    bytes_30190 = (np.int64(4) * group_sizze_28846)
    binop_x_30634 = (np.int64(4) * tile_sizze_28845)
    sizze_30635 = (tile_sizze_28845 * binop_x_30634)
    num_threads_30686 = (segmap_group_sizze_23284 * num_groups_23285)
    total_sizze_30687 = (bytes_30040 * num_threads_30686)
    local_memory_capacity_31053 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31053)) and suff_outer_par_23262):
      mem_30169 = opencl_alloc(self, bytes_29990, "mem_30169")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30169, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20401, m_20400)
      mem_30187 = opencl_alloc(self, bytes_30185, "mem_30187")
      mem_30172 = opencl_alloc(self, total_sizze_30687, "mem_30172")
      if ((1 * (np.long(num_groups_23285) * np.long(segmap_group_sizze_23284))) != 0):
        self.mainDetailedzisegmap_23264_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int32(n_20404),
                                                     np.int32(k2p2zq_20417),
                                                     np.int64(res_20419),
                                                     np.int64(num_groups_23285),
                                                     binop_p_mem_29982,
                                                     mem_30169, mem_30172,
                                                     mem_30187)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23264_var,
                                   ((np.long(num_groups_23285) * np.long(segmap_group_sizze_23284)),),
                                   (np.long(segmap_group_sizze_23284),))
        if synchronous:
          sync(self)
      mem_30169 = None
      mem_30172 = None
      mem_30255 = opencl_alloc(self, bytes_30185, "mem_30255")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30255, np.int64(0),
                                                  mem_30187, np.int64(0),
                                                  np.int64(1), m_20400,
                                                  res_20419)
      mem_30187 = None
      res_mem_30257 = mem_30255
    else:
      local_memory_capacity_31052 = self.max_local_memory
      if (sle64((((bytes_30190 + bytes_30190) + bytes_30190) + bytes_30190),
                sext_i32_i64(local_memory_capacity_31052)) and suff_outer_par_23369):
        num_groups_x_28847 = sdiv_up64(m_20400, tile_sizze_28845)
        num_groups_y_28848 = sdiv_up64(res_20419, tile_sizze_28845)
        num_groups_top_28849 = (num_groups_x_28847 * num_groups_y_28848)
        num_whole_tiles_28866 = squot64(res_20413, tile_sizze_28845)
        residual_input_29016 = srem64(res_20413, tile_sizze_28845)
        cond_29017 = (residual_input_29016 == np.int64(0))
        mem_30247 = opencl_alloc(self, bytes_30185, "mem_30247")
        if ((1 * (np.long(num_groups_top_28849) * np.long(group_sizze_28846))) != 0):
          self.mainDetailedzisegmap_intragroup_28850_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_30190)),
                                                                  cl.LocalMemory(np.long(bytes_30190)),
                                                                  cl.LocalMemory(np.long(bytes_30190)),
                                                                  cl.LocalMemory(np.long(bytes_30190)),
                                                                  np.int64(m_20400),
                                                                  np.int64(N_20401),
                                                                  np.int64(res_20413),
                                                                  np.int64(res_20419),
                                                                  np.int64(num_groups_y_28848),
                                                                  np.int64(num_whole_tiles_28866),
                                                                  np.int64(residual_input_29016),
                                                                  np.byte(cond_29017),
                                                                  images_mem_29973,
                                                                  mem_29985,
                                                                  mem_30247)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_28850_var,
                                     ((np.long(num_groups_top_28849) * np.long(group_sizze_28846)),),
                                     (np.long(group_sizze_28846),))
          if synchronous:
            sync(self)
        res_mem_30252 = mem_30247
      else:
        mem_30251 = opencl_alloc(self, bytes_30185, "mem_30251")
        if slt64((res_20413 * np.int64(2)), segred_group_sizze_23386):
          segment_sizze_nonzzero_30992 = smax64(np.int64(1), res_20413)
          num_threads_30993 = (num_groups_23387 * segred_group_sizze_23386)
          if ((1 * (np.long(num_groups_23387) * np.long(segred_group_sizze_23386))) != 0):
            self.mainDetailedzisegred_small_23334_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23386))),
                                                               np.int64(N_20399),
                                                               np.int64(m_20400),
                                                               np.int64(N_20401),
                                                               np.int64(res_20413),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23387),
                                                               images_mem_29973,
                                                               binop_p_mem_29982,
                                                               mem_30251,
                                                               np.int64(segment_sizze_nonzzero_30992))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_23334_var,
                                       ((np.long(num_groups_23387) * np.long(segred_group_sizze_23386)),),
                                       (np.long(segred_group_sizze_23386),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31013 = sdiv_up64(num_groups_23387,
                                               smax64(np.int64(1),
                                                      (m_20400 * res_20419)))
          elements_per_thread_31014 = sdiv_up64(res_20413,
                                                (segred_group_sizze_23386 * groups_per_segment_31013))
          virt_num_groups_31015 = (groups_per_segment_31013 * (m_20400 * res_20419))
          num_threads_31016 = (num_groups_23387 * segred_group_sizze_23386)
          threads_per_segment_31017 = (groups_per_segment_31013 * segred_group_sizze_23386)
          group_res_arr_mem_31018 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_23386 * virt_num_groups_31015)),
                                                 "group_res_arr_mem_31018")
          mainDetailedzicounter_mem_31020 = self.mainDetailedzicounter_mem_31020
          if ((1 * (np.long(num_groups_23387) * np.long(segred_group_sizze_23386))) != 0):
            self.mainDetailedzisegred_large_23334_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23386))),
                                                               np.int64(N_20399),
                                                               np.int64(N_20401),
                                                               np.int64(res_20413),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23387),
                                                               images_mem_29973,
                                                               binop_p_mem_29982,
                                                               mem_30251,
                                                               np.int64(groups_per_segment_31013),
                                                               np.int64(elements_per_thread_31014),
                                                               np.int64(virt_num_groups_31015),
                                                               np.int64(threads_per_segment_31017),
                                                               group_res_arr_mem_31018,
                                                               mainDetailedzicounter_mem_31020)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_23334_var,
                                       ((np.long(num_groups_23387) * np.long(segred_group_sizze_23386)),),
                                       (np.long(segred_group_sizze_23386),))
            if synchronous:
              sync(self)
        res_mem_30252 = mem_30251
      res_mem_30257 = res_mem_30252
    binop_p_mem_29982 = None
    mem_29985 = None
    suff_outer_par_23403 = (self.sizes["mainDetailed.suff_outer_par_19"] <= m_20400)
    segmap_group_sizze_23424 = self.sizes["mainDetailed.segmap_group_size_23407"]
    max_num_groups_31054 = self.sizes["mainDetailed.segmap_num_groups_23409"]
    num_groups_23425 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segmap_group_sizze_23424),
                                                  sext_i32_i64(max_num_groups_31054))))
    segmap_group_sizze_23500 = self.sizes["mainDetailed.segmap_group_size_23444"]
    suff_outer_par_23504 = (self.sizes["mainDetailed.suff_outer_par_20"] <= nest_sizze_22246)
    segred_group_sizze_23519 = self.sizes["mainDetailed.segred_group_size_23465"]
    max_num_groups_31055 = self.sizes["mainDetailed.segred_num_groups_23467"]
    num_groups_23520 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(binop_x_30080,
                                                            segred_group_sizze_23519),
                                                  sext_i32_i64(max_num_groups_31055))))
    num_threads_30690 = (segmap_group_sizze_23424 * num_groups_23425)
    total_sizze_30691 = (bytes_30040 * num_threads_30690)
    local_memory_capacity_31134 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31134)) and suff_outer_par_23403):
      mem_30261 = opencl_alloc(self, bytes_30035, "mem_30261")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30261, np.int64(0),
                                                  res_mem_30166, np.int64(0),
                                                  np.int64(1),
                                                  (res_20419 * res_20419),
                                                  m_20400)
      mem_30264 = opencl_alloc(self, bytes_30185, "mem_30264")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30264, np.int64(0),
                                                  res_mem_30257, np.int64(0),
                                                  np.int64(1), res_20419,
                                                  m_20400)
      mem_30282 = opencl_alloc(self, bytes_30185, "mem_30282")
      mem_30267 = opencl_alloc(self, total_sizze_30691, "mem_30267")
      if ((1 * (np.long(num_groups_23425) * np.long(segmap_group_sizze_23424))) != 0):
        self.mainDetailedzisegmap_23405_var.set_args(self.global_failure,
                                                     np.int64(m_20400),
                                                     np.int32(k2p2zq_20417),
                                                     np.int64(res_20419),
                                                     np.int64(num_groups_23425),
                                                     mem_30261, mem_30264,
                                                     mem_30267, mem_30282)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23405_var,
                                   ((np.long(num_groups_23425) * np.long(segmap_group_sizze_23424)),),
                                   (np.long(segmap_group_sizze_23424),))
        if synchronous:
          sync(self)
      mem_30261 = None
      mem_30264 = None
      mem_30267 = None
      mem_30298 = opencl_alloc(self, bytes_30185, "mem_30298")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30298, np.int64(0),
                                                  mem_30282, np.int64(0),
                                                  np.int64(1), m_20400,
                                                  res_20419)
      mem_30282 = None
      res_mem_30300 = mem_30298
    else:
      segmap_usable_groups_23501 = sdiv_up64(nest_sizze_22246,
                                             segmap_group_sizze_23500)
      local_memory_capacity_31133 = self.max_local_memory
      if (sle64(np.int64(0),
                sext_i32_i64(local_memory_capacity_31133)) and suff_outer_par_23504):
        mem_30286 = opencl_alloc(self, bytes_30078, "mem_30286")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30286, np.int64(0),
                                                    res_mem_30166, np.int64(0),
                                                    np.int64(1), res_20419,
                                                    (m_20400 * res_20419))
        mem_30290 = opencl_alloc(self, bytes_30185, "mem_30290")
        if ((1 * (np.long(segmap_usable_groups_23501) * np.long(segmap_group_sizze_23500))) != 0):
          self.mainDetailedzisegmap_23441_var.set_args(self.global_failure,
                                                       np.int64(m_20400),
                                                       np.int32(k2p2zq_20417),
                                                       np.int64(res_20419),
                                                       res_mem_30257, mem_30286,
                                                       mem_30290)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_23441_var,
                                     ((np.long(segmap_usable_groups_23501) * np.long(segmap_group_sizze_23500)),),
                                     (np.long(segmap_group_sizze_23500),))
          if synchronous:
            sync(self)
        mem_30286 = None
        res_mem_30295 = mem_30290
      else:
        mem_30294 = opencl_alloc(self, bytes_30185, "mem_30294")
        if slt64((res_20419 * np.int64(2)), segred_group_sizze_23519):
          segment_sizze_nonzzero_31073 = smax64(np.int64(1), res_20419)
          num_threads_31074 = (num_groups_23520 * segred_group_sizze_23519)
          if ((1 * (np.long(num_groups_23520) * np.long(segred_group_sizze_23519))) != 0):
            self.mainDetailedzisegred_small_23471_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23519))),
                                                               np.int64(m_20400),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23520),
                                                               res_mem_30166,
                                                               res_mem_30257,
                                                               mem_30294,
                                                               np.int64(segment_sizze_nonzzero_31073))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_23471_var,
                                       ((np.long(num_groups_23520) * np.long(segred_group_sizze_23519)),),
                                       (np.long(segred_group_sizze_23519),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31094 = sdiv_up64(num_groups_23520,
                                               smax64(np.int64(1),
                                                      (m_20400 * res_20419)))
          elements_per_thread_31095 = sdiv_up64(res_20419,
                                                (segred_group_sizze_23519 * groups_per_segment_31094))
          virt_num_groups_31096 = (groups_per_segment_31094 * (m_20400 * res_20419))
          num_threads_31097 = (num_groups_23520 * segred_group_sizze_23519)
          threads_per_segment_31098 = (groups_per_segment_31094 * segred_group_sizze_23519)
          group_res_arr_mem_31099 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_23519 * virt_num_groups_31096)),
                                                 "group_res_arr_mem_31099")
          mainDetailedzicounter_mem_31101 = self.mainDetailedzicounter_mem_31101
          if ((1 * (np.long(num_groups_23520) * np.long(segred_group_sizze_23519))) != 0):
            self.mainDetailedzisegred_large_23471_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23519))),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23520),
                                                               res_mem_30166,
                                                               res_mem_30257,
                                                               mem_30294,
                                                               np.int64(groups_per_segment_31094),
                                                               np.int64(elements_per_thread_31095),
                                                               np.int64(virt_num_groups_31096),
                                                               np.int64(threads_per_segment_31098),
                                                               group_res_arr_mem_31099,
                                                               mainDetailedzicounter_mem_31101)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_23471_var,
                                       ((np.long(num_groups_23520) * np.long(segred_group_sizze_23519)),),
                                       (np.long(segred_group_sizze_23519),))
            if synchronous:
              sync(self)
        res_mem_30295 = mem_30294
      res_mem_30300 = res_mem_30295
    res_mem_30166 = None
    res_mem_30257 = None
    suff_outer_par_23535 = (self.sizes["mainDetailed.suff_outer_par_21"] <= m_20400)
    segmap_group_sizze_23555 = self.sizes["mainDetailed.segmap_group_size_23539"]
    max_num_groups_31135 = self.sizes["mainDetailed.segmap_num_groups_23541"]
    num_groups_23556 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segmap_group_sizze_23555),
                                                  sext_i32_i64(max_num_groups_31135))))
    comparatee_23631 = (N_20399 * m_20400)
    suff_outer_par_23632 = (self.sizes["mainDetailed.suff_outer_par_22"] <= comparatee_23631)
    nest_sizze_23646 = (res_20419 * comparatee_23631)
    segred_group_sizze_23647 = self.sizes["mainDetailed.segred_group_size_23595"]
    max_num_groups_31136 = self.sizes["mainDetailed.segred_num_groups_23597"]
    num_groups_23648 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_23646,
                                                            segred_group_sizze_23647),
                                                  sext_i32_i64(max_num_groups_31136))))
    tile_sizze_29167 = self.sizes["mainDetailed.tile_size_29166"]
    group_sizze_29168 = (tile_sizze_29167 * tile_sizze_29167)
    bytes_30319 = (np.int64(4) * comparatee_23631)
    bytes_30305 = (np.int64(4) * N_20399)
    bytes_30327 = (np.int64(4) * group_sizze_29168)
    binop_x_30646 = (np.int64(4) * tile_sizze_29167)
    sizze_30647 = (tile_sizze_29167 * binop_x_30646)
    num_threads_30694 = (segmap_group_sizze_23555 * num_groups_23556)
    total_sizze_30695 = (bytes_30305 * num_threads_30694)
    local_memory_capacity_31222 = self.max_local_memory
    if (sle64(np.int64(0),
              sext_i32_i64(local_memory_capacity_31222)) and suff_outer_par_23535):
      mem_30303 = opencl_alloc(self, bytes_30185, "mem_30303")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30303, np.int64(0),
                                                  res_mem_30300, np.int64(0),
                                                  np.int64(1), res_20419,
                                                  m_20400)
      mem_30321 = opencl_alloc(self, bytes_30319, "mem_30321")
      mem_30306 = opencl_alloc(self, total_sizze_30695, "mem_30306")
      if ((1 * (np.long(num_groups_23556) * np.long(segmap_group_sizze_23555))) != 0):
        self.mainDetailedzisegmap_23537_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int32(k2p2zq_20417),
                                                     np.int64(res_20419),
                                                     np.int64(num_groups_23556),
                                                     mem_29989, mem_30303,
                                                     mem_30306, mem_30321)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23537_var,
                                   ((np.long(num_groups_23556) * np.long(segmap_group_sizze_23555)),),
                                   (np.long(segmap_group_sizze_23555),))
        if synchronous:
          sync(self)
      mem_30303 = None
      mem_30306 = None
      mem_30392 = opencl_alloc(self, bytes_30319, "mem_30392")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30392, np.int64(0),
                                                  mem_30321, np.int64(0),
                                                  np.int64(1), m_20400, N_20399)
      mem_30321 = None
      res_mem_30394 = mem_30392
    else:
      local_memory_capacity_31221 = self.max_local_memory
      if (sle64((((bytes_30327 + bytes_30327) + bytes_30327) + bytes_30327),
                sext_i32_i64(local_memory_capacity_31221)) and suff_outer_par_23632):
        mem_30324 = opencl_alloc(self, bytes_29975, "mem_30324")
        self.futhark_builtinzhgpu_map_transpose_f32(mem_30324, np.int64(0),
                                                    mem_29989, np.int64(0),
                                                    np.int64(1), res_20419,
                                                    N_20399)
        num_groups_x_29169 = sdiv_up64(m_20400, tile_sizze_29167)
        num_groups_y_29170 = sdiv_up64(N_20399, tile_sizze_29167)
        num_groups_top_29171 = (num_groups_x_29169 * num_groups_y_29170)
        num_whole_tiles_29188 = squot64(res_20419, tile_sizze_29167)
        residual_input_29332 = srem64(res_20419, tile_sizze_29167)
        cond_29333 = (residual_input_29332 == np.int64(0))
        mem_30384 = opencl_alloc(self, bytes_30319, "mem_30384")
        if ((1 * (np.long(num_groups_top_29171) * np.long(group_sizze_29168))) != 0):
          self.mainDetailedzisegmap_intragroup_29172_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long(bytes_30327)),
                                                                  cl.LocalMemory(np.long(bytes_30327)),
                                                                  cl.LocalMemory(np.long(bytes_30327)),
                                                                  cl.LocalMemory(np.long(bytes_30327)),
                                                                  np.int64(N_20399),
                                                                  np.int64(m_20400),
                                                                  np.int64(res_20419),
                                                                  np.int64(num_groups_y_29170),
                                                                  np.int64(num_whole_tiles_29188),
                                                                  np.int64(residual_input_29332),
                                                                  np.byte(cond_29333),
                                                                  res_mem_30300,
                                                                  mem_30324,
                                                                  mem_30384)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_29172_var,
                                     ((np.long(num_groups_top_29171) * np.long(group_sizze_29168)),),
                                     (np.long(group_sizze_29168),))
          if synchronous:
            sync(self)
        mem_30324 = None
        res_mem_30389 = mem_30384
      else:
        mem_30388 = opencl_alloc(self, bytes_30319, "mem_30388")
        if slt64((res_20419 * np.int64(2)), segred_group_sizze_23647):
          segment_sizze_nonzzero_31161 = smax64(np.int64(1), res_20419)
          num_threads_31162 = (num_groups_23648 * segred_group_sizze_23647)
          if ((1 * (np.long(num_groups_23648) * np.long(segred_group_sizze_23647))) != 0):
            self.mainDetailedzisegred_small_23601_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23647))),
                                                               np.int64(N_20399),
                                                               np.int64(m_20400),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23648),
                                                               mem_29989,
                                                               res_mem_30300,
                                                               mem_30388,
                                                               np.int64(segment_sizze_nonzzero_31161))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_23601_var,
                                       ((np.long(num_groups_23648) * np.long(segred_group_sizze_23647)),),
                                       (np.long(segred_group_sizze_23647),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31182 = sdiv_up64(num_groups_23648,
                                               smax64(np.int64(1),
                                                      (m_20400 * N_20399)))
          elements_per_thread_31183 = sdiv_up64(res_20419,
                                                (segred_group_sizze_23647 * groups_per_segment_31182))
          virt_num_groups_31184 = (groups_per_segment_31182 * (m_20400 * N_20399))
          num_threads_31185 = (num_groups_23648 * segred_group_sizze_23647)
          threads_per_segment_31186 = (groups_per_segment_31182 * segred_group_sizze_23647)
          group_res_arr_mem_31187 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_23647 * virt_num_groups_31184)),
                                                 "group_res_arr_mem_31187")
          mainDetailedzicounter_mem_31189 = self.mainDetailedzicounter_mem_31189
          if ((1 * (np.long(num_groups_23648) * np.long(segred_group_sizze_23647))) != 0):
            self.mainDetailedzisegred_large_23601_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_23647))),
                                                               np.int64(N_20399),
                                                               np.int64(res_20419),
                                                               np.int64(num_groups_23648),
                                                               mem_29989,
                                                               res_mem_30300,
                                                               mem_30388,
                                                               np.int64(groups_per_segment_31182),
                                                               np.int64(elements_per_thread_31183),
                                                               np.int64(virt_num_groups_31184),
                                                               np.int64(threads_per_segment_31186),
                                                               group_res_arr_mem_31187,
                                                               mainDetailedzicounter_mem_31189)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_23601_var,
                                       ((np.long(num_groups_23648) * np.long(segred_group_sizze_23647)),),
                                       (np.long(segred_group_sizze_23647),))
            if synchronous:
              sync(self)
        res_mem_30389 = mem_30388
      res_mem_30394 = res_mem_30389
    mem_29989 = None
    res_mem_30300 = None
    i_20666 = (N_20399 - np.int64(1))
    x_20667 = sle64(np.int64(0), i_20666)
    y_20668 = slt64(i_20666, N_20399)
    bounds_check_20669 = (x_20667 and y_20668)
    index_certs_20670 = True
    assert bounds_check_20669, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:18:29-34\n   #1  helpers.fut:20:13-20\n   #2  bfastfinal.fut:78:30-91\n   #3  /prelude/soacs.fut:56:19-23\n   #4  /prelude/soacs.fut:56:3-37\n   #5  bfastfinal.fut:74:5-81:25\n   #6  bfastfinal.fut:155:3-56\n   #7  bfastfinal.fut:151:1-155:56\n" % ("Index [",
                                                                                                                                                                                                                                                                                                                                                     i_20666,
                                                                                                                                                                                                                                                                                                                                                     "] out of bounds for array of shape [",
                                                                                                                                                                                                                                                                                                                                                     N_20399,
                                                                                                                                                                                                                                                                                                                                                     "]."))
    fits_23777 = sle64(N_20399, max_group_sizze_22514)
    suff_intra_par_23775 = (self.sizes["mainDetailed.suff_intra_par_25"] <= N_20399)
    intra_suff_and_fits_23778 = (suff_intra_par_23775 and fits_23777)
    segscan_group_sizze_23927 = self.sizes["mainDetailed.segscan_group_size_23904"]
    max_num_groups_31223 = self.sizes["mainDetailed.segscan_num_groups_23906"]
    num_groups_23928 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(comparatee_23631,
                                                            segscan_group_sizze_23927),
                                                  sext_i32_i64(max_num_groups_31223))))
    segmap_group_sizze_23947 = self.sizes["mainDetailed.segmap_group_size_23895"]
    mem_30397 = opencl_alloc(self, bytes_30319, "mem_30397")
    self.futhark_builtinzhreplicate_f32(mem_30397, (m_20400 * N_20399), np.nan)
    mem_30400 = opencl_alloc(self, bytes_30319, "mem_30400")
    self.futhark_builtinzhreplicate_i32(mem_30400, (m_20400 * N_20399),
                                        np.int32(0))
    segmap_group_sizze_23983 = self.sizes["mainDetailed.segmap_group_size_23820"]
    bytes_30412 = (np.int64(4) * m_20400)
    bytes_30403 = (np.int64(8) * N_20399)
    bytes_30421 = (np.int64(8) * comparatee_23631)
    local_memory_capacity_31325 = self.max_local_memory
    if (sle64((((bytes_30403 + bytes_30305) + bytes_30305) + bytes_30305),
              sext_i32_i64(local_memory_capacity_31325)) and intra_suff_and_fits_23778):
      mem_30413 = opencl_alloc(self, bytes_30412, "mem_30413")
      mem_30416 = opencl_alloc(self, bytes_30319, "mem_30416")
      mem_30419 = opencl_alloc(self, bytes_30319, "mem_30419")
      if ((1 * (np.long(m_20400) * np.long(N_20399))) != 0):
        self.mainDetailedzisegmap_intragroup_23700_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_30305)),
                                                                cl.LocalMemory(np.long(bytes_30305)),
                                                                cl.LocalMemory(np.long(bytes_30305)),
                                                                cl.LocalMemory(np.long(bytes_30403)),
                                                                np.int64(N_20399),
                                                                np.int64(N_20401),
                                                                np.int64(i_20666),
                                                                images_mem_29973,
                                                                res_mem_30394,
                                                                mem_30413,
                                                                mem_30416,
                                                                mem_30419)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_23700_var,
                                   ((np.long(m_20400) * np.long(N_20399)),),
                                   (np.long(N_20399),))
        if synchronous:
          sync(self)
      res_mem_30431 = mem_30413
      res_mem_30432 = mem_30416
      res_mem_30433 = mem_30419
    else:
      mem_30423 = opencl_alloc(self, bytes_30421, "mem_30423")
      mem_30426 = opencl_alloc(self, bytes_30319, "mem_30426")
      if slt64(np.int64(0), (m_20400 * N_20399)):
        stage1_max_num_groups_31259 = self.max_group_size
        stage1_num_groups_31260 = smin64(stage1_max_num_groups_31259,
                                         num_groups_23928)
        num_threads_31261 = sext_i64_i32((stage1_num_groups_31260 * segscan_group_sizze_23927))
        if ((1 * (np.long(stage1_num_groups_31260) * np.long(segscan_group_sizze_23927))) != 0):
          self.mainDetailedziscan_stage1_23910_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * segscan_group_sizze_23927)))),
                                                            np.int64(N_20399),
                                                            np.int64(m_20400),
                                                            np.int64(N_20401),
                                                            images_mem_29973,
                                                            res_mem_30394,
                                                            mem_30423,
                                                            mem_30426,
                                                            np.int32(num_threads_31261))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage1_23910_var,
                                     ((np.long(stage1_num_groups_31260) * np.long(segscan_group_sizze_23927)),),
                                     (np.long(segscan_group_sizze_23927),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_31260))) != 0):
          self.mainDetailedziscan_stage2_23910_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(8) * stage1_num_groups_31260)))),
                                                            np.int64(N_20399),
                                                            np.int64(m_20400),
                                                            mem_30423,
                                                            np.int64(stage1_num_groups_31260),
                                                            np.int32(num_threads_31261))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage2_23910_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_31260)),),
                                     (np.long(stage1_num_groups_31260),))
          if synchronous:
            sync(self)
        required_groups_31303 = sext_i64_i32(sdiv_up64((m_20400 * N_20399),
                                                       segscan_group_sizze_23927))
        if ((1 * (np.long(num_groups_23928) * np.long(segscan_group_sizze_23927))) != 0):
          self.mainDetailedziscan_stage3_23910_var.set_args(self.global_failure,
                                                            np.int64(N_20399),
                                                            np.int64(m_20400),
                                                            np.int64(num_groups_23928),
                                                            mem_30423,
                                                            np.int32(num_threads_31261),
                                                            np.int32(required_groups_31303))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage3_23910_var,
                                     ((np.long(num_groups_23928) * np.long(segscan_group_sizze_23927)),),
                                     (np.long(segscan_group_sizze_23927),))
          if synchronous:
            sync(self)
      segmap_usable_groups_23948 = sdiv_up64(m_20400, segmap_group_sizze_23947)
      mem_30429 = opencl_alloc(self, bytes_30412, "mem_30429")
      if ((1 * (np.long(segmap_usable_groups_23948) * np.long(segmap_group_sizze_23947))) != 0):
        self.mainDetailedzisegmap_23893_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int64(i_20666),
                                                     mem_30423, mem_30429)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23893_var,
                                   ((np.long(segmap_usable_groups_23948) * np.long(segmap_group_sizze_23947)),),
                                   (np.long(segmap_group_sizze_23947),))
        if synchronous:
          sync(self)
      segmap_usable_groups_23984 = sdiv_up64(comparatee_23631,
                                             segmap_group_sizze_23983)
      if ((1 * (np.long(segmap_usable_groups_23984) * np.long(segmap_group_sizze_23983))) != 0):
        self.mainDetailedzisegmap_23817_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     mem_30397, mem_30400,
                                                     mem_30423, mem_30426)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_23817_var,
                                   ((np.long(segmap_usable_groups_23984) * np.long(segmap_group_sizze_23983)),),
                                   (np.long(segmap_group_sizze_23983),))
        if synchronous:
          sync(self)
      mem_30423 = None
      mem_30426 = None
      res_mem_30431 = mem_30429
      res_mem_30432 = mem_30397
      res_mem_30433 = mem_30400
    mem_30397 = None
    mem_30400 = None
    suff_outer_par_24032 = (self.sizes["mainDetailed.suff_outer_par_29"] <= m_20400)
    fits_24110 = sle64(res_20413, max_group_sizze_22514)
    suff_intra_par_24108 = (self.sizes["mainDetailed.suff_intra_par_30"] <= res_20413)
    intra_suff_and_fits_24111 = (suff_intra_par_24108 and fits_24110)
    segmap_group_sizze_24075 = self.sizes["mainDetailed.segmap_group_size_24044"]
    nest_sizze_24198 = (m_20400 * res_20413)
    segred_group_sizze_24199 = self.sizes["mainDetailed.segred_group_size_24182"]
    max_num_groups_31326 = self.sizes["mainDetailed.segred_num_groups_24184"]
    num_groups_24200 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_24198,
                                                            segred_group_sizze_24199),
                                                  sext_i32_i64(max_num_groups_31326))))
    segred_group_sizze_24213 = self.sizes["mainDetailed.segred_group_size_24161"]
    max_num_groups_31327 = self.sizes["mainDetailed.segred_num_groups_24163"]
    num_groups_24214 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_24198,
                                                            segred_group_sizze_24213),
                                                  sext_i32_i64(max_num_groups_31327))))
    segmap_group_sizze_24229 = self.sizes["mainDetailed.segmap_group_size_24146"]
    bytes_30442 = (np.int64(4) * segmap_group_sizze_24075)
    local_memory_capacity_31481 = self.max_local_memory
    if (sle64((bytes_30442 + bytes_30442),
              sext_i32_i64(local_memory_capacity_31481)) and suff_outer_par_24032):
      segmap_usable_groups_24076 = sdiv_up64(m_20400, segmap_group_sizze_24075)
      mem_30436 = opencl_alloc(self, bytes_29990, "mem_30436")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30436, np.int64(0),
                                                  images_mem_29973, np.int64(0),
                                                  np.int64(1), N_20401, m_20400)
      mem_30439 = opencl_alloc(self, bytes_30319, "mem_30439")
      self.futhark_builtinzhgpu_map_transpose_f32(mem_30439, np.int64(0),
                                                  res_mem_30432, np.int64(0),
                                                  np.int64(1), N_20399, m_20400)
      num_whole_tiles_29485 = squot64(res_20413, segmap_group_sizze_24075)
      residual_input_29606 = srem64(res_20413, segmap_group_sizze_24075)
      cond_29607 = (residual_input_29606 == np.int64(0))
      mem_30483 = opencl_alloc(self, bytes_30412, "mem_30483")
      mem_30485 = opencl_alloc(self, bytes_30412, "mem_30485")
      mem_30487 = opencl_alloc(self, bytes_30412, "mem_30487")
      if ((1 * (np.long(segmap_usable_groups_24076) * np.long(segmap_group_sizze_24075))) != 0):
        self.mainDetailedzisegmap_intragroup_29477_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_30442)),
                                                                cl.LocalMemory(np.long(bytes_30442)),
                                                                np.int64(m_20400),
                                                                np.int32(n_20404),
                                                                np.float32(hfrac_20406),
                                                                np.int64(res_20413),
                                                                np.int32(k2p2_20415),
                                                                np.int64(num_whole_tiles_29485),
                                                                np.int64(residual_input_29606),
                                                                np.byte(cond_29607),
                                                                mem_30436,
                                                                mem_30439,
                                                                mem_30483,
                                                                mem_30485,
                                                                mem_30487)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_29477_var,
                                   ((np.long(segmap_usable_groups_24076) * np.long(segmap_group_sizze_24075)),),
                                   (np.long(segmap_group_sizze_24075),))
        if synchronous:
          sync(self)
      mem_30436 = None
      mem_30439 = None
      res_mem_30511 = mem_30483
      res_mem_30512 = mem_30485
      res_mem_30513 = mem_30487
    else:
      local_memory_capacity_31480 = self.max_local_memory
      if (sle64(((np.int32(4) * res_20413) + (np.int32(4) * res_20413)),
                sext_i32_i64(local_memory_capacity_31480)) and intra_suff_and_fits_24111):
        mem_30492 = opencl_alloc(self, bytes_30412, "mem_30492")
        mem_30494 = opencl_alloc(self, bytes_30412, "mem_30494")
        mem_30496 = opencl_alloc(self, bytes_30412, "mem_30496")
        if ((1 * (np.long(m_20400) * np.long(res_20413))) != 0):
          self.mainDetailedzisegmap_intragroup_24040_var.set_args(self.global_failure,
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_20413))),
                                                                  cl.LocalMemory(np.long((np.int32(4) * res_20413))),
                                                                  np.int64(N_20399),
                                                                  np.int64(N_20401),
                                                                  np.float32(hfrac_20406),
                                                                  np.int64(res_20413),
                                                                  np.int32(k2p2_20415),
                                                                  images_mem_29973,
                                                                  res_mem_30432,
                                                                  mem_30492,
                                                                  mem_30494,
                                                                  mem_30496)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_intragroup_24040_var,
                                     ((np.long(m_20400) * np.long(res_20413)),),
                                     (np.long(res_20413),))
          if synchronous:
            sync(self)
        res_mem_30508 = mem_30492
        res_mem_30509 = mem_30494
        res_mem_30510 = mem_30496
      else:
        mem_30499 = opencl_alloc(self, bytes_30412, "mem_30499")
        if slt64((res_20413 * np.int64(2)), segred_group_sizze_24199):
          segment_sizze_nonzzero_31355 = smax64(np.int64(1), res_20413)
          num_threads_31356 = (num_groups_24200 * segred_group_sizze_24199)
          if ((1 * (np.long(num_groups_24200) * np.long(segred_group_sizze_24199))) != 0):
            self.mainDetailedzisegred_small_24188_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24199))),
                                                               np.int64(m_20400),
                                                               np.int64(N_20401),
                                                               np.int64(res_20413),
                                                               np.int64(num_groups_24200),
                                                               images_mem_29973,
                                                               mem_30499,
                                                               np.int64(segment_sizze_nonzzero_31355))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_24188_var,
                                       ((np.long(num_groups_24200) * np.long(segred_group_sizze_24199)),),
                                       (np.long(segred_group_sizze_24199),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31376 = sdiv_up64(num_groups_24200,
                                               smax64(np.int64(1), m_20400))
          elements_per_thread_31377 = sdiv_up64(res_20413,
                                                (segred_group_sizze_24199 * groups_per_segment_31376))
          virt_num_groups_31378 = (groups_per_segment_31376 * m_20400)
          num_threads_31379 = (num_groups_24200 * segred_group_sizze_24199)
          threads_per_segment_31380 = (groups_per_segment_31376 * segred_group_sizze_24199)
          group_res_arr_mem_31381 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_24199 * virt_num_groups_31378)),
                                                 "group_res_arr_mem_31381")
          mainDetailedzicounter_mem_31383 = self.mainDetailedzicounter_mem_31383
          if ((1 * (np.long(num_groups_24200) * np.long(segred_group_sizze_24199))) != 0):
            self.mainDetailedzisegred_large_24188_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24199))),
                                                               np.int64(N_20401),
                                                               np.int64(res_20413),
                                                               np.int64(num_groups_24200),
                                                               images_mem_29973,
                                                               mem_30499,
                                                               np.int64(groups_per_segment_31376),
                                                               np.int64(elements_per_thread_31377),
                                                               np.int64(virt_num_groups_31378),
                                                               np.int64(threads_per_segment_31380),
                                                               group_res_arr_mem_31381,
                                                               mainDetailedzicounter_mem_31383)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_24188_var,
                                       ((np.long(num_groups_24200) * np.long(segred_group_sizze_24199)),),
                                       (np.long(segred_group_sizze_24199),))
            if synchronous:
              sync(self)
        mem_30502 = opencl_alloc(self, bytes_30412, "mem_30502")
        if slt64((res_20413 * np.int64(2)), segred_group_sizze_24213):
          segment_sizze_nonzzero_31415 = smax64(np.int64(1), res_20413)
          num_threads_31416 = (num_groups_24214 * segred_group_sizze_24213)
          if ((1 * (np.long(num_groups_24214) * np.long(segred_group_sizze_24213))) != 0):
            self.mainDetailedzisegred_small_24167_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24213))),
                                                               np.int64(N_20399),
                                                               np.int64(m_20400),
                                                               np.int64(res_20413),
                                                               np.int64(num_groups_24214),
                                                               res_mem_30432,
                                                               mem_30499,
                                                               mem_30502,
                                                               np.int64(segment_sizze_nonzzero_31415))
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_small_24167_var,
                                       ((np.long(num_groups_24214) * np.long(segred_group_sizze_24213)),),
                                       (np.long(segred_group_sizze_24213),))
            if synchronous:
              sync(self)
        else:
          groups_per_segment_31436 = sdiv_up64(num_groups_24214,
                                               smax64(np.int64(1), m_20400))
          elements_per_thread_31437 = sdiv_up64(res_20413,
                                                (segred_group_sizze_24213 * groups_per_segment_31436))
          virt_num_groups_31438 = (groups_per_segment_31436 * m_20400)
          num_threads_31439 = (num_groups_24214 * segred_group_sizze_24213)
          threads_per_segment_31440 = (groups_per_segment_31436 * segred_group_sizze_24213)
          group_res_arr_mem_31441 = opencl_alloc(self,
                                                 (np.int32(4) * (segred_group_sizze_24213 * virt_num_groups_31438)),
                                                 "group_res_arr_mem_31441")
          mainDetailedzicounter_mem_31443 = self.mainDetailedzicounter_mem_31443
          if ((1 * (np.long(num_groups_24214) * np.long(segred_group_sizze_24213))) != 0):
            self.mainDetailedzisegred_large_24167_var.set_args(self.global_failure,
                                                               cl.LocalMemory(np.long(np.int32(1))),
                                                               cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24213))),
                                                               np.int64(N_20399),
                                                               np.int64(res_20413),
                                                               np.int64(num_groups_24214),
                                                               res_mem_30432,
                                                               mem_30499,
                                                               mem_30502,
                                                               np.int64(groups_per_segment_31436),
                                                               np.int64(elements_per_thread_31437),
                                                               np.int64(virt_num_groups_31438),
                                                               np.int64(threads_per_segment_31440),
                                                               group_res_arr_mem_31441,
                                                               mainDetailedzicounter_mem_31443)
            cl.enqueue_nd_range_kernel(self.queue,
                                       self.mainDetailedzisegred_large_24167_var,
                                       ((np.long(num_groups_24214) * np.long(segred_group_sizze_24213)),),
                                       (np.long(segred_group_sizze_24213),))
            if synchronous:
              sync(self)
        segmap_usable_groups_24230 = sdiv_up64(m_20400,
                                               segmap_group_sizze_24229)
        mem_30505 = opencl_alloc(self, bytes_30412, "mem_30505")
        mem_30507 = opencl_alloc(self, bytes_30412, "mem_30507")
        if ((1 * (np.long(segmap_usable_groups_24230) * np.long(segmap_group_sizze_24229))) != 0):
          self.mainDetailedzisegmap_24144_var.set_args(self.global_failure,
                                                       np.int64(m_20400),
                                                       np.float32(hfrac_20406),
                                                       np.int32(k2p2_20415),
                                                       mem_30499, mem_30502,
                                                       mem_30505, mem_30507)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegmap_24144_var,
                                     ((np.long(segmap_usable_groups_24230) * np.long(segmap_group_sizze_24229)),),
                                     (np.long(segmap_group_sizze_24229),))
          if synchronous:
            sync(self)
        mem_30502 = None
        res_mem_30508 = mem_30505
        res_mem_30509 = mem_30499
        res_mem_30510 = mem_30507
      res_mem_30511 = res_mem_30508
      res_mem_30512 = res_mem_30509
      res_mem_30513 = res_mem_30510
    segred_group_sizze_24250 = self.sizes["mainDetailed.segred_group_size_24249"]
    max_num_groups_31482 = self.sizes["mainDetailed.segred_num_groups_24251"]
    num_groups_24252 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segred_group_sizze_24250),
                                                  sext_i32_i64(max_num_groups_31482))))
    mem_30516 = opencl_alloc(self, np.int64(4), "mem_30516")
    mainDetailedzicounter_mem_31483 = self.mainDetailedzicounter_mem_31483
    group_res_arr_mem_31485 = opencl_alloc(self,
                                           (np.int32(4) * (segred_group_sizze_24250 * num_groups_24252)),
                                           "group_res_arr_mem_31485")
    num_threads_31487 = (num_groups_24252 * segred_group_sizze_24250)
    if ((1 * (np.long(num_groups_24252) * np.long(segred_group_sizze_24250))) != 0):
      self.mainDetailedzisegred_nonseg_24257_var.set_args(self.global_failure,
                                                          cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24250))),
                                                          cl.LocalMemory(np.long(np.int32(1))),
                                                          np.int64(m_20400),
                                                          np.int64(num_groups_24252),
                                                          res_mem_30511,
                                                          mem_30516,
                                                          mainDetailedzicounter_mem_31483,
                                                          group_res_arr_mem_31485,
                                                          np.int64(num_threads_31487))
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegred_nonseg_24257_var,
                                 ((np.long(num_groups_24252) * np.long(segred_group_sizze_24250)),),
                                 (np.long(segred_group_sizze_24250),))
      if synchronous:
        sync(self)
    read_res_31818 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_31818, mem_30516,
                    device_offset=(np.long(np.int64(0)) * 4),
                    is_blocking=synchronous)
    sync(self)
    res_20756 = read_res_31818[0]
    mem_30516 = None
    res_20761 = sext_i32_i64(res_20756)
    suff_outer_par_24289 = (self.sizes["mainDetailed.suff_outer_par_32"] <= m_20400)
    segmap_group_sizze_24312 = self.sizes["mainDetailed.segmap_group_size_24293"]
    nest_sizze_24355 = (m_20400 * res_20761)
    segred_group_sizze_24356 = self.sizes["mainDetailed.segred_group_size_24333"]
    max_num_groups_31513 = self.sizes["mainDetailed.segred_num_groups_24335"]
    num_groups_24357 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_24355,
                                                            segred_group_sizze_24356),
                                                  sext_i32_i64(max_num_groups_31513))))
    bytes_30519 = (np.int64(4) * segmap_group_sizze_24312)
    local_memory_capacity_31584 = self.max_local_memory
    if (sle64((bytes_30519 + bytes_30519),
              sext_i32_i64(local_memory_capacity_31584)) and suff_outer_par_24289):
      segmap_usable_groups_24313 = sdiv_up64(m_20400, segmap_group_sizze_24312)
      num_whole_tiles_29729 = squot64(res_20761, segmap_group_sizze_24312)
      residual_input_29828 = srem64(res_20761, segmap_group_sizze_24312)
      cond_29829 = (residual_input_29828 == np.int64(0))
      mem_30558 = opencl_alloc(self, bytes_30412, "mem_30558")
      if ((1 * (np.long(segmap_usable_groups_24313) * np.long(segmap_group_sizze_24312))) != 0):
        self.mainDetailedzisegmap_intragroup_29709_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_30519)),
                                                                cl.LocalMemory(np.long(bytes_30519)),
                                                                np.int64(N_20399),
                                                                np.int64(m_20400),
                                                                np.int64(res_20761),
                                                                np.int64(num_whole_tiles_29729),
                                                                np.int64(residual_input_29828),
                                                                np.byte(cond_29829),
                                                                res_mem_30432,
                                                                res_mem_30511,
                                                                res_mem_30512,
                                                                mem_30558)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_29709_var,
                                   ((np.long(segmap_usable_groups_24313) * np.long(segmap_group_sizze_24312)),),
                                   (np.long(segmap_group_sizze_24312),))
        if synchronous:
          sync(self)
      res_mem_30562 = mem_30558
    else:
      mem_30561 = opencl_alloc(self, bytes_30412, "mem_30561")
      if slt64((res_20761 * np.int64(2)), segred_group_sizze_24356):
        segment_sizze_nonzzero_31524 = smax64(np.int64(1), res_20761)
        num_threads_31525 = (num_groups_24357 * segred_group_sizze_24356)
        if ((1 * (np.long(num_groups_24357) * np.long(segred_group_sizze_24356))) != 0):
          self.mainDetailedzisegred_small_24339_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24356))),
                                                             np.int64(N_20399),
                                                             np.int64(m_20400),
                                                             np.int64(res_20761),
                                                             np.int64(num_groups_24357),
                                                             res_mem_30432,
                                                             res_mem_30511,
                                                             res_mem_30512,
                                                             mem_30561,
                                                             np.int64(segment_sizze_nonzzero_31524))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_small_24339_var,
                                     ((np.long(num_groups_24357) * np.long(segred_group_sizze_24356)),),
                                     (np.long(segred_group_sizze_24356),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_31545 = sdiv_up64(num_groups_24357,
                                             smax64(np.int64(1), m_20400))
        elements_per_thread_31546 = sdiv_up64(res_20761,
                                              (segred_group_sizze_24356 * groups_per_segment_31545))
        virt_num_groups_31547 = (groups_per_segment_31545 * m_20400)
        num_threads_31548 = (num_groups_24357 * segred_group_sizze_24356)
        threads_per_segment_31549 = (groups_per_segment_31545 * segred_group_sizze_24356)
        group_res_arr_mem_31550 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_24356 * virt_num_groups_31547)),
                                               "group_res_arr_mem_31550")
        mainDetailedzicounter_mem_31552 = self.mainDetailedzicounter_mem_31552
        if ((1 * (np.long(num_groups_24357) * np.long(segred_group_sizze_24356))) != 0):
          self.mainDetailedzisegred_large_24339_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long(np.int32(1))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_24356))),
                                                             np.int64(N_20399),
                                                             np.int64(res_20761),
                                                             np.int64(num_groups_24357),
                                                             res_mem_30432,
                                                             res_mem_30511,
                                                             res_mem_30512,
                                                             mem_30561,
                                                             np.int64(groups_per_segment_31545),
                                                             np.int64(elements_per_thread_31546),
                                                             np.int64(virt_num_groups_31547),
                                                             np.int64(threads_per_segment_31549),
                                                             group_res_arr_mem_31550,
                                                             mainDetailedzicounter_mem_31552)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_large_24339_var,
                                     ((np.long(num_groups_24357) * np.long(segred_group_sizze_24356)),),
                                     (np.long(segred_group_sizze_24356),))
          if synchronous:
            sync(self)
      res_mem_30562 = mem_30561
    iota32_arg_20783 = (N_20399 - res_20413)
    bounds_invalid_upwards_20784 = slt64(iota32_arg_20783, np.int64(0))
    valid_20785 = not(bounds_invalid_upwards_20784)
    range_valid_c_20786 = True
    assert valid_20785, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:111:22-35\n   #3  bfastfinal.fut:155:3-56\n   #4  bfastfinal.fut:151:1-155:56\n" % ("Range ",
                                                                                                                                                                                                                                      np.int64(0),
                                                                                                                                                                                                                                      "..",
                                                                                                                                                                                                                                      np.int64(1),
                                                                                                                                                                                                                                      "..<",
                                                                                                                                                                                                                                      iota32_arg_20783,
                                                                                                                                                                                                                                      " is invalid."))
    x_20788 = (np.int32(1) + n_20404)
    index_certs_20789 = True
    assert bounds_check_20669, ("Error: %s%d%s%d%s\n\nBacktrace:\n-> #0  bfastfinal.fut:109:63-81\n   #1  bfastfinal.fut:107:15-111:36\n   #2  bfastfinal.fut:155:3-56\n   #3  bfastfinal.fut:151:1-155:56\n" % ("Index [",
                                                                                                                                                                                                                 i_20666,
                                                                                                                                                                                                                 "] out of bounds for array of shape [",
                                                                                                                                                                                                                 N_20399,
                                                                                                                                                                                                                 "]."))
    read_res_31820 = np.empty(1, dtype=ct.c_int32)
    cl.enqueue_copy(self.queue, read_res_31820, mappingindices_mem_29972,
                    device_offset=(np.long(i_20666) * 4),
                    is_blocking=synchronous)
    sync(self)
    r32_arg_20790 = read_res_31820[0]
    res_20791 = sitofp_i32_f32(r32_arg_20790)
    range_valid_c_20792 = True
    assert valid_20785, ("Error: %s%d%s%d%s%d%s\n\nBacktrace:\n-> #0  /prelude/array.fut:60:3-10\n   #1  helpers.fut:2:3-8\n   #2  bfastfinal.fut:122:29-44\n   #3  /prelude/functional.fut:9:42-44\n   #4  bfastfinal.fut:116:38-145:9\n   #5  bfastfinal.fut:155:3-56\n   #6  bfastfinal.fut:151:1-155:56\n" % ("Range ",
                                                                                                                                                                                                                                                                                                                  np.int64(0),
                                                                                                                                                                                                                                                                                                                  "..",
                                                                                                                                                                                                                                                                                                                  np.int64(1),
                                                                                                                                                                                                                                                                                                                  "..<",
                                                                                                                                                                                                                                                                                                                  iota32_arg_20783,
                                                                                                                                                                                                                                                                                                                  " is invalid."))
    segmap_group_sizze_24434 = self.sizes["mainDetailed.segmap_group_size_24417"]
    segmap_usable_groups_24435 = sdiv_up64(iota32_arg_20783,
                                           segmap_group_sizze_24434)
    bytes_30564 = (np.int64(4) * iota32_arg_20783)
    mem_30565 = opencl_alloc(self, bytes_30564, "mem_30565")
    mem_30567 = opencl_alloc(self, bytes_30564, "mem_30567")
    if ((1 * (np.long(segmap_usable_groups_24435) * np.long(segmap_group_sizze_24434))) != 0):
      self.mainDetailedzisegmap_24415_var.set_args(self.global_failure,
                                                   np.float32(lam_20407),
                                                   np.int64(iota32_arg_20783),
                                                   np.int32(x_20788),
                                                   np.float32(res_20791),
                                                   mappingindices_mem_29972,
                                                   mem_30565, mem_30567)
      cl.enqueue_nd_range_kernel(self.queue,
                                 self.mainDetailedzisegmap_24415_var,
                                 ((np.long(segmap_usable_groups_24435) * np.long(segmap_group_sizze_24434)),),
                                 (np.long(segmap_group_sizze_24434),))
      if synchronous:
        sync(self)
    mem_30565 = None
    fits_24702 = sle64(iota32_arg_20783, max_group_sizze_22514)
    suff_intra_par_24700 = (self.sizes["mainDetailed.suff_intra_par_35"] <= iota32_arg_20783)
    intra_suff_and_fits_24703 = (suff_intra_par_24700 and fits_24702)
    segmap_group_sizze_25048 = self.sizes["mainDetailed.segmap_group_size_25028"]
    max_num_groups_31590 = self.sizes["mainDetailed.segmap_num_groups_25030"]
    num_groups_25049 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(m_20400,
                                                            segmap_group_sizze_25048),
                                                  sext_i32_i64(max_num_groups_31590))))
    nest_sizze_25070 = (m_20400 * iota32_arg_20783)
    segscan_group_sizze_25071 = self.sizes["mainDetailed.segscan_group_size_24986"]
    max_num_groups_31591 = self.sizes["mainDetailed.segscan_num_groups_24988"]
    num_groups_25072 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_25070,
                                                            segscan_group_sizze_25071),
                                                  sext_i32_i64(max_num_groups_31591))))
    segred_group_sizze_25110 = self.sizes["mainDetailed.segred_group_size_24932"]
    max_num_groups_31592 = self.sizes["mainDetailed.segred_num_groups_24934"]
    num_groups_25111 = sext_i64_i32(smax64(np.int64(1),
                                           smin64(sdiv_up64(nest_sizze_25070,
                                                            segred_group_sizze_25110),
                                                  sext_i32_i64(max_num_groups_31592))))
    segmap_group_sizze_25150 = self.sizes["mainDetailed.segmap_group_size_24906"]
    segmap_group_sizze_25173 = self.sizes["mainDetailed.segmap_group_size_24876"]
    bytes_30568 = (np.int64(4) * nest_sizze_25070)
    mem_30570 = opencl_alloc(self, bytes_30568, "mem_30570")
    self.futhark_builtinzhreplicate_f32(mem_30570, (m_20400 * iota32_arg_20783),
                                        np.nan)
    segmap_group_sizze_25211 = self.sizes["mainDetailed.segmap_group_size_24825"]
    local_memory_capacity_31795 = self.max_local_memory
    if (sle64((((((bytes_30564 + bytes_30564) + (np.int32(1) * iota32_arg_20783)) + (np.int32(4) * iota32_arg_20783)) + (np.int32(4) * iota32_arg_20783)) + bytes_30564),
              sext_i32_i64(local_memory_capacity_31795)) and intra_suff_and_fits_24703):
      mem_30583 = opencl_alloc(self, bytes_30568, "mem_30583")
      mem_30586 = opencl_alloc(self, bytes_30568, "mem_30586")
      mem_30588 = opencl_alloc(self, bytes_30412, "mem_30588")
      mem_30590 = opencl_alloc(self, bytes_30412, "mem_30590")
      if ((1 * (np.long(m_20400) * np.long(iota32_arg_20783))) != 0):
        self.mainDetailedzisegmap_intragroup_24462_var.set_args(self.global_failure,
                                                                cl.LocalMemory(np.long(bytes_30564)),
                                                                cl.LocalMemory(np.long((np.int32(4) * iota32_arg_20783))),
                                                                cl.LocalMemory(np.long((np.int32(4) * iota32_arg_20783))),
                                                                cl.LocalMemory(np.long((np.int32(1) * iota32_arg_20783))),
                                                                cl.LocalMemory(np.long(bytes_30564)),
                                                                cl.LocalMemory(np.long(bytes_30564)),
                                                                np.int64(N_20399),
                                                                np.int32(n_20404),
                                                                np.int64(iota32_arg_20783),
                                                                res_mem_30431,
                                                                res_mem_30432,
                                                                res_mem_30433,
                                                                res_mem_30511,
                                                                res_mem_30512,
                                                                res_mem_30513,
                                                                res_mem_30562,
                                                                mem_30567,
                                                                mem_30583,
                                                                mem_30586,
                                                                mem_30588,
                                                                mem_30590)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_intragroup_24462_var,
                                   ((np.long(m_20400) * np.long(iota32_arg_20783)),),
                                   (np.long(iota32_arg_20783),))
        if synchronous:
          sync(self)
      res_mem_30621 = mem_30583
      res_mem_30622 = mem_30586
      res_mem_30623 = mem_30588
      res_mem_30624 = mem_30590
    else:
      mem_30593 = opencl_alloc(self, bytes_30412, "mem_30593")
      mem_30595 = opencl_alloc(self, bytes_30412, "mem_30595")
      if ((1 * (np.long(num_groups_25049) * np.long(segmap_group_sizze_25048))) != 0):
        self.mainDetailedzisegmap_25026_var.set_args(self.global_failure,
                                                     np.int64(m_20400),
                                                     np.int64(num_groups_25049),
                                                     res_mem_30431,
                                                     res_mem_30512,
                                                     res_mem_30513, mem_30593,
                                                     mem_30595)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_25026_var,
                                   ((np.long(num_groups_25049) * np.long(segmap_group_sizze_25048)),),
                                   (np.long(segmap_group_sizze_25048),))
        if synchronous:
          sync(self)
      mem_30599 = opencl_alloc(self, bytes_30568, "mem_30599")
      if slt64(np.int64(0), (m_20400 * iota32_arg_20783)):
        stage1_max_num_groups_31626 = self.max_group_size
        stage1_num_groups_31627 = smin64(stage1_max_num_groups_31626,
                                         num_groups_25072)
        num_threads_31628 = sext_i64_i32((stage1_num_groups_31627 * segscan_group_sizze_25071))
        if ((1 * (np.long(stage1_num_groups_31627) * np.long(segscan_group_sizze_25071))) != 0):
          self.mainDetailedziscan_stage1_24992_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(4) * segscan_group_sizze_25071)))),
                                                            np.int64(N_20399),
                                                            np.int64(m_20400),
                                                            np.int64(iota32_arg_20783),
                                                            res_mem_30432,
                                                            res_mem_30511,
                                                            res_mem_30512,
                                                            res_mem_30562,
                                                            mem_30595,
                                                            mem_30599,
                                                            np.int32(num_threads_31628))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage1_24992_var,
                                     ((np.long(stage1_num_groups_31627) * np.long(segscan_group_sizze_25071)),),
                                     (np.long(segscan_group_sizze_25071),))
          if synchronous:
            sync(self)
        if ((1 * (np.long(np.int64(1)) * np.long(stage1_num_groups_31627))) != 0):
          self.mainDetailedziscan_stage2_24992_var.set_args(self.global_failure,
                                                            cl.LocalMemory(np.long(smax64(np.int64(1),
                                                                                          (np.int32(4) * stage1_num_groups_31627)))),
                                                            np.int64(m_20400),
                                                            np.int64(iota32_arg_20783),
                                                            mem_30599,
                                                            np.int64(stage1_num_groups_31627),
                                                            np.int32(num_threads_31628))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage2_24992_var,
                                     ((np.long(np.int64(1)) * np.long(stage1_num_groups_31627)),),
                                     (np.long(stage1_num_groups_31627),))
          if synchronous:
            sync(self)
        required_groups_31670 = sext_i64_i32(sdiv_up64((m_20400 * iota32_arg_20783),
                                                       segscan_group_sizze_25071))
        if ((1 * (np.long(num_groups_25072) * np.long(segscan_group_sizze_25071))) != 0):
          self.mainDetailedziscan_stage3_24992_var.set_args(self.global_failure,
                                                            np.int64(m_20400),
                                                            np.int64(iota32_arg_20783),
                                                            np.int64(num_groups_25072),
                                                            mem_30599,
                                                            np.int32(num_threads_31628),
                                                            np.int32(required_groups_31670))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedziscan_stage3_24992_var,
                                     ((np.long(num_groups_25072) * np.long(segscan_group_sizze_25071)),),
                                     (np.long(segscan_group_sizze_25071),))
          if synchronous:
            sync(self)
      mem_30602 = opencl_alloc(self, m_20400, "mem_30602")
      mem_30604 = opencl_alloc(self, bytes_30412, "mem_30604")
      mem_30606 = opencl_alloc(self, bytes_30412, "mem_30606")
      mem_30609 = opencl_alloc(self, bytes_30568, "mem_30609")
      if slt64((iota32_arg_20783 * np.int64(2)), segred_group_sizze_25110):
        segment_sizze_nonzzero_31682 = smax64(np.int64(1), iota32_arg_20783)
        num_threads_31683 = (num_groups_25111 * segred_group_sizze_25110)
        if ((1 * (np.long(num_groups_25111) * np.long(segred_group_sizze_25110))) != 0):
          self.mainDetailedzisegred_small_24938_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25110))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25110))),
                                                             cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_25110))),
                                                             np.int64(m_20400),
                                                             np.int64(iota32_arg_20783),
                                                             np.int64(num_groups_25111),
                                                             mem_30567,
                                                             mem_30593,
                                                             mem_30595,
                                                             mem_30599,
                                                             mem_30602,
                                                             mem_30604,
                                                             mem_30606,
                                                             mem_30609,
                                                             np.int64(segment_sizze_nonzzero_31682))
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_small_24938_var,
                                     ((np.long(num_groups_25111) * np.long(segred_group_sizze_25110)),),
                                     (np.long(segred_group_sizze_25110),))
          if synchronous:
            sync(self)
      else:
        groups_per_segment_31718 = sdiv_up64(num_groups_25111,
                                             smax64(np.int64(1), m_20400))
        elements_per_thread_31719 = sdiv_up64(iota32_arg_20783,
                                              (segred_group_sizze_25110 * groups_per_segment_31718))
        virt_num_groups_31720 = (groups_per_segment_31718 * m_20400)
        num_threads_31721 = (num_groups_25111 * segred_group_sizze_25110)
        threads_per_segment_31722 = (groups_per_segment_31718 * segred_group_sizze_25110)
        group_res_arr_mem_31723 = opencl_alloc(self,
                                               (np.int32(1) * (segred_group_sizze_25110 * virt_num_groups_31720)),
                                               "group_res_arr_mem_31723")
        group_res_arr_mem_31725 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_25110 * virt_num_groups_31720)),
                                               "group_res_arr_mem_31725")
        group_res_arr_mem_31727 = opencl_alloc(self,
                                               (np.int32(4) * (segred_group_sizze_25110 * virt_num_groups_31720)),
                                               "group_res_arr_mem_31727")
        mainDetailedzicounter_mem_31729 = self.mainDetailedzicounter_mem_31729
        if ((1 * (np.long(num_groups_25111) * np.long(segred_group_sizze_25110))) != 0):
          self.mainDetailedzisegred_large_24938_var.set_args(self.global_failure,
                                                             cl.LocalMemory(np.long(np.int32(1))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25110))),
                                                             cl.LocalMemory(np.long((np.int32(4) * segred_group_sizze_25110))),
                                                             cl.LocalMemory(np.long((np.int32(1) * segred_group_sizze_25110))),
                                                             np.int64(iota32_arg_20783),
                                                             np.int64(num_groups_25111),
                                                             mem_30567,
                                                             mem_30593,
                                                             mem_30595,
                                                             mem_30599,
                                                             mem_30602,
                                                             mem_30604,
                                                             mem_30606,
                                                             mem_30609,
                                                             np.int64(groups_per_segment_31718),
                                                             np.int64(elements_per_thread_31719),
                                                             np.int64(virt_num_groups_31720),
                                                             group_res_arr_mem_31723,
                                                             group_res_arr_mem_31725,
                                                             group_res_arr_mem_31727,
                                                             mainDetailedzicounter_mem_31729)
          cl.enqueue_nd_range_kernel(self.queue,
                                     self.mainDetailedzisegred_large_24938_var,
                                     ((np.long(num_groups_25111) * np.long(segred_group_sizze_25110)),),
                                     (np.long(segred_group_sizze_25110),))
          if synchronous:
            sync(self)
      mem_30593 = None
      mem_30599 = None
      segmap_usable_groups_25151 = sdiv_up64(m_20400, segmap_group_sizze_25150)
      mem_30611 = opencl_alloc(self, bytes_30412, "mem_30611")
      if ((m_20400 * np.int32(4)) != 0):
        cl.enqueue_copy(self.queue, mem_30611, mem_30606,
                        dest_offset=np.long(np.int64(0)),
                        src_offset=np.long(np.int64(0)),
                        byte_count=np.long((m_20400 * np.int32(4))))
      if synchronous:
        sync(self)
      mem_30606 = None
      mem_30614 = opencl_alloc(self, m_20400, "mem_30614")
      mem_30616 = opencl_alloc(self, bytes_30412, "mem_30616")
      if ((1 * (np.long(segmap_usable_groups_25151) * np.long(segmap_group_sizze_25150))) != 0):
        self.mainDetailedzisegmap_24904_var.set_args(self.global_failure,
                                                     np.int64(m_20400),
                                                     mem_30602, mem_30604,
                                                     mem_30614, mem_30616)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_24904_var,
                                   ((np.long(segmap_usable_groups_25151) * np.long(segmap_group_sizze_25150)),),
                                   (np.long(segmap_group_sizze_25150),))
        if synchronous:
          sync(self)
      mem_30602 = None
      mem_30604 = None
      segmap_usable_groups_25174 = sdiv_up64(m_20400, segmap_group_sizze_25173)
      mem_30619 = opencl_alloc(self, bytes_30412, "mem_30619")
      if ((1 * (np.long(segmap_usable_groups_25174) * np.long(segmap_group_sizze_25173))) != 0):
        self.mainDetailedzisegmap_24874_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int32(n_20404),
                                                     res_mem_30433,
                                                     res_mem_30512, mem_30595,
                                                     mem_30614, mem_30616,
                                                     mem_30619)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_24874_var,
                                   ((np.long(segmap_usable_groups_25174) * np.long(segmap_group_sizze_25173)),),
                                   (np.long(segmap_group_sizze_25173),))
        if synchronous:
          sync(self)
      mem_30614 = None
      mem_30616 = None
      segmap_usable_groups_25212 = sdiv_up64(nest_sizze_25070,
                                             segmap_group_sizze_25211)
      if ((1 * (np.long(segmap_usable_groups_25212) * np.long(segmap_group_sizze_25211))) != 0):
        self.mainDetailedzisegmap_24822_var.set_args(self.global_failure,
                                                     np.int64(N_20399),
                                                     np.int64(m_20400),
                                                     np.int32(n_20404),
                                                     np.int64(iota32_arg_20783),
                                                     res_mem_30433,
                                                     res_mem_30512, mem_30570,
                                                     mem_30595, mem_30609)
        cl.enqueue_nd_range_kernel(self.queue,
                                   self.mainDetailedzisegmap_24822_var,
                                   ((np.long(segmap_usable_groups_25212) * np.long(segmap_group_sizze_25211)),),
                                   (np.long(segmap_group_sizze_25211),))
        if synchronous:
          sync(self)
      mem_30595 = None
      res_mem_30621 = mem_30570
      res_mem_30622 = mem_30609
      res_mem_30623 = mem_30619
      res_mem_30624 = mem_30611
    res_mem_30433 = None
    res_mem_30511 = None
    mem_30570 = None
    out_arrsizze_30765 = m_20400
    out_arrsizze_30767 = m_20400
    out_arrsizze_30769 = m_20400
    out_arrsizze_30771 = m_20400
    out_arrsizze_30773 = m_20400
    out_arrsizze_30774 = iota32_arg_20783
    out_arrsizze_30776 = m_20400
    out_arrsizze_30777 = iota32_arg_20783
    out_arrsizze_30779 = iota32_arg_20783
    out_arrsizze_30781 = m_20400
    out_arrsizze_30783 = m_20400
    out_arrsizze_30785 = m_20400
    out_arrsizze_30786 = N_20399
    out_arrsizze_30788 = m_20400
    out_arrsizze_30789 = N_20399
    out_mem_30764 = res_mem_30562
    out_mem_30766 = res_mem_30431
    out_mem_30768 = res_mem_30512
    out_mem_30770 = res_mem_30513
    out_mem_30772 = res_mem_30621
    out_mem_30775 = res_mem_30622
    out_mem_30778 = mem_30567
    out_mem_30780 = res_mem_30623
    out_mem_30782 = res_mem_30624
    out_mem_30784 = res_mem_30432
    out_mem_30787 = res_mem_30394
    return (out_mem_30764, out_arrsizze_30765, out_mem_30766,
            out_arrsizze_30767, out_mem_30768, out_arrsizze_30769,
            out_mem_30770, out_arrsizze_30771, out_mem_30772,
            out_arrsizze_30773, out_arrsizze_30774, out_mem_30775,
            out_arrsizze_30776, out_arrsizze_30777, out_mem_30778,
            out_arrsizze_30779, out_mem_30780, out_arrsizze_30781,
            out_mem_30782, out_arrsizze_30783, out_mem_30784,
            out_arrsizze_30785, out_arrsizze_30786, out_mem_30787,
            out_arrsizze_30788, out_arrsizze_30789)
  def futhark_remove_nans(self, images_mem_29972, m_20385, n_20386, p_20387,
                          nan_value_20388):
    y_21607 = (n_20386 * p_20387)
    nest_sizze_21608 = (m_20385 * y_21607)
    segmap_group_sizze_21609 = self.sizes["remove_nans.segmap_group_size_21552"]
    segmap_usable_groups_21610 = sdiv_up64(nest_sizze_21608,
                                           segmap_group_sizze_21609)
    binop_x_29975 = (m_20385 * n_20386)
    binop_x_29976 = (p_20387 * binop_x_29975)
    bytes_29974 = (np.int64(4) * binop_x_29976)
    mem_29977 = opencl_alloc(self, bytes_29974, "mem_29977")
    if ((1 * (np.long(segmap_usable_groups_21610) * np.long(segmap_group_sizze_21609))) != 0):
      self.remove_nanszisegmap_21548_var.set_args(self.global_failure,
                                                  np.int64(m_20385),
                                                  np.int64(n_20386),
                                                  np.int64(p_20387),
                                                  np.int16(nan_value_20388),
                                                  images_mem_29972, mem_29977)
      cl.enqueue_nd_range_kernel(self.queue, self.remove_nanszisegmap_21548_var,
                                 ((np.long(segmap_usable_groups_21610) * np.long(segmap_group_sizze_21609)),),
                                 (np.long(segmap_group_sizze_21609),))
      if synchronous:
        sync(self)
    out_arrsizze_30765 = m_20385
    out_arrsizze_30766 = n_20386
    out_arrsizze_30767 = p_20387
    out_mem_30764 = mem_29977
    return (out_mem_30764, out_arrsizze_30765, out_arrsizze_30766,
            out_arrsizze_30767)
  def futhark_reshapeTransp(self, images_mem_29972, m_20378, n_20379, p_20380):
    flatten_to_arg_20382 = (n_20379 * p_20380)
    binop_x_29974 = (m_20378 * flatten_to_arg_20382)
    bytes_29973 = (np.int64(4) * binop_x_29974)
    mem_29975 = opencl_alloc(self, bytes_29973, "mem_29975")
    self.futhark_builtinzhgpu_map_transpose_f32(mem_29975, np.int64(0),
                                                images_mem_29972, np.int64(0),
                                                np.int64(1),
                                                flatten_to_arg_20382, m_20378)
    out_arrsizze_30765 = flatten_to_arg_20382
    out_arrsizze_30766 = m_20378
    out_mem_30764 = mem_29975
    return (out_mem_30764, out_arrsizze_30765, out_arrsizze_30766)
  def main(self, trend_20970_ext, k_20971_ext, n_20972_ext, freq_20973_ext,
           hfrac_20974_ext, lam_20975_ext, mappingindices_mem_29972_ext,
           images_mem_29973_ext):
    try:
      trend_20970 = np.int32(ct.c_int32(trend_20970_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_20970_ext),
                                                                                                                            trend_20970_ext))
    try:
      k_20971 = np.int32(ct.c_int32(k_20971_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_20971_ext),
                                                                                                                            k_20971_ext))
    try:
      n_20972 = np.int32(ct.c_int32(n_20972_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_20972_ext),
                                                                                                                            n_20972_ext))
    try:
      freq_20973 = np.float32(ct.c_float(freq_20973_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_20973_ext),
                                                                                                                            freq_20973_ext))
    try:
      hfrac_20974 = np.float32(ct.c_float(hfrac_20974_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_20974_ext),
                                                                                                                            hfrac_20974_ext))
    try:
      lam_20975 = np.float32(ct.c_float(lam_20975_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_20975_ext),
                                                                                                                            lam_20975_ext))
    try:
      assert ((type(mappingindices_mem_29972_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_29972_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_20967 = np.int64(mappingindices_mem_29972_ext.shape[0])
      if (type(mappingindices_mem_29972_ext) == cl.array.Array):
        mappingindices_mem_29972 = mappingindices_mem_29972_ext.data
      else:
        mappingindices_mem_29972 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_29972_ext.nbytes),
                                                "mappingindices_mem_29972")
        if (np.int64(mappingindices_mem_29972_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_29972,
                          normaliseArray(mappingindices_mem_29972_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_29972_ext),
                                                                                                                            mappingindices_mem_29972_ext))
    try:
      assert ((type(images_mem_29973_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_29973_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_20968 = np.int64(images_mem_29973_ext.shape[0])
      N_20969 = np.int64(images_mem_29973_ext.shape[1])
      if (type(images_mem_29973_ext) == cl.array.Array):
        images_mem_29973 = images_mem_29973_ext.data
      else:
        images_mem_29973 = opencl_alloc(self,
                                        np.int64(images_mem_29973_ext.nbytes),
                                        "images_mem_29973")
        if (np.int64(images_mem_29973_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_29973,
                          normaliseArray(images_mem_29973_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_29973_ext),
                                                                                                                            images_mem_29973_ext))
    (out_mem_30764, out_arrsizze_30765, out_mem_30766,
     out_arrsizze_30767) = self.futhark_main(mappingindices_mem_29972,
                                             images_mem_29973, N_20967, m_20968,
                                             N_20969, trend_20970, k_20971,
                                             n_20972, freq_20973, hfrac_20974,
                                             lam_20975)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_30765,), ct.c_int32,
                           data=out_mem_30764), cl.array.Array(self.queue,
                                                               (out_arrsizze_30767,),
                                                               ct.c_float,
                                                               data=out_mem_30766))
  def mainDetailed(self, trend_20402_ext, k_20403_ext, n_20404_ext,
                   freq_20405_ext, hfrac_20406_ext, lam_20407_ext,
                   mappingindices_mem_29972_ext, images_mem_29973_ext):
    try:
      trend_20402 = np.int32(ct.c_int32(trend_20402_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(trend_20402_ext),
                                                                                                                            trend_20402_ext))
    try:
      k_20403 = np.int32(ct.c_int32(k_20403_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(k_20403_ext),
                                                                                                                            k_20403_ext))
    try:
      n_20404 = np.int32(ct.c_int32(n_20404_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #2 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i32",
                                                                                                                            type(n_20404_ext),
                                                                                                                            n_20404_ext))
    try:
      freq_20405 = np.float32(ct.c_float(freq_20405_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #3 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(freq_20405_ext),
                                                                                                                            freq_20405_ext))
    try:
      hfrac_20406 = np.float32(ct.c_float(hfrac_20406_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #4 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(hfrac_20406_ext),
                                                                                                                            hfrac_20406_ext))
    try:
      lam_20407 = np.float32(ct.c_float(lam_20407_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #5 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("f32",
                                                                                                                            type(lam_20407_ext),
                                                                                                                            lam_20407_ext))
    try:
      assert ((type(mappingindices_mem_29972_ext) in [np.ndarray,
                                                      cl.array.Array]) and (mappingindices_mem_29972_ext.dtype == np.int32)), "Parameter has unexpected type"
      N_20399 = np.int64(mappingindices_mem_29972_ext.shape[0])
      if (type(mappingindices_mem_29972_ext) == cl.array.Array):
        mappingindices_mem_29972 = mappingindices_mem_29972_ext.data
      else:
        mappingindices_mem_29972 = opencl_alloc(self,
                                                np.int64(mappingindices_mem_29972_ext.nbytes),
                                                "mappingindices_mem_29972")
        if (np.int64(mappingindices_mem_29972_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, mappingindices_mem_29972,
                          normaliseArray(mappingindices_mem_29972_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #6 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[]i32",
                                                                                                                            type(mappingindices_mem_29972_ext),
                                                                                                                            mappingindices_mem_29972_ext))
    try:
      assert ((type(images_mem_29973_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_29973_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_20400 = np.int64(images_mem_29973_ext.shape[0])
      N_20401 = np.int64(images_mem_29973_ext.shape[1])
      if (type(images_mem_29973_ext) == cl.array.Array):
        images_mem_29973 = images_mem_29973_ext.data
      else:
        images_mem_29973 = opencl_alloc(self,
                                        np.int64(images_mem_29973_ext.nbytes),
                                        "images_mem_29973")
        if (np.int64(images_mem_29973_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_29973,
                          normaliseArray(images_mem_29973_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #7 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][]f32",
                                                                                                                            type(images_mem_29973_ext),
                                                                                                                            images_mem_29973_ext))
    (out_mem_30764, out_arrsizze_30765, out_mem_30766, out_arrsizze_30767,
     out_mem_30768, out_arrsizze_30769, out_mem_30770, out_arrsizze_30771,
     out_mem_30772, out_arrsizze_30773, out_arrsizze_30774, out_mem_30775,
     out_arrsizze_30776, out_arrsizze_30777, out_mem_30778, out_arrsizze_30779,
     out_mem_30780, out_arrsizze_30781, out_mem_30782, out_arrsizze_30783,
     out_mem_30784, out_arrsizze_30785, out_arrsizze_30786, out_mem_30787,
     out_arrsizze_30788,
     out_arrsizze_30789) = self.futhark_mainDetailed(mappingindices_mem_29972,
                                                     images_mem_29973, N_20399,
                                                     m_20400, N_20401,
                                                     trend_20402, k_20403,
                                                     n_20404, freq_20405,
                                                     hfrac_20406, lam_20407)
    sync(self)
    return (cl.array.Array(self.queue, (out_arrsizze_30765,), ct.c_float,
                           data=out_mem_30764), cl.array.Array(self.queue,
                                                               (out_arrsizze_30767,),
                                                               ct.c_int32,
                                                               data=out_mem_30766),
            cl.array.Array(self.queue, (out_arrsizze_30769,), ct.c_int32,
                           data=out_mem_30768), cl.array.Array(self.queue,
                                                               (out_arrsizze_30771,),
                                                               ct.c_float,
                                                               data=out_mem_30770),
            cl.array.Array(self.queue, (out_arrsizze_30773, out_arrsizze_30774),
                           ct.c_float, data=out_mem_30772),
            cl.array.Array(self.queue, (out_arrsizze_30776, out_arrsizze_30777),
                           ct.c_float, data=out_mem_30775),
            cl.array.Array(self.queue, (out_arrsizze_30779,), ct.c_float,
                           data=out_mem_30778), cl.array.Array(self.queue,
                                                               (out_arrsizze_30781,),
                                                               ct.c_int32,
                                                               data=out_mem_30780),
            cl.array.Array(self.queue, (out_arrsizze_30783,), ct.c_float,
                           data=out_mem_30782), cl.array.Array(self.queue,
                                                               (out_arrsizze_30785,
                                                                out_arrsizze_30786),
                                                               ct.c_float,
                                                               data=out_mem_30784),
            cl.array.Array(self.queue, (out_arrsizze_30788, out_arrsizze_30789),
                           ct.c_float, data=out_mem_30787))
  def remove_nans(self, nan_value_20388_ext, images_mem_29972_ext):
    try:
      nan_value_20388 = np.int16(ct.c_int16(nan_value_20388_ext))
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("i16",
                                                                                                                            type(nan_value_20388_ext),
                                                                                                                            nan_value_20388_ext))
    try:
      assert ((type(images_mem_29972_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_29972_ext.dtype == np.int16)), "Parameter has unexpected type"
      m_20385 = np.int64(images_mem_29972_ext.shape[0])
      n_20386 = np.int64(images_mem_29972_ext.shape[1])
      p_20387 = np.int64(images_mem_29972_ext.shape[2])
      if (type(images_mem_29972_ext) == cl.array.Array):
        images_mem_29972 = images_mem_29972_ext.data
      else:
        images_mem_29972 = opencl_alloc(self,
                                        np.int64(images_mem_29972_ext.nbytes),
                                        "images_mem_29972")
        if (np.int64(images_mem_29972_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_29972,
                          normaliseArray(images_mem_29972_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #1 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]i16",
                                                                                                                            type(images_mem_29972_ext),
                                                                                                                            images_mem_29972_ext))
    (out_mem_30764, out_arrsizze_30765, out_arrsizze_30766,
     out_arrsizze_30767) = self.futhark_remove_nans(images_mem_29972, m_20385,
                                                    n_20386, p_20387,
                                                    nan_value_20388)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_30765, out_arrsizze_30766,
                                       out_arrsizze_30767), ct.c_float,
                          data=out_mem_30764)
  def reshapeTransp(self, images_mem_29972_ext):
    try:
      assert ((type(images_mem_29972_ext) in [np.ndarray,
                                              cl.array.Array]) and (images_mem_29972_ext.dtype == np.float32)), "Parameter has unexpected type"
      m_20378 = np.int64(images_mem_29972_ext.shape[0])
      n_20379 = np.int64(images_mem_29972_ext.shape[1])
      p_20380 = np.int64(images_mem_29972_ext.shape[2])
      if (type(images_mem_29972_ext) == cl.array.Array):
        images_mem_29972 = images_mem_29972_ext.data
      else:
        images_mem_29972 = opencl_alloc(self,
                                        np.int64(images_mem_29972_ext.nbytes),
                                        "images_mem_29972")
        if (np.int64(images_mem_29972_ext.nbytes) != 0):
          cl.enqueue_copy(self.queue, images_mem_29972,
                          normaliseArray(images_mem_29972_ext),
                          is_blocking=synchronous)
    except (TypeError, AssertionError) as e:
      raise TypeError("Argument #0 has invalid value\nFuthark type: {}\nArgument has Python type {} and value: {}\n".format("[][][]f32",
                                                                                                                            type(images_mem_29972_ext),
                                                                                                                            images_mem_29972_ext))
    (out_mem_30764, out_arrsizze_30765,
     out_arrsizze_30766) = self.futhark_reshapeTransp(images_mem_29972, m_20378,
                                                      n_20379, p_20380)
    sync(self)
    return cl.array.Array(self.queue, (out_arrsizze_30765, out_arrsizze_30766),
                          ct.c_float, data=out_mem_30764)